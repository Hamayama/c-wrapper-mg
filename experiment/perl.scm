;; generated by c-wrapper

(define-module perl
  (use c-wrapper)
  
  (export-all)
  )

(select-module perl)

(c-load-library '("/System/Library/Perl/5.8.6/darwin-thread-multi-2level/CORE/libperl.dylib") :option "")

(define-ctype __int8_t <c-char>)
(define-ctype __uint8_t <c-uchar>)
(define-ctype __int16_t <c-short>)
(define-ctype __uint16_t <c-ushort>)
(define-ctype __int32_t <c-int>)
(define-ctype __uint32_t <c-uint>)
(define-ctype __int64_t <c-longlong>)
(define-ctype __uint64_t <c-ulonglong>)
(define-ctype __darwin_intptr_t <c-long>)
(define-ctype __darwin_natural_t <c-uint>)
(define-ctype __darwin_ct_rune_t <c-int>)
(define-c-union G392)
(init-c-union! (c-union 'G392) (list (cons '__mbstate8 (make-c-array <c-char> 128)) (cons '_mbstateL <c-longlong>)))
(define-ctype __mbstate_t (c-union 'G392))
(define-ctype __darwin_mbstate_t <__mbstate_t>)
(define-ctype __darwin_ptrdiff_t <c-int>)
(define-ctype __darwin_size_t <c-ulong>)
(define-ctype __darwin_va_list (ptr <c-void>))
(define-ctype __darwin_wchar_t <c-int>)
(define-ctype __darwin_rune_t <__darwin_wchar_t>)
(define-ctype __darwin_wint_t <c-int>)
(define-ctype __darwin_clock_t <c-ulong>)
(define-ctype __darwin_socklen_t <__uint32_t>)
(define-ctype __darwin_ssize_t <c-long>)
(define-ctype __darwin_time_t <c-long>)
(define-ctype int8_t <c-char>)
(define-ctype u_int8_t <c-uchar>)
(define-ctype int16_t <c-short>)
(define-ctype u_int16_t <c-ushort>)
(define-ctype int32_t <c-int>)
(define-ctype u_int32_t <c-uint>)
(define-ctype int64_t <c-longlong>)
(define-ctype u_int64_t <c-ulonglong>)
(define-ctype register_t <int32_t>)
(define-ctype intptr_t <__darwin_intptr_t>)
(define-ctype uintptr_t <c-ulong>)
(define-ctype user_addr_t <u_int64_t>)
(define-ctype user_size_t <u_int64_t>)
(define-ctype user_ssize_t <int64_t>)
(define-ctype user_long_t <int64_t>)
(define-ctype user_ulong_t <u_int64_t>)
(define-ctype user_time_t <int64_t>)
(define-ctype syscall_arg_t <u_int64_t>)
(define-c-struct mcontext)
(define-c-struct mcontext64)
(define-c-struct __darwin_pthread_handler_rec)
(init-c-struct! (c-struct '__darwin_pthread_handler_rec) (list (cons '__routine (make-c-func-ptr <c-void> (list (list '#f (ptr <c-void>))))) (cons '__arg (ptr <c-void>)) (cons '__next (ptr (c-struct '__darwin_pthread_handler_rec)))))
(define-c-struct _opaque_pthread_attr_t)
(init-c-struct! (c-struct '_opaque_pthread_attr_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> 36))))
(define-c-struct _opaque_pthread_cond_t)
(init-c-struct! (c-struct '_opaque_pthread_cond_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> 24))))
(define-c-struct _opaque_pthread_condattr_t)
(init-c-struct! (c-struct '_opaque_pthread_condattr_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> 4))))
(define-c-struct _opaque_pthread_mutex_t)
(init-c-struct! (c-struct '_opaque_pthread_mutex_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> 40))))
(define-c-struct _opaque_pthread_mutexattr_t)
(init-c-struct! (c-struct '_opaque_pthread_mutexattr_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> 8))))
(define-c-struct _opaque_pthread_once_t)
(init-c-struct! (c-struct '_opaque_pthread_once_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> 4))))
(define-c-struct _opaque_pthread_rwlock_t)
(init-c-struct! (c-struct '_opaque_pthread_rwlock_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> 124))))
(define-c-struct _opaque_pthread_rwlockattr_t)
(init-c-struct! (c-struct '_opaque_pthread_rwlockattr_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> 12))))
(define-c-struct _opaque_pthread_t)
(init-c-struct! (c-struct '_opaque_pthread_t) (list (cons '__sig <c-long>) (cons '__cleanup_stack (ptr (c-struct '__darwin_pthread_handler_rec))) (cons '__opaque (make-c-array <c-char> 596))))
(define-ctype __darwin_blkcnt_t <__int64_t>)
(define-ctype __darwin_blksize_t <__int32_t>)
(define-ctype __darwin_dev_t <__int32_t>)
(define-ctype __darwin_fsblkcnt_t <c-uint>)
(define-ctype __darwin_fsfilcnt_t <c-uint>)
(define-ctype __darwin_gid_t <__uint32_t>)
(define-ctype __darwin_id_t <__uint32_t>)
(define-ctype __darwin_ino_t <__uint32_t>)
(define-ctype __darwin_mach_port_name_t <__darwin_natural_t>)
(define-ctype __darwin_mach_port_t <__darwin_mach_port_name_t>)
(define-ctype __darwin_mcontext_t (ptr (c-struct 'mcontext)))
(define-ctype __darwin_mcontext64_t (ptr (c-struct 'mcontext64)))
(define-ctype __darwin_mode_t <__uint16_t>)
(define-ctype __darwin_off_t <__int64_t>)
(define-ctype __darwin_pid_t <__int32_t>)
(define-ctype __darwin_pthread_attr_t (c-struct '_opaque_pthread_attr_t))
(define-ctype __darwin_pthread_cond_t (c-struct '_opaque_pthread_cond_t))
(define-ctype __darwin_pthread_condattr_t (c-struct '_opaque_pthread_condattr_t))
(define-ctype __darwin_pthread_key_t <c-ulong>)
(define-ctype __darwin_pthread_mutex_t (c-struct '_opaque_pthread_mutex_t))
(define-ctype __darwin_pthread_mutexattr_t (c-struct '_opaque_pthread_mutexattr_t))
(define-ctype __darwin_pthread_once_t (c-struct '_opaque_pthread_once_t))
(define-ctype __darwin_pthread_rwlock_t (c-struct '_opaque_pthread_rwlock_t))
(define-ctype __darwin_pthread_rwlockattr_t (c-struct '_opaque_pthread_rwlockattr_t))
(define-ctype __darwin_pthread_t (ptr (c-struct '_opaque_pthread_t)))
(define-ctype __darwin_sigset_t <__uint32_t>)
(define-ctype __darwin_suseconds_t <__int32_t>)
(define-ctype __darwin_uid_t <__uint32_t>)
(define-ctype __darwin_useconds_t <__uint32_t>)
(define-ctype __darwin_uuid_t (make-c-array <c-uchar> 16))
(define-c-struct sigaltstack)
(init-c-struct! (c-struct 'sigaltstack) (list (cons 'ss_sp (ptr <c-void>)) (cons 'ss_size <__darwin_size_t>) (cons 'ss_flags <c-int>)))
(define-ctype __darwin_stack_t (c-struct 'sigaltstack))
(define-c-struct ucontext)
(init-c-struct! (c-struct 'ucontext) (list (cons 'uc_onstack <c-int>) (cons 'uc_sigmask <__darwin_sigset_t>) (cons 'uc_stack <__darwin_stack_t>) (cons 'uc_link (ptr (c-struct 'ucontext))) (cons 'uc_mcsize <__darwin_size_t>) (cons 'uc_mcontext <__darwin_mcontext_t>)))
(define-ctype __darwin_ucontext_t (c-struct 'ucontext))
(define-c-struct ucontext64)
(init-c-struct! (c-struct 'ucontext64) (list (cons 'uc_onstack <c-int>) (cons 'uc_sigmask <__darwin_sigset_t>) (cons 'uc_stack <__darwin_stack_t>) (cons 'uc_link (ptr (c-struct 'ucontext64))) (cons 'uc_mcsize <__darwin_size_t>) (cons 'uc_mcontext64 <__darwin_mcontext64_t>)))
(define-ctype __darwin_ucontext64_t (c-struct 'ucontext64))
(define-ctype uint8_t <c-uchar>)
(define-ctype uint16_t <c-ushort>)
(define-ctype uint32_t <c-uint>)
(define-ctype uint64_t <c-ulonglong>)
(define-ctype int_least8_t <int8_t>)
(define-ctype int_least16_t <int16_t>)
(define-ctype int_least32_t <int32_t>)
(define-ctype int_least64_t <int64_t>)
(define-ctype uint_least8_t <uint8_t>)
(define-ctype uint_least16_t <uint16_t>)
(define-ctype uint_least32_t <uint32_t>)
(define-ctype uint_least64_t <uint64_t>)
(define-ctype int_fast8_t <int8_t>)
(define-ctype int_fast16_t <int16_t>)
(define-ctype int_fast32_t <int32_t>)
(define-ctype int_fast64_t <int64_t>)
(define-ctype uint_fast8_t <uint8_t>)
(define-ctype uint_fast16_t <uint16_t>)
(define-ctype uint_fast32_t <uint32_t>)
(define-ctype uint_fast64_t <uint64_t>)
(define-ctype intmax_t <c-longlong>)
(define-ctype uintmax_t <c-ulonglong>)
(define-inline-cfunc _OSSwapInt16 <uint16_t> (data) (<uint16_t>) (call/cc (lambda (%return) (begin (%return (logior (cast <integer> (ash (cast <integer> data) 8)) (cast <integer> (ash (cast <integer> data) (- 8)))))))))
(define-inline-cfunc OSReadSwapInt16 <uint16_t> (base byteOffset) ((ptr <c-void>) <uintptr_t>) (call/cc (lambda (%return) (let* ((result (make <uint16_t>))) (let ((%v (deref (cast (ptr <uint16_t>) (if (is-a? (cast <uintptr_t> base) <c-ptr>) (c-ptr+ (cast <uintptr_t> base) (cast <real> byteOffset)) (+ (cast <real> (cast <uintptr_t> base)) (cast <real> byteOffset))))))) (set! (ref result) %v) %v) (%return (_OSSwapInt16 result))))))
(define-inline-cfunc OSWriteSwapInt16 <c-void> (base byteOffset data) ((ptr <c-void>) <uintptr_t> <uint16_t>) (call/cc (lambda (%return) (begin (let ((%v (_OSSwapInt16 data))) (set! (deref (cast (ptr <uint16_t>) (if (is-a? (cast <uintptr_t> base) <c-ptr>) (c-ptr+ (cast <uintptr_t> base) (cast <real> byteOffset)) (+ (cast <real> (cast <uintptr_t> base)) (cast <real> byteOffset))))) %v) %v)))))
(define-enum OSUnknownByteOrder 0)
(define-enum OSLittleEndian 1)
(define-enum OSBigEndian 2)
(define-inline-cfunc OSHostByteOrder <int32_t> (#f) (<c-void>) (call/cc (lambda (%return) (begin (%return OSLittleEndian)))))
(define-inline-cfunc _OSReadInt16 <uint16_t> (base byteOffset) ((ptr <c-void>) <uintptr_t>) (call/cc (lambda (%return) (begin (%return (deref (cast (ptr <uint16_t>) (if (is-a? (cast <uintptr_t> base) <c-ptr>) (c-ptr+ (cast <uintptr_t> base) (cast <real> byteOffset)) (+ (cast <real> (cast <uintptr_t> base)) (cast <real> byteOffset))))))))))
(define-inline-cfunc _OSReadInt32 <uint32_t> (base byteOffset) ((ptr <c-void>) <uintptr_t>) (call/cc (lambda (%return) (begin (%return (deref (cast (ptr <uint32_t>) (if (is-a? (cast <uintptr_t> base) <c-ptr>) (c-ptr+ (cast <uintptr_t> base) (cast <real> byteOffset)) (+ (cast <real> (cast <uintptr_t> base)) (cast <real> byteOffset))))))))))
(define-inline-cfunc _OSReadInt64 <uint64_t> (base byteOffset) ((ptr <c-void>) <uintptr_t>) (call/cc (lambda (%return) (begin (%return (deref (cast (ptr <uint64_t>) (if (is-a? (cast <uintptr_t> base) <c-ptr>) (c-ptr+ (cast <uintptr_t> base) (cast <real> byteOffset)) (+ (cast <real> (cast <uintptr_t> base)) (cast <real> byteOffset))))))))))
(define-inline-cfunc _OSWriteInt16 <c-void> (base byteOffset data) ((ptr <c-void>) <uintptr_t> <uint16_t>) (call/cc (lambda (%return) (begin (let ((%v data)) (set! (deref (cast (ptr <uint16_t>) (if (is-a? (cast <uintptr_t> base) <c-ptr>) (c-ptr+ (cast <uintptr_t> base) (cast <real> byteOffset)) (+ (cast <real> (cast <uintptr_t> base)) (cast <real> byteOffset))))) %v) %v)))))
(define-inline-cfunc _OSWriteInt32 <c-void> (base byteOffset data) ((ptr <c-void>) <uintptr_t> <uint32_t>) (call/cc (lambda (%return) (begin (let ((%v data)) (set! (deref (cast (ptr <uint32_t>) (if (is-a? (cast <uintptr_t> base) <c-ptr>) (c-ptr+ (cast <uintptr_t> base) (cast <real> byteOffset)) (+ (cast <real> (cast <uintptr_t> base)) (cast <real> byteOffset))))) %v) %v)))))
(define-inline-cfunc _OSWriteInt64 <c-void> (base byteOffset data) ((ptr <c-void>) <uintptr_t> <uint64_t>) (call/cc (lambda (%return) (begin (let ((%v data)) (set! (deref (cast (ptr <uint64_t>) (if (is-a? (cast <uintptr_t> base) <c-ptr>) (c-ptr+ (cast <uintptr_t> base) (cast <real> byteOffset)) (+ (cast <real> (cast <uintptr_t> base)) (cast <real> byteOffset))))) %v) %v)))))
(define-extern ntohs (make-c-func 'ntohs <uint16_t> (list <uint16_t>)))
(define-extern htons (make-c-func 'htons <uint16_t> (list <uint16_t>)))
(define-extern ntohl (make-c-func 'ntohl <uint32_t> (list <uint32_t>)))
(define-extern htonl (make-c-func 'htonl <uint32_t> (list <uint32_t>)))
(define-ctype u_char <c-uchar>)
(define-ctype u_short <c-ushort>)
(define-ctype u_int <c-uint>)
(define-ctype u_long <c-ulong>)
(define-ctype ushort <c-ushort>)
(define-ctype uint <c-uint>)
(define-ctype u_quad_t <u_int64_t>)
(define-ctype quad_t <int64_t>)
(define-ctype qaddr_t (ptr <quad_t>))
(define-ctype caddr_t (ptr <c-char>))
(define-ctype daddr_t <int32_t>)
(define-ctype dev_t <__darwin_dev_t>)
(define-ctype fixpt_t <u_int32_t>)
(define-ctype blkcnt_t <__darwin_blkcnt_t>)
(define-ctype blksize_t <__darwin_blksize_t>)
(define-ctype gid_t <__darwin_gid_t>)
(define-ctype in_addr_t <__uint32_t>)
(define-ctype in_port_t <__uint16_t>)
(define-ctype ino_t <__darwin_ino_t>)
(define-ctype key_t <__int32_t>)
(define-ctype mode_t <__darwin_mode_t>)
(define-ctype nlink_t <__uint16_t>)
(define-ctype id_t <__darwin_id_t>)
(define-ctype pid_t <__darwin_pid_t>)
(define-ctype off_t <__darwin_off_t>)
(define-ctype segsz_t <int32_t>)
(define-ctype swblk_t <int32_t>)
(define-ctype uid_t <__darwin_uid_t>)
(define-ctype clock_t <__darwin_clock_t>)
(define-ctype size_t <__darwin_size_t>)
(define-ctype ssize_t <__darwin_ssize_t>)
(define-ctype time_t <__darwin_time_t>)
(define-ctype useconds_t <__darwin_useconds_t>)
(define-ctype suseconds_t <__darwin_suseconds_t>)
(define-ctype fd_mask <__int32_t>)
(define-c-struct fd_set)
(init-c-struct! (c-struct 'fd_set) (list (cons 'fds_bits (make-c-array <__int32_t> (cast <integer> (/ (cast <real> (if (is-a? 1024 <c-ptr>) (c-ptr+ 1024 (cast <real> (if (is-a? (* (cast <real> (c-sizeof <__int32_t>)) 8) <c-ptr>) (c-ptr- (* (cast <real> (c-sizeof <__int32_t>)) 8) 1) (- (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) 8)) 1)))) (+ (cast <real> 1024) (cast <real> (if (is-a? (* (cast <real> (c-sizeof <__int32_t>)) 8) <c-ptr>) (c-ptr- (* (cast <real> (c-sizeof <__int32_t>)) 8) 1) (- (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) 8)) 1)))))) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) 8))))))))
(define-ctype fd_set (c-struct 'fd_set))
(define-ctype pthread_attr_t <__darwin_pthread_attr_t>)
(define-ctype pthread_cond_t <__darwin_pthread_cond_t>)
(define-ctype pthread_condattr_t <__darwin_pthread_condattr_t>)
(define-ctype pthread_mutex_t <__darwin_pthread_mutex_t>)
(define-ctype pthread_mutexattr_t <__darwin_pthread_mutexattr_t>)
(define-ctype pthread_once_t <__darwin_pthread_once_t>)
(define-ctype pthread_rwlock_t <__darwin_pthread_rwlock_t>)
(define-ctype pthread_rwlockattr_t <__darwin_pthread_rwlockattr_t>)
(define-ctype pthread_t <__darwin_pthread_t>)
(define-ctype pthread_key_t <__darwin_pthread_key_t>)
(define-ctype fsblkcnt_t <__darwin_fsblkcnt_t>)
(define-ctype fsfilcnt_t <__darwin_fsfilcnt_t>)
(define-ctype __gnuc_va_list (ptr <c-void>))
(define-ctype va_list <__gnuc_va_list>)
(define-ctype __darwin_nl_item <c-int>)
(define-ctype __darwin_wctrans_t <c-int>)
(define-ctype __darwin_wctype_t <c-ulong>)
(define-ctype ct_rune_t <__darwin_ct_rune_t>)
(define-ctype rune_t <__darwin_rune_t>)
(define-ctype wchar_t <__darwin_wchar_t>)
(define-ctype wint_t <__darwin_wint_t>)
(define-c-struct G393)
(init-c-struct! (c-struct 'G393) (list (cons '__min <__darwin_rune_t>) (cons '__max <__darwin_rune_t>) (cons '__map <__darwin_rune_t>) (cons '__types (ptr <__uint32_t>))))
(define-ctype _RuneEntry (c-struct 'G393))
(define-c-struct G394)
(init-c-struct! (c-struct 'G394) (list (cons '__nranges <c-int>) (cons '__ranges (ptr <_RuneEntry>))))
(define-ctype _RuneRange (c-struct 'G394))
(define-c-struct G395)
(init-c-struct! (c-struct 'G395) (list (cons '__magic (make-c-array <c-char> 8)) (cons '__encoding (make-c-array <c-char> 32)) (cons '__sgetrune (make-c-func-ptr <__darwin_rune_t> (list (list '#f (ptr <c-char>)) (list '#f <__darwin_size_t>) (list '#f (ptr (ptr <c-char>)))))) (cons '__sputrune (make-c-func-ptr <c-int> (list (list '#f <__darwin_rune_t>) (list '#f (ptr <c-char>)) (list '#f <__darwin_size_t>) (list '#f (ptr (ptr <c-char>)))))) (cons '__invalid_rune <__darwin_rune_t>) (cons '__runetype (make-c-array <__uint32_t> 256)) (cons '__maplower (make-c-array <__darwin_rune_t> 256)) (cons '__mapupper (make-c-array <__darwin_rune_t> 256)) (cons '__runetype_ext <_RuneRange>) (cons '__maplower_ext <_RuneRange>) (cons '__mapupper_ext <_RuneRange>) (cons '__variable (ptr <c-void>)) (cons '__variable_len <c-int>)))
(define-ctype _RuneLocale (c-struct 'G395))
(define-extern _DefaultRuneLocale (deref (cast (ptr <_RuneLocale>) (c-lookup-symbol '_DefaultRuneLocale))))
(define-extern _CurrentRuneLocale (deref (cast (ptr (ptr <_RuneLocale>)) (c-lookup-symbol '_CurrentRuneLocale))))
(define-extern isalnum (make-c-func 'isalnum <c-int> (list <c-int>)))
(define-extern isalpha (make-c-func 'isalpha <c-int> (list <c-int>)))
(define-extern isblank (make-c-func 'isblank <c-int> (list <c-int>)))
(define-extern iscntrl (make-c-func 'iscntrl <c-int> (list <c-int>)))
(define-extern isdigit (make-c-func 'isdigit <c-int> (list <c-int>)))
(define-extern isgraph (make-c-func 'isgraph <c-int> (list <c-int>)))
(define-extern islower (make-c-func 'islower <c-int> (list <c-int>)))
(define-extern isprint (make-c-func 'isprint <c-int> (list <c-int>)))
(define-extern ispunct (make-c-func 'ispunct <c-int> (list <c-int>)))
(define-extern isspace (make-c-func 'isspace <c-int> (list <c-int>)))
(define-extern isupper (make-c-func 'isupper <c-int> (list <c-int>)))
(define-extern isxdigit (make-c-func 'isxdigit <c-int> (list <c-int>)))
(define-extern tolower (make-c-func 'tolower <c-int> (list <c-int>)))
(define-extern toupper (make-c-func 'toupper <c-int> (list <c-int>)))
(define-extern isascii (make-c-func 'isascii <c-int> (list <c-int>)))
(define-extern toascii (make-c-func 'toascii <c-int> (list <c-int>)))
(define-extern digittoint (make-c-func 'digittoint <c-int> (list <c-int>)))
(define-extern ishexnumber (make-c-func 'ishexnumber <c-int> (list <c-int>)))
(define-extern isideogram (make-c-func 'isideogram <c-int> (list <c-int>)))
(define-extern isnumber (make-c-func 'isnumber <c-int> (list <c-int>)))
(define-extern isphonogram (make-c-func 'isphonogram <c-int> (list <c-int>)))
(define-extern isrune (make-c-func 'isrune <c-int> (list <c-int>)))
(define-extern isspecial (make-c-func 'isspecial <c-int> (list <c-int>)))
(define-extern ___runetype (make-c-func '___runetype <c-ulong> (list <__darwin_ct_rune_t>)))
(define-extern ___tolower (make-c-func '___tolower <__darwin_ct_rune_t> (list <__darwin_ct_rune_t>)))
(define-extern ___toupper (make-c-func '___toupper <__darwin_ct_rune_t> (list <__darwin_ct_rune_t>)))
(define-extern __maskrune (make-c-func '__maskrune <c-int> (list <__darwin_ct_rune_t> <c-ulong>)))
(define-inline-cfunc __istype <c-int> (_c _f) (<__darwin_ct_rune_t> <c-ulong>) (call/cc (lambda (%return) (begin (%return (if (eq? (cast <real> (if (eq? (cast <real> (if (eq? (cast <real> (if (equal? (cast <real> (logand (cast <integer> (identity _c)) -128)) 0) 1 0)) 0) (__maskrune _c _f) (logand (cast <integer> (ref (raw-ref _DefaultRuneLocale '__runetype) (cast <integer> _c))) (cast <integer> _f)))) 0) 1 0)) 0) 1 0))))))
(define-inline-cfunc __isctype <__darwin_ct_rune_t> (_c _f) (<__darwin_ct_rune_t> <c-ulong>) (call/cc (lambda (%return) (begin (%return (if (eq? (cast <real> (let ((G396 (cast <real> (if (< (cast <real> _c) 0) 1 0)))) (if (eq? G396 0) (if (>= (cast <real> _c) 256) 1 0) G396))) 0) (if (eq? (cast <real> (if (eq? (cast <real> (logand (cast <integer> (ref (raw-ref _DefaultRuneLocale '__runetype) (cast <integer> _c))) (cast <integer> _f))) 0) 1 0)) 0) 1 0) 0))))))
(define-extern __toupper (make-c-func '__toupper <__darwin_ct_rune_t> (list <__darwin_ct_rune_t>)))
(define-extern __tolower (make-c-func '__tolower <__darwin_ct_rune_t> (list <__darwin_ct_rune_t>)))
(define-inline-cfunc __wcwidth <c-int> (_c) (<__darwin_ct_rune_t>) (call/cc (lambda (%return) (let* ((_x (make <c-uint>))) (if (eq? (cast <real> (if (equal? (cast <real> _c) 0) 1 0)) 0) 0 (%return 0)) (let ((%v (cast <c-uint> (__maskrune _c 3758358528)))) (set! (ref _x) %v) %v) (if (eq? (cast <real> (if (equal? (cast <real> (logand (cast <integer> _x) 3758096384)) 0) 0 1)) 0) 0 (%return (ash (cast <integer> (logand (cast <integer> _x) 3758096384)) (- 30)))) (%return (if (eq? (cast <real> (if (equal? (cast <real> (logand (cast <integer> _x) 262144)) 0) 0 1)) 0) -1 1))))))
(define-c-struct lconv)
(init-c-struct! (c-struct 'lconv) (list (cons 'decimal_point (ptr <c-char>)) (cons 'thousands_sep (ptr <c-char>)) (cons 'grouping (ptr <c-char>)) (cons 'int_curr_symbol (ptr <c-char>)) (cons 'currency_symbol (ptr <c-char>)) (cons 'mon_decimal_point (ptr <c-char>)) (cons 'mon_thousands_sep (ptr <c-char>)) (cons 'mon_grouping (ptr <c-char>)) (cons 'positive_sign (ptr <c-char>)) (cons 'negative_sign (ptr <c-char>)) (cons 'int_frac_digits <c-char>) (cons 'frac_digits <c-char>) (cons 'p_cs_precedes <c-char>) (cons 'p_sep_by_space <c-char>) (cons 'n_cs_precedes <c-char>) (cons 'n_sep_by_space <c-char>) (cons 'p_sign_posn <c-char>) (cons 'n_sign_posn <c-char>) (cons 'int_p_cs_precedes <c-char>) (cons 'int_n_cs_precedes <c-char>) (cons 'int_p_sep_by_space <c-char>) (cons 'int_n_sep_by_space <c-char>) (cons 'int_p_sign_posn <c-char>) (cons 'int_n_sign_posn <c-char>)))
(define-extern localeconv (make-c-func 'localeconv (ptr (c-struct 'lconv)) (list <c-void>)))
(define-extern setlocale (make-c-func 'setlocale (ptr <c-char>) (list <c-int> (ptr <c-char>))))
(define-ctype sig_atomic_t <c-int>)
(define-c-struct sigcontext)
(init-c-struct! (c-struct 'sigcontext) (list (cons 'sc_onstack <c-int>) (cons 'sc_mask <c-int>) (cons 'sc_eax <c-uint>) (cons 'sc_ebx <c-uint>) (cons 'sc_ecx <c-uint>) (cons 'sc_edx <c-uint>) (cons 'sc_edi <c-uint>) (cons 'sc_esi <c-uint>) (cons 'sc_ebp <c-uint>) (cons 'sc_esp <c-uint>) (cons 'sc_ss <c-uint>) (cons 'sc_eflags <c-uint>) (cons 'sc_eip <c-uint>) (cons 'sc_cs <c-uint>) (cons 'sc_ds <c-uint>) (cons 'sc_es <c-uint>) (cons 'sc_fs <c-uint>) (cons 'sc_gs <c-uint>)))
(define-ctype jmp_buf (make-c-array <c-int> 18))
(define-ctype sigjmp_buf (make-c-array <c-int> 19))
(define-extern setjmp (make-c-func 'setjmp <c-int> (list <jmp_buf>)))
(define-extern longjmp (make-c-func 'longjmp <c-void> (list <jmp_buf> <c-int>)))
(define-extern _setjmp (make-c-func '_setjmp <c-int> (list <jmp_buf>)))
(define-extern _longjmp (make-c-func '_longjmp <c-void> (list <jmp_buf> <c-int>)))
(define-extern sigsetjmp (make-c-func 'sigsetjmp <c-int> (list <sigjmp_buf> <c-int>)))
(define-extern siglongjmp (make-c-func 'siglongjmp <c-void> (list <sigjmp_buf> <c-int>)))
(define-extern longjmperror (make-c-func 'longjmperror <c-void> (list <c-void>)))
(define-ctype mcontext_t <__darwin_mcontext_t>)
(define-ctype mcontext64_t <__darwin_mcontext64_t>)
(define-ctype sigset_t <__darwin_sigset_t>)
(define-ctype ucontext_t <__darwin_ucontext_t>)
(define-ctype ucontext64_t <__darwin_ucontext64_t>)
(define-c-union sigval)
(init-c-union! (c-union 'sigval) (list (cons 'sival_int <c-int>) (cons 'sival_ptr (ptr <c-void>))))
(define-c-struct sigevent)
(init-c-struct! (c-struct 'sigevent) (list (cons 'sigev_notify <c-int>) (cons 'sigev_signo <c-int>) (cons 'sigev_value (c-union 'sigval)) (cons 'sigev_notify_function (make-c-func-ptr <c-void> (list (list '#f (c-union 'sigval))))) (cons 'sigev_notify_attributes (ptr <pthread_attr_t>))))
(define-c-struct __siginfo)
(init-c-struct! (c-struct '__siginfo) (list (cons 'si_signo <c-int>) (cons 'si_errno <c-int>) (cons 'si_code <c-int>) (cons 'si_pid <pid_t>) (cons 'si_uid <uid_t>) (cons 'si_status <c-int>) (cons 'si_addr (ptr <c-void>)) (cons 'si_value (c-union 'sigval)) (cons 'si_band <c-long>) (cons 'pad (make-c-array <c-ulong> 7))))
(define-ctype siginfo_t (c-struct '__siginfo))
(define-c-union __sigaction_u)
(init-c-union! (c-union '__sigaction_u) (list (cons '__sa_handler (make-c-func-ptr <c-void> (list (list '#f <c-int>)))) (cons '__sa_sigaction (make-c-func-ptr <c-void> (list (list '#f <c-int>) (list '#f (ptr (c-struct '__siginfo))) (list '#f (ptr <c-void>)))))))
(define-c-struct __sigaction)
(init-c-struct! (c-struct '__sigaction) (list (cons '__sigaction_u (c-union '__sigaction_u)) (cons 'sa_tramp (make-c-func-ptr <c-void> (list (list '#f (ptr <c-void>)) (list '#f <c-int>) (list '#f <c-int>) (list '#f (ptr <siginfo_t>)) (list '#f (ptr <c-void>))))) (cons 'sa_mask <sigset_t>) (cons 'sa_flags <c-int>)))
(define-c-struct sigaction)
(init-c-struct! (c-struct 'sigaction) (list (cons '__sigaction_u (c-union '__sigaction_u)) (cons 'sa_mask <sigset_t>) (cons 'sa_flags <c-int>)))
(define-ctype sig_t (make-c-func-ptr <c-void> (list <c-int>)))
(define-ctype stack_t <__darwin_stack_t>)
(define-c-struct sigvec)
(init-c-struct! (c-struct 'sigvec) (list (cons 'sv_handler (make-c-func-ptr <c-void> (list (list '#f <c-int>)))) (cons 'sv_mask <c-int>) (cons 'sv_flags <c-int>)))
(define-c-struct sigstack)
(init-c-struct! (c-struct 'sigstack) (list (cons 'ss_sp (ptr <c-char>)) (cons 'ss_onstack <c-int>)))
(define-extern signal (make-c-func 'signal (make-c-func-ptr <c-void> (list (list '#f <c-int>))) (list <c-int> (make-c-func-ptr <c-void> (list (list '#f <c-int>))))))
(define-enum P_ALL 0)
(define-enum P_PID 1)
(define-enum P_PGID 2)
(define-ctype idtype_t <c-int>)
(define-c-struct timeval)
(init-c-struct! (c-struct 'timeval) (list (cons 'tv_sec <__darwin_time_t>) (cons 'tv_usec <__darwin_suseconds_t>)))
(define-ctype rlim_t <__int64_t>)
(define-c-struct rusage)
(init-c-struct! (c-struct 'rusage) (list (cons 'ru_utime (c-struct 'timeval)) (cons 'ru_stime (c-struct 'timeval)) (cons 'ru_maxrss <c-long>) (cons 'ru_ixrss <c-long>) (cons 'ru_idrss <c-long>) (cons 'ru_isrss <c-long>) (cons 'ru_minflt <c-long>) (cons 'ru_majflt <c-long>) (cons 'ru_nswap <c-long>) (cons 'ru_inblock <c-long>) (cons 'ru_oublock <c-long>) (cons 'ru_msgsnd <c-long>) (cons 'ru_msgrcv <c-long>) (cons 'ru_nsignals <c-long>) (cons 'ru_nvcsw <c-long>) (cons 'ru_nivcsw <c-long>)))
(define-c-struct rlimit)
(init-c-struct! (c-struct 'rlimit) (list (cons 'rlim_cur <rlim_t>) (cons 'rlim_max <rlim_t>)))
(define-extern getpriority (make-c-func 'getpriority <c-int> (list <c-int> <id_t>)))
(define-extern getrlimit (make-c-func 'getrlimit <c-int> (list <c-int> (ptr (c-struct 'rlimit)))))
(define-extern getrusage (make-c-func 'getrusage <c-int> (list <c-int> (ptr (c-struct 'rusage)))))
(define-extern setpriority (make-c-func 'setpriority <c-int> (list <c-int> <id_t> <c-int>)))
(define-extern setrlimit (make-c-func 'setrlimit <c-int> (list <c-int> (ptr (c-struct 'rlimit)))))
(define-c-struct G397)
(init-c-struct! (c-struct 'G397) (list (cons 'w_Termsig (make-bit-field <c-uint> 7)) (cons 'w_Coredump (make-bit-field <c-uint> 1)) (cons 'w_Retcode (make-bit-field <c-uint> 8)) (cons 'w_Filler (make-bit-field <c-uint> 16))))
(define-c-struct G398)
(init-c-struct! (c-struct 'G398) (list (cons 'w_Stopval (make-bit-field <c-uint> 8)) (cons 'w_Stopsig (make-bit-field <c-uint> 8)) (cons 'w_Filler (make-bit-field <c-uint> 16))))
(define-c-union wait)
(init-c-union! (c-union 'wait) (list (cons 'w_status <c-int>) (cons 'w_T (c-struct 'G397)) (cons 'w_S (c-struct 'G398))))
(define-extern wait (make-c-func 'wait <pid_t> (list (ptr <c-int>))))
(define-extern waitpid (make-c-func 'waitpid <pid_t> (list <pid_t> (ptr <c-int>) <c-int>)))
(define-extern wait3 (make-c-func 'wait3 <pid_t> (list (ptr <c-int>) <c-int> (ptr (c-struct 'rusage)))))
(define-extern wait4 (make-c-func 'wait4 <pid_t> (list <pid_t> (ptr <c-int>) <c-int> (ptr (c-struct 'rusage)))))
(define-c-struct G399)
(init-c-struct! (c-struct 'G399) (list (cons 'quot <c-int>) (cons 'rem <c-int>)))
(define-ctype div_t (c-struct 'G399))
(define-c-struct G400)
(init-c-struct! (c-struct 'G400) (list (cons 'quot <c-long>) (cons 'rem <c-long>)))
(define-ctype ldiv_t (c-struct 'G400))
(define-c-struct G401)
(init-c-struct! (c-struct 'G401) (list (cons 'quot <c-longlong>) (cons 'rem <c-longlong>)))
(define-ctype lldiv_t (c-struct 'G401))
(define-extern __mb_cur_max (deref (cast (ptr <c-int>) (c-lookup-symbol '__mb_cur_max))))
(define-extern abort (make-c-func 'abort <c-void> (list <c-void>)))
(define-extern abs (make-c-func 'abs <c-int> (list <c-int>)))
(define-extern atexit (make-c-func 'atexit <c-int> (list (make-c-func-ptr <c-void> (list (list '#f <c-void>))))))
(define-extern atof (make-c-func 'atof <c-double> (list (ptr <c-char>))))
(define-extern atoi (make-c-func 'atoi <c-int> (list (ptr <c-char>))))
(define-extern atol (make-c-func 'atol <c-long> (list (ptr <c-char>))))
(define-extern atoll (make-c-func 'atoll <c-longlong> (list (ptr <c-char>))))
(define-extern bsearch (make-c-func 'bsearch (ptr <c-void>) (list (ptr <c-void>) (ptr <c-void>) <size_t> <size_t> (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>)) (list '#f (ptr <c-void>)))))))
(define-extern calloc (make-c-func 'calloc (ptr <c-void>) (list <size_t> <size_t>)))
(define-extern div (make-c-func 'div <div_t> (list <c-int> <c-int>)))
(define-extern exit (make-c-func 'exit <c-void> (list <c-int>)))
(define-extern free (make-c-func 'free <c-void> (list (ptr <c-void>))))
(define-extern getenv (make-c-func 'getenv (ptr <c-char>) (list (ptr <c-char>))))
(define-extern labs (make-c-func 'labs <c-long> (list <c-long>)))
(define-extern ldiv (make-c-func 'ldiv <ldiv_t> (list <c-long> <c-long>)))
(define-extern llabs (make-c-func 'llabs <c-longlong> (list <c-longlong>)))
(define-extern lldiv (make-c-func 'lldiv <lldiv_t> (list <c-longlong> <c-longlong>)))
(define-extern malloc (make-c-func 'malloc (ptr <c-void>) (list <size_t>)))
(define-extern mblen (make-c-func 'mblen <c-int> (list (ptr <c-char>) <size_t>)))
(define-extern mbstowcs (make-c-func 'mbstowcs <size_t> (list (ptr <wchar_t>) (ptr <c-char>) <size_t>)))
(define-extern mbtowc (make-c-func 'mbtowc <c-int> (list (ptr <wchar_t>) (ptr <c-char>) <size_t>)))
(define-extern qsort (make-c-func 'qsort <c-void> (list (ptr <c-void>) <size_t> <size_t> (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>)) (list '#f (ptr <c-void>)))))))
(define-extern rand (make-c-func 'rand <c-int> (list <c-void>)))
(define-extern realloc (make-c-func 'realloc (ptr <c-void>) (list (ptr <c-void>) <size_t>)))
(define-extern srand (make-c-func 'srand <c-void> (list <c-uint>)))
(define-extern strtod (make-c-func 'strtod <c-double> (list (ptr <c-char>) (ptr (ptr <c-char>)))))
(define-extern strtof (make-c-func 'strtof <c-float> (list (ptr <c-char>) (ptr (ptr <c-char>)))))
(define-extern strtol (make-c-func 'strtol <c-long> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define-extern strtold (make-c-func 'strtold <c-longdouble> (list (ptr <c-char>) (ptr (ptr <c-char>)))))
(define-extern strtoll (make-c-func 'strtoll <c-longlong> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define-extern strtoul (make-c-func 'strtoul <c-ulong> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define-extern strtoull (make-c-func 'strtoull <c-ulonglong> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define-extern system (make-c-func 'system <c-int> (list (ptr <c-char>))))
(define-extern wcstombs (make-c-func 'wcstombs <size_t> (list (ptr <c-char>) (ptr <wchar_t>) <size_t>)))
(define-extern wctomb (make-c-func 'wctomb <c-int> (list (ptr <c-char>) <wchar_t>)))
(define-extern _Exit (make-c-func '_Exit <c-void> (list <c-int>)))
(define-extern a64l (make-c-func 'a64l <c-long> (list (ptr <c-char>))))
(define-extern drand48 (make-c-func 'drand48 <c-double> (list <c-void>)))
(define-extern ecvt (make-c-func 'ecvt (ptr <c-char>) (list <c-double> <c-int> (ptr <c-int>) (ptr <c-int>))))
(define-extern erand48 (make-c-func 'erand48 <c-double> (list (make-c-array <c-ushort> 3))))
(define-extern fcvt (make-c-func 'fcvt (ptr <c-char>) (list <c-double> <c-int> (ptr <c-int>) (ptr <c-int>))))
(define-extern gcvt (make-c-func 'gcvt (ptr <c-char>) (list <c-double> <c-int> (ptr <c-char>))))
(define-extern getsubopt (make-c-func 'getsubopt <c-int> (list (ptr (ptr <c-char>)) (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define-extern grantpt (make-c-func 'grantpt <c-int> (list <c-int>)))
(define-extern initstate (make-c-func 'initstate (ptr <c-char>) (list <c-ulong> (ptr <c-char>) <c-long>)))
(define-extern jrand48 (make-c-func 'jrand48 <c-long> (list (make-c-array <c-ushort> 3))))
(define-extern l64a (make-c-func 'l64a (ptr <c-char>) (list <c-long>)))
(define-extern lcong48 (make-c-func 'lcong48 <c-void> (list (make-c-array <c-ushort> 7))))
(define-extern lrand48 (make-c-func 'lrand48 <c-long> (list <c-void>)))
(define-extern mktemp (make-c-func 'mktemp (ptr <c-char>) (list (ptr <c-char>))))
(define-extern mkstemp (make-c-func 'mkstemp <c-int> (list (ptr <c-char>))))
(define-extern mrand48 (make-c-func 'mrand48 <c-long> (list <c-void>)))
(define-extern nrand48 (make-c-func 'nrand48 <c-long> (list (make-c-array <c-ushort> 3))))
(define-extern posix_openpt (make-c-func 'posix_openpt <c-int> (list <c-int>)))
(define-extern ptsname (make-c-func 'ptsname (ptr <c-char>) (list <c-int>)))
(define-extern putenv (make-c-func 'putenv <c-int> (list (ptr <c-char>))))
(define-extern random (make-c-func 'random <c-long> (list <c-void>)))
(define-extern realpath (make-c-func 'realpath (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern seed48 (make-c-func 'seed48 (ptr <c-ushort>) (list (make-c-array <c-ushort> 3))))
(define-extern setenv (make-c-func 'setenv <c-int> (list (ptr <c-char>) (ptr <c-char>) <c-int>)))
(define-extern setkey (make-c-func 'setkey <c-int> (list (ptr <c-char>))))
(define-extern setstate (make-c-func 'setstate (ptr <c-char>) (list (ptr <c-char>))))
(define-extern srand48 (make-c-func 'srand48 <c-void> (list <c-long>)))
(define-extern srandom (make-c-func 'srandom <c-void> (list <c-ulong>)))
(define-extern unlockpt (make-c-func 'unlockpt <c-int> (list <c-int>)))
(define-extern unsetenv (make-c-func 'unsetenv <c-void> (list (ptr <c-char>))))
(define-extern arc4random (make-c-func 'arc4random <u_int32_t> (list <c-void>)))
(define-extern arc4random_addrandom (make-c-func 'arc4random_addrandom <c-void> (list (ptr <c-uchar>) <c-int>)))
(define-extern arc4random_stir (make-c-func 'arc4random_stir <c-void> (list <c-void>)))
(define-extern cgetcap (make-c-func 'cgetcap (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) <c-int>)))
(define-extern cgetclose (make-c-func 'cgetclose <c-int> (list <c-void>)))
(define-extern cgetent (make-c-func 'cgetent <c-int> (list (ptr (ptr <c-char>)) (ptr (ptr <c-char>)) (ptr <c-char>))))
(define-extern cgetfirst (make-c-func 'cgetfirst <c-int> (list (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define-extern cgetmatch (make-c-func 'cgetmatch <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern cgetnext (make-c-func 'cgetnext <c-int> (list (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define-extern cgetnum (make-c-func 'cgetnum <c-int> (list (ptr <c-char>) (ptr <c-char>) (ptr <c-long>))))
(define-extern cgetset (make-c-func 'cgetset <c-int> (list (ptr <c-char>))))
(define-extern cgetstr (make-c-func 'cgetstr <c-int> (list (ptr <c-char>) (ptr <c-char>) (ptr (ptr <c-char>)))))
(define-extern cgetustr (make-c-func 'cgetustr <c-int> (list (ptr <c-char>) (ptr <c-char>) (ptr (ptr <c-char>)))))
(define-extern daemon (make-c-func 'daemon <c-int> (list <c-int> <c-int>)))
(define-extern devname (make-c-func 'devname (ptr <c-char>) (list <dev_t> <mode_t>)))
(define-extern devname_r (make-c-func 'devname_r (ptr <c-char>) (list <dev_t> <mode_t> (ptr <c-char>) <c-int>)))
(define-extern getbsize (make-c-func 'getbsize (ptr <c-char>) (list (ptr <c-int>) (ptr <c-long>))))
(define-extern getloadavg (make-c-func 'getloadavg <c-int> (list (ptr <c-double>) <c-int>)))
(define-extern getprogname (make-c-func 'getprogname (ptr <c-char>) (list <c-void>)))
(define-extern heapsort (make-c-func 'heapsort <c-int> (list (ptr <c-void>) <size_t> <size_t> (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>)) (list '#f (ptr <c-void>)))))))
(define-extern mergesort (make-c-func 'mergesort <c-int> (list (ptr <c-void>) <size_t> <size_t> (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>)) (list '#f (ptr <c-void>)))))))
(define-extern qsort_r (make-c-func 'qsort_r <c-void> (list (ptr <c-void>) <size_t> <size_t> (ptr <c-void>) (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>)) (list '#f (ptr <c-void>)) (list '#f (ptr <c-void>)))))))
(define-extern radixsort (make-c-func 'radixsort <c-int> (list (ptr (ptr <c-uchar>)) <c-int> (ptr <c-uchar>) <c-uint>)))
(define-extern setprogname (make-c-func 'setprogname <c-void> (list (ptr <c-char>))))
(define-extern sradixsort (make-c-func 'sradixsort <c-int> (list (ptr (ptr <c-uchar>)) <c-int> (ptr <c-uchar>) <c-uint>)))
(define-extern sranddev (make-c-func 'sranddev <c-void> (list <c-void>)))
(define-extern srandomdev (make-c-func 'srandomdev <c-void> (list <c-void>)))
(define-extern rand_r (make-c-func 'rand_r <c-int> (list (ptr <c-uint>))))
(define-extern reallocf (make-c-func 'reallocf (ptr <c-void>) (list (ptr <c-void>) <size_t>)))
(define-extern strtoq (make-c-func 'strtoq <c-longlong> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define-extern strtouq (make-c-func 'strtouq <c-ulonglong> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define-extern suboptarg (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'suboptarg))))
(define-extern valloc (make-c-func 'valloc (ptr <c-void>) (list <size_t>)))
(define-c-struct accessx_descriptor)
(init-c-struct! (c-struct 'accessx_descriptor) (list (cons 'ad_name_offset <c-uint>) (cons 'ad_flags <c-int>) (cons 'ad_pad (make-c-array <c-int> 2))))
(define-ctype uuid_t <__darwin_uuid_t>)
(define-extern _exit (make-c-func '_exit <c-void> (list <c-int>)))
(define-extern access (make-c-func 'access <c-int> (list (ptr <c-char>) <c-int>)))
(define-extern alarm (make-c-func 'alarm <c-uint> (list <c-uint>)))
(define-extern chdir (make-c-func 'chdir <c-int> (list (ptr <c-char>))))
(define-extern chown (make-c-func 'chown <c-int> (list (ptr <c-char>) <uid_t> <gid_t>)))
(define-extern close (make-c-func 'close <c-int> (list <c-int>)))
(define-extern confstr (make-c-func 'confstr <size_t> (list <c-int> (ptr <c-char>) <size_t>)))
(define-extern crypt (make-c-func 'crypt (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern ctermid (make-c-func 'ctermid (ptr <c-char>) (list (ptr <c-char>))))
(define-extern dup (make-c-func 'dup <c-int> (list <c-int>)))
(define-extern dup2 (make-c-func 'dup2 <c-int> (list <c-int> <c-int>)))
(define-extern execl (make-c-func-vaargs 'execl <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern execle (make-c-func-vaargs 'execle <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern execlp (make-c-func-vaargs 'execlp <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern execv (make-c-func 'execv <c-int> (list (ptr <c-char>) (ptr (ptr <c-char>)))))
(define-extern execve (make-c-func 'execve <c-int> (list (ptr <c-char>) (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define-extern execvp (make-c-func 'execvp <c-int> (list (ptr <c-char>) (ptr (ptr <c-char>)))))
(define-extern fchown (make-c-func 'fchown <c-int> (list <c-int> <uid_t> <gid_t>)))
(define-extern fchdir (make-c-func 'fchdir <c-int> (list <c-int>)))
(define-extern fork (make-c-func 'fork <pid_t> (list <c-void>)))
(define-extern fpathconf (make-c-func 'fpathconf <c-long> (list <c-int> <c-int>)))
(define-extern ftruncate (make-c-func 'ftruncate <c-int> (list <c-int> <off_t>)))
(define-extern getcwd (make-c-func 'getcwd (ptr <c-char>) (list (ptr <c-char>) <size_t>)))
(define-extern getegid (make-c-func 'getegid <gid_t> (list <c-void>)))
(define-extern geteuid (make-c-func 'geteuid <uid_t> (list <c-void>)))
(define-extern getgid (make-c-func 'getgid <gid_t> (list <c-void>)))
(define-extern getgroups (make-c-func 'getgroups <c-int> (list <c-int> (ptr <gid_t>))))
(define-extern gethostid (make-c-func 'gethostid <c-long> (list <c-void>)))
(define-extern gethostname (make-c-func 'gethostname <c-int> (list (ptr <c-char>) <size_t>)))
(define-extern getlogin (make-c-func 'getlogin (ptr <c-char>) (list <c-void>)))
(define-extern getlogin_r (make-c-func 'getlogin_r <c-int> (list (ptr <c-char>) <size_t>)))
(define-extern getopt (make-c-func 'getopt <c-int> (list <c-int> (ptr (ptr <c-char>)) (ptr <c-char>))))
(define-extern getpgid (make-c-func 'getpgid <pid_t> (list <pid_t>)))
(define-extern getpgrp (make-c-func 'getpgrp <pid_t> (list <c-void>)))
(define-extern getpid (make-c-func 'getpid <pid_t> (list <c-void>)))
(define-extern getppid (make-c-func 'getppid <pid_t> (list <c-void>)))
(define-extern getsid (make-c-func 'getsid <pid_t> (list <pid_t>)))
(define-extern getuid (make-c-func 'getuid <uid_t> (list <c-void>)))
(define-extern getwd (make-c-func 'getwd (ptr <c-char>) (list (ptr <c-char>))))
(define-extern isatty (make-c-func 'isatty <c-int> (list <c-int>)))
(define-extern lchown (make-c-func 'lchown <c-int> (list (ptr <c-char>) <uid_t> <gid_t>)))
(define-extern link (make-c-func 'link <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern lockf (make-c-func 'lockf <c-int> (list <c-int> <c-int> <off_t>)))
(define-extern lseek (make-c-func 'lseek <off_t> (list <c-int> <off_t> <c-int>)))
(define-extern nice (make-c-func 'nice <c-int> (list <c-int>)))
(define-extern pathconf (make-c-func 'pathconf <c-long> (list (ptr <c-char>) <c-int>)))
(define-extern pause (make-c-func 'pause <c-int> (list <c-void>)))
(define-extern pipe (make-c-func 'pipe <c-int> (list (make-c-array <c-int> 2))))
(define-extern pread (make-c-func 'pread <ssize_t> (list <c-int> (ptr <c-void>) <size_t> <off_t>)))
(define-extern pwrite (make-c-func 'pwrite <ssize_t> (list <c-int> (ptr <c-void>) <size_t> <off_t>)))
(define-extern read (make-c-func 'read <ssize_t> (list <c-int> (ptr <c-void>) <size_t>)))
(define-extern readlink (make-c-func 'readlink <ssize_t> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define-extern rmdir (make-c-func 'rmdir <c-int> (list (ptr <c-char>))))
(define-extern setegid (make-c-func 'setegid <c-int> (list <gid_t>)))
(define-extern seteuid (make-c-func 'seteuid <c-int> (list <uid_t>)))
(define-extern setgid (make-c-func 'setgid <c-int> (list <gid_t>)))
(define-extern setpgid (make-c-func 'setpgid <c-int> (list <pid_t> <pid_t>)))
(define-extern setpgrp (make-c-func 'setpgrp <c-int> (list <pid_t> <pid_t>)))
(define-extern setregid (make-c-func 'setregid <c-int> (list <gid_t> <gid_t>)))
(define-extern setreuid (make-c-func 'setreuid <c-int> (list <uid_t> <uid_t>)))
(define-extern setsid (make-c-func 'setsid <pid_t> (list <c-void>)))
(define-extern setuid (make-c-func 'setuid <c-int> (list <uid_t>)))
(define-extern sleep (make-c-func 'sleep <c-uint> (list <c-uint>)))
(define-extern swab (make-c-func 'swab <c-void> (list (ptr <c-void>) (ptr <c-void>) <ssize_t>)))
(define-extern symlink (make-c-func 'symlink <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern sync (make-c-func 'sync <c-void> (list <c-void>)))
(define-extern sysconf (make-c-func 'sysconf <c-long> (list <c-int>)))
(define-extern tcgetpgrp (make-c-func 'tcgetpgrp <pid_t> (list <c-int>)))
(define-extern tcsetpgrp (make-c-func 'tcsetpgrp <c-int> (list <c-int> <pid_t>)))
(define-extern truncate (make-c-func 'truncate <c-int> (list (ptr <c-char>) <off_t>)))
(define-extern ttyname (make-c-func 'ttyname (ptr <c-char>) (list <c-int>)))
(define-extern ttyname_r (make-c-func 'ttyname_r (ptr <c-char>) (list <c-int> (ptr <c-char>) <size_t>)))
(define-extern ualarm (make-c-func 'ualarm <useconds_t> (list <useconds_t> <useconds_t>)))
(define-extern unlink (make-c-func 'unlink <c-int> (list (ptr <c-char>))))
(define-extern usleep (make-c-func 'usleep <c-int> (list <useconds_t>)))
(define-extern vfork (make-c-func 'vfork <pid_t> (list <c-void>)))
(define-extern write (make-c-func 'write <ssize_t> (list <c-int> (ptr <c-void>) <size_t>)))
(define-extern optarg (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'optarg))))
(define-extern optind (deref (cast (ptr <c-int>) (c-lookup-symbol 'optind))))
(define-extern opterr (deref (cast (ptr <c-int>) (c-lookup-symbol 'opterr))))
(define-extern optopt (deref (cast (ptr <c-int>) (c-lookup-symbol 'optopt))))
(define-c-struct timespec)
(init-c-struct! (c-struct 'timespec) (list (cons 'tv_sec <time_t>) (cons 'tv_nsec <c-long>)))
(define-extern sys_signame (deref (cast (ptr (make-c-array (ptr <c-char>) 32)) (c-lookup-symbol 'sys_signame))))
(define-extern sys_siglist (deref (cast (ptr (make-c-array (ptr <c-char>) 32)) (c-lookup-symbol 'sys_siglist))))
(define-extern raise (make-c-func 'raise <c-int> (list <c-int>)))
(define-extern bsd_signal (make-c-func 'bsd_signal (make-c-func-ptr <c-void> (list (list '#f <c-int>))) (list <c-int> (make-c-func-ptr <c-void> (list (list '#f <c-int>))))))
(define-extern kill (make-c-func 'kill <c-int> (list <pid_t> <c-int>)))
(define-extern killpg (make-c-func 'killpg <c-int> (list <pid_t> <c-int>)))
(define-extern pthread_kill (make-c-func 'pthread_kill <c-int> (list <pthread_t> <c-int>)))
(define-extern pthread_sigmask (make-c-func 'pthread_sigmask <c-int> (list <c-int> (ptr <sigset_t>) (ptr <sigset_t>))))
(define-extern sigaction (make-c-func 'sigaction <c-int> (list <c-int> (ptr (c-struct 'sigaction)) (ptr (c-struct 'sigaction)))))
(define-extern sigaddset (make-c-func 'sigaddset <c-int> (list (ptr <sigset_t>) <c-int>)))
(define-extern sigaltstack (make-c-func 'sigaltstack <c-int> (list (ptr <stack_t>) (ptr <stack_t>))))
(define-extern sigdelset (make-c-func 'sigdelset <c-int> (list (ptr <sigset_t>) <c-int>)))
(define-extern sigemptyset (make-c-func 'sigemptyset <c-int> (list (ptr <sigset_t>))))
(define-extern sigfillset (make-c-func 'sigfillset <c-int> (list (ptr <sigset_t>))))
(define-extern sighold (make-c-func 'sighold <c-int> (list <c-int>)))
(define-extern sigignore (make-c-func 'sigignore <c-int> (list <c-int>)))
(define-extern siginterrupt (make-c-func 'siginterrupt <c-int> (list <c-int> <c-int>)))
(define-extern sigismember (make-c-func 'sigismember <c-int> (list (ptr <sigset_t>) <c-int>)))
(define-extern sigpause (make-c-func 'sigpause <c-int> (list <c-int>)))
(define-extern sigpending (make-c-func 'sigpending <c-int> (list (ptr <sigset_t>))))
(define-extern sigprocmask (make-c-func 'sigprocmask <c-int> (list <c-int> (ptr <sigset_t>) (ptr <sigset_t>))))
(define-extern sigrelse (make-c-func 'sigrelse <c-int> (list <c-int>)))
(define-extern sigset (make-c-func 'sigset (make-c-func-ptr <c-void> (list (list '#f <c-int>))) (list <c-int> (make-c-func-ptr <c-void> (list (list '#f <c-int>))))))
(define-extern sigsuspend (make-c-func 'sigsuspend <c-int> (list (ptr <sigset_t>))))
(define-extern sigwait (make-c-func 'sigwait <c-int> (list (ptr <sigset_t>) (ptr <c-int>))))
(define-extern psignal (make-c-func 'psignal <c-void> (list <c-uint> (ptr <c-char>))))
(define-extern sigblock (make-c-func 'sigblock <c-int> (list <c-int>)))
(define-extern sigreturn (make-c-func 'sigreturn <c-int> (list (ptr (c-struct 'sigcontext)))))
(define-extern sigsetmask (make-c-func 'sigsetmask <c-int> (list <c-int>)))
(define-extern sigvec (make-c-func 'sigvec <c-int> (list <c-int> (ptr (c-struct 'sigvec)) (ptr (c-struct 'sigvec)))))
(define-c-struct itimerval)
(init-c-struct! (c-struct 'itimerval) (list (cons 'it_interval (c-struct 'timeval)) (cons 'it_value (c-struct 'timeval))))
(define-c-struct timezone)
(init-c-struct! (c-struct 'timezone) (list (cons 'tz_minuteswest <c-int>) (cons 'tz_dsttime <c-int>)))
(define-c-struct clockinfo)
(init-c-struct! (c-struct 'clockinfo) (list (cons 'hz <c-int>) (cons 'tick <c-int>) (cons 'tickadj <c-int>) (cons 'stathz <c-int>) (cons 'profhz <c-int>)))
(define-c-struct tm)
(init-c-struct! (c-struct 'tm) (list (cons 'tm_sec <c-int>) (cons 'tm_min <c-int>) (cons 'tm_hour <c-int>) (cons 'tm_mday <c-int>) (cons 'tm_mon <c-int>) (cons 'tm_year <c-int>) (cons 'tm_wday <c-int>) (cons 'tm_yday <c-int>) (cons 'tm_isdst <c-int>) (cons 'tm_gmtoff <c-long>) (cons 'tm_zone (ptr <c-char>))))
(define-extern tzname (deref (cast (ptr (make-c-array (ptr <c-char>) #f)) (c-lookup-symbol 'tzname))))
(define-extern getdate_err (deref (cast (ptr <c-int>) (c-lookup-symbol 'getdate_err))))
(define-extern daylight (deref (cast (ptr <c-int>) (c-lookup-symbol 'daylight))))
(define-extern asctime (make-c-func 'asctime (ptr <c-char>) (list (ptr (c-struct 'tm)))))
(define-extern clock (make-c-func 'clock <clock_t> (list <c-void>)))
(define-extern ctime (make-c-func 'ctime (ptr <c-char>) (list (ptr <time_t>))))
(define-extern difftime (make-c-func 'difftime <c-double> (list <time_t> <time_t>)))
(define-extern getdate (make-c-func 'getdate (ptr (c-struct 'tm)) (list (ptr <c-char>))))
(define-extern gmtime (make-c-func 'gmtime (ptr (c-struct 'tm)) (list (ptr <time_t>))))
(define-extern localtime (make-c-func 'localtime (ptr (c-struct 'tm)) (list (ptr <time_t>))))
(define-extern mktime (make-c-func 'mktime <time_t> (list (ptr (c-struct 'tm)))))
(define-extern strftime (make-c-func 'strftime <size_t> (list (ptr <c-char>) <size_t> (ptr <c-char>) (ptr (c-struct 'tm)))))
(define-extern strptime (make-c-func 'strptime (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) (ptr (c-struct 'tm)))))
(define-extern time (make-c-func 'time <time_t> (list (ptr <time_t>))))
(define-extern tzset (make-c-func 'tzset <c-void> (list <c-void>)))
(define-extern asctime_r (make-c-func 'asctime_r (ptr <c-char>) (list (ptr (c-struct 'tm)) (ptr <c-char>))))
(define-extern ctime_r (make-c-func 'ctime_r (ptr <c-char>) (list (ptr <time_t>) (ptr <c-char>))))
(define-extern gmtime_r (make-c-func 'gmtime_r (ptr (c-struct 'tm)) (list (ptr <time_t>) (ptr (c-struct 'tm)))))
(define-extern localtime_r (make-c-func 'localtime_r (ptr (c-struct 'tm)) (list (ptr <time_t>) (ptr (c-struct 'tm)))))
(define-extern posix2time (make-c-func 'posix2time <time_t> (list <time_t>)))
(define-extern timezone (make-c-func 'timezone (ptr <c-char>) (list <c-int> <c-int>)))
(define-extern tzsetwall (make-c-func 'tzsetwall <c-void> (list <c-void>)))
(define-extern time2posix (make-c-func 'time2posix <time_t> (list <time_t>)))
(define-extern timelocal (make-c-func 'timelocal <time_t> (list (ptr (c-struct 'tm)))))
(define-extern timegm (make-c-func 'timegm <time_t> (list (ptr (c-struct 'tm)))))
(define-extern nanosleep (make-c-func 'nanosleep <c-int> (list (ptr (c-struct 'timespec)) (ptr (c-struct 'timespec)))))
(define-extern adjtime (make-c-func 'adjtime <c-int> (list (ptr (c-struct 'timeval)) (ptr (c-struct 'timeval)))))
(define-extern futimes (make-c-func 'futimes <c-int> (list <c-int> (ptr (c-struct 'timeval)))))
(define-extern settimeofday (make-c-func 'settimeofday <c-int> (list (ptr (c-struct 'timeval)) (ptr (c-struct 'timezone)))))
(define-extern getitimer (make-c-func 'getitimer <c-int> (list <c-int> (ptr (c-struct 'itimerval)))))
(define-extern gettimeofday (make-c-func 'gettimeofday <c-int> (list (ptr (c-struct 'timeval)) (ptr (c-struct 'timezone)))))
(define-extern select (make-c-func 'select <c-int> (list <c-int> (ptr <fd_set>) (ptr <fd_set>) (ptr <fd_set>) (ptr (c-struct 'timeval)))))
(define-extern setitimer (make-c-func 'setitimer <c-int> (list <c-int> (ptr (c-struct 'itimerval)) (ptr (c-struct 'itimerval)))))
(define-extern utimes (make-c-func 'utimes <c-int> (list (ptr <c-char>) (ptr (c-struct 'timeval)))))
(define-extern pselect (make-c-func 'pselect <c-int> (list <c-int> (ptr <fd_set>) (ptr <fd_set>) (ptr <fd_set>) (ptr (c-struct 'timespec)) (ptr <sigset_t>))))
(define-extern select (make-c-func 'select <c-int> (list <c-int> (ptr <fd_set>) (ptr <fd_set>) (ptr <fd_set>) (ptr (c-struct 'timeval)))))
(define-extern _Exit (make-c-func '_Exit <c-void> (list <c-int>)))
(define-extern accessx_np (make-c-func 'accessx_np <c-int> (list (ptr (c-struct 'accessx_descriptor)) <size_t> (ptr <c-int>) <uid_t>)))
(define-extern acct (make-c-func 'acct <c-int> (list (ptr <c-char>))))
(define-extern add_profil (make-c-func 'add_profil <c-int> (list (ptr <c-char>) <size_t> <c-ulong> <c-uint>)))
(define-extern brk (make-c-func 'brk (ptr <c-void>) (list (ptr <c-void>))))
(define-extern chroot (make-c-func 'chroot <c-int> (list (ptr <c-char>))))
(define-extern encrypt (make-c-func 'encrypt <c-int> (list (ptr <c-char>) <c-int>)))
(define-extern endusershell (make-c-func 'endusershell <c-void> (list <c-void>)))
(define-extern execvP (make-c-func 'execvP <c-int> (list (ptr <c-char>) (ptr <c-char>) (ptr (ptr <c-char>)))))
(define-extern fflagstostr (make-c-func 'fflagstostr (ptr <c-char>) (list <c-ulong>)))
(define-extern fsync (make-c-func 'fsync <c-int> (list <c-int>)))
(define-extern getdtablesize (make-c-func 'getdtablesize <c-int> (list <c-void>)))
(define-extern getdomainname (make-c-func 'getdomainname <c-int> (list (ptr <c-char>) <c-int>)))
(define-extern getgrouplist (make-c-func 'getgrouplist <c-int> (list (ptr <c-char>) <c-int> (ptr <c-int>) (ptr <c-int>))))
(define-extern getmode (make-c-func 'getmode <mode_t> (list (ptr <c-void>) <mode_t>)))
(define-extern getpagesize (make-c-func 'getpagesize <c-int> (list <c-void>)))
(define-extern getpass (make-c-func 'getpass (ptr <c-char>) (list (ptr <c-char>))))
(define-extern getpeereid (make-c-func 'getpeereid <c-int> (list <c-int> (ptr <uid_t>) (ptr <gid_t>))))
(define-extern getpgid (make-c-func 'getpgid <c-int> (list <pid_t>)))
(define-extern getsgroups_np (make-c-func 'getsgroups_np <c-int> (list (ptr <c-int>) <uuid_t>)))
(define-extern getsid (make-c-func 'getsid <c-int> (list <pid_t>)))
(define-extern getusershell (make-c-func 'getusershell (ptr <c-char>) (list <c-void>)))
(define-extern getwgroups_np (make-c-func 'getwgroups_np <c-int> (list (ptr <c-int>) <uuid_t>)))
(define-extern initgroups (make-c-func 'initgroups <c-int> (list (ptr <c-char>) <c-int>)))
(define-extern iruserok (make-c-func 'iruserok <c-int> (list <c-ulong> <c-int> (ptr <c-char>) (ptr <c-char>))))
(define-extern issetugid (make-c-func 'issetugid <c-int> (list <c-void>)))
(define-extern mkdtemp (make-c-func 'mkdtemp (ptr <c-char>) (list (ptr <c-char>))))
(define-extern mknod (make-c-func 'mknod <c-int> (list (ptr <c-char>) <mode_t> <dev_t>)))
(define-extern mkstemp (make-c-func 'mkstemp <c-int> (list (ptr <c-char>))))
(define-extern mkstemps (make-c-func 'mkstemps <c-int> (list (ptr <c-char>) <c-int>)))
(define-extern mktemp (make-c-func 'mktemp (ptr <c-char>) (list (ptr <c-char>))))
(define-extern nfssvc (make-c-func 'nfssvc <c-int> (list <c-int> (ptr <c-void>))))
(define-extern profil (make-c-func 'profil <c-int> (list (ptr <c-char>) <size_t> <c-ulong> <c-uint>)))
(define-extern pthread_setugid_np (make-c-func 'pthread_setugid_np <c-int> (list <uid_t> <gid_t>)))
(define-extern pthread_getugid_np (make-c-func 'pthread_getugid_np <c-int> (list (ptr <uid_t>) (ptr <gid_t>))))
(define-extern rcmd (make-c-func 'rcmd <c-int> (list (ptr (ptr <c-char>)) <c-int> (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) (ptr <c-int>))))
(define-extern reboot (make-c-func 'reboot <c-int> (list <c-int>)))
(define-extern revoke (make-c-func 'revoke <c-int> (list (ptr <c-char>))))
(define-extern rresvport (make-c-func 'rresvport <c-int> (list (ptr <c-int>))))
(define-extern rresvport_af (make-c-func 'rresvport_af <c-int> (list (ptr <c-int>) <c-int>)))
(define-extern ruserok (make-c-func 'ruserok <c-int> (list (ptr <c-char>) <c-int> (ptr <c-char>) (ptr <c-char>))))
(define-extern sbrk (make-c-func 'sbrk (ptr <c-void>) (list <c-int>)))
(define-extern setdomainname (make-c-func 'setdomainname <c-int> (list (ptr <c-char>) <c-int>)))
(define-extern setgroups (make-c-func 'setgroups <c-int> (list <c-int> (ptr <gid_t>))))
(define-extern sethostid (make-c-func 'sethostid <c-void> (list <c-long>)))
(define-extern sethostname (make-c-func 'sethostname <c-int> (list (ptr <c-char>) <c-int>)))
(define-extern setkey (make-c-func 'setkey <c-int> (list (ptr <c-char>))))
(define-extern setlogin (make-c-func 'setlogin <c-int> (list (ptr <c-char>))))
(define-extern setmode (make-c-func 'setmode (ptr <c-void>) (list (ptr <c-char>))))
(define-extern setrgid (make-c-func 'setrgid <c-int> (list <gid_t>)))
(define-extern setruid (make-c-func 'setruid <c-int> (list <uid_t>)))
(define-extern setsgroups_np (make-c-func 'setsgroups_np <c-int> (list <c-int> <uuid_t>)))
(define-extern setusershell (make-c-func 'setusershell <c-void> (list <c-void>)))
(define-extern setwgroups_np (make-c-func 'setwgroups_np <c-int> (list <c-int> <uuid_t>)))
(define-extern strtofflags (make-c-func 'strtofflags <c-int> (list (ptr (ptr <c-char>)) (ptr <c-ulong>) (ptr <c-ulong>))))
(define-extern swapon (make-c-func 'swapon <c-int> (list (ptr <c-char>))))
(define-extern syscall (make-c-func-vaargs 'syscall <c-int> (list <c-int>)))
(define-extern ttyslot (make-c-func 'ttyslot <c-int> (list <c-void>)))
(define-extern undelete (make-c-func 'undelete <c-int> (list (ptr <c-char>))))
(define-extern valloc (make-c-func 'valloc (ptr <c-void>) (list <size_t>)))
(define-extern suboptarg (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'suboptarg))))
(define-extern getsubopt (make-c-func 'getsubopt <c-int> (list (ptr (ptr <c-char>)) (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define-extern getattrlist (make-c-func 'getattrlist <c-int> (list (ptr <c-char>) (ptr <c-void>) (ptr <c-void>) <size_t> <c-ulong>)))
(define-extern setattrlist (make-c-func 'setattrlist <c-int> (list (ptr <c-char>) (ptr <c-void>) (ptr <c-void>) <size_t> <c-ulong>)))
(define-extern exchangedata (make-c-func 'exchangedata <c-int> (list (ptr <c-char>) (ptr <c-char>) <c-ulong>)))
(define-extern checkuseraccess (make-c-func 'checkuseraccess <c-int> (list (ptr <c-char>) <uid_t> (ptr <gid_t>) <c-int> <c-int> <c-ulong>)))
(define-extern getdirentriesattr (make-c-func 'getdirentriesattr <c-int> (list <c-int> (ptr <c-void>) (ptr <c-void>) <size_t> (ptr <c-ulong>) (ptr <c-ulong>) (ptr <c-ulong>) <c-ulong>)))
(define-extern searchfs (make-c-func 'searchfs <c-int> (list (ptr <c-char>) (ptr <c-void>) (ptr <c-void>) <c-ulong> <c-ulong> (ptr <c-void>))))
(define-extern fsctl (make-c-func 'fsctl <c-int> (list (ptr <c-char>) <c-ulong> (ptr <c-void>) <c-ulong>)))
(define-extern optreset (deref (cast (ptr <c-int>) (c-lookup-symbol 'optreset))))
(define-ctype ptrdiff_t <c-int>)
(define-extern memchr (make-c-func 'memchr (ptr <c-void>) (list (ptr <c-void>) <c-int> <size_t>)))
(define-extern memcmp (make-c-func 'memcmp <c-int> (list (ptr <c-void>) (ptr <c-void>) <size_t>)))
(define-extern memcpy (make-c-func 'memcpy (ptr <c-void>) (list (ptr <c-void>) (ptr <c-void>) <size_t>)))
(define-extern memmove (make-c-func 'memmove (ptr <c-void>) (list (ptr <c-void>) (ptr <c-void>) <size_t>)))
(define-extern memset (make-c-func 'memset (ptr <c-void>) (list (ptr <c-void>) <c-int> <size_t>)))
(define-extern stpcpy (make-c-func 'stpcpy (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strcasestr (make-c-func 'strcasestr (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strcat (make-c-func 'strcat (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strchr (make-c-func 'strchr (ptr <c-char>) (list (ptr <c-char>) <c-int>)))
(define-extern strcmp (make-c-func 'strcmp <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strcoll (make-c-func 'strcoll <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strcpy (make-c-func 'strcpy (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strcspn (make-c-func 'strcspn <size_t> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strerror (make-c-func 'strerror (ptr <c-char>) (list <c-int>)))
(define-extern strerror_r (make-c-func 'strerror_r <c-int> (list <c-int> (ptr <c-char>) <size_t>)))
(define-extern strlen (make-c-func 'strlen <size_t> (list (ptr <c-char>))))
(define-extern strncat (make-c-func 'strncat (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define-extern strncmp (make-c-func 'strncmp <c-int> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define-extern strncpy (make-c-func 'strncpy (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define-extern strnstr (make-c-func 'strnstr (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define-extern strpbrk (make-c-func 'strpbrk (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strrchr (make-c-func 'strrchr (ptr <c-char>) (list (ptr <c-char>) <c-int>)))
(define-extern strspn (make-c-func 'strspn <size_t> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strstr (make-c-func 'strstr (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strtok (make-c-func 'strtok (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strxfrm (make-c-func 'strxfrm <size_t> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define-extern memccpy (make-c-func 'memccpy (ptr <c-void>) (list (ptr <c-void>) (ptr <c-void>) <c-int> <size_t>)))
(define-extern strtok_r (make-c-func 'strtok_r (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) (ptr (ptr <c-char>)))))
(define-extern strdup (make-c-func 'strdup (ptr <c-char>) (list (ptr <c-char>))))
(define-extern bcmp (make-c-func 'bcmp <c-int> (list (ptr <c-void>) (ptr <c-void>) <size_t>)))
(define-extern bcopy (make-c-func 'bcopy <c-void> (list (ptr <c-void>) (ptr <c-void>) <size_t>)))
(define-extern bzero (make-c-func 'bzero <c-void> (list (ptr <c-void>) <size_t>)))
(define-extern ffs (make-c-func 'ffs <c-int> (list <c-int>)))
(define-extern index (make-c-func 'index (ptr <c-char>) (list (ptr <c-char>) <c-int>)))
(define-extern rindex (make-c-func 'rindex (ptr <c-char>) (list (ptr <c-char>) <c-int>)))
(define-extern strcasecmp (make-c-func 'strcasecmp <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern strlcat (make-c-func 'strlcat <size_t> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define-extern strlcpy (make-c-func 'strlcpy <size_t> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define-extern strmode (make-c-func 'strmode <c-void> (list <c-int> (ptr <c-char>))))
(define-extern strncasecmp (make-c-func 'strncasecmp <c-int> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define-extern strsep (make-c-func 'strsep (ptr <c-char>) (list (ptr (ptr <c-char>)) (ptr <c-char>))))
(define-extern strsignal (make-c-func 'strsignal (ptr <c-char>) (list <c-int>)))
(define-extern swab (make-c-func 'swab <c-void> (list (ptr <c-void>) (ptr <c-void>) <ssize_t>)))
(define-ctype sa_family_t <__uint8_t>)
(define-ctype socklen_t <__darwin_socklen_t>)
(define-c-struct iovec)
(init-c-struct! (c-struct 'iovec) (list (cons 'iov_base (ptr <c-void>)) (cons 'iov_len <size_t>)))
(define-c-struct linger)
(init-c-struct! (c-struct 'linger) (list (cons 'l_onoff <c-int>) (cons 'l_linger <c-int>)))
(define-c-struct sockaddr)
(init-c-struct! (c-struct 'sockaddr) (list (cons 'sa_len <__uint8_t>) (cons 'sa_family <sa_family_t>) (cons 'sa_data (make-c-array <c-char> 14))))
(define-c-struct sockproto)
(init-c-struct! (c-struct 'sockproto) (list (cons 'sp_family <__uint16_t>) (cons 'sp_protocol <__uint16_t>)))
(define-c-struct sockaddr_storage)
(init-c-struct! (c-struct 'sockaddr_storage) (list (cons 'ss_len <__uint8_t>) (cons 'ss_family <sa_family_t>) (cons '__ss_pad1 (make-c-array <c-char> (cast <integer> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>))))))) (cons '__ss_align <__int64_t>) (cons '__ss_pad2 (make-c-array <c-char> (cast <integer> (if (is-a? (if (is-a? (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) <c-ptr>) (c-ptr- (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))))) (- (cast <real> (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>))))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>))))))) <c-ptr>) (c-ptr- (if (is-a? (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) <c-ptr>) (c-ptr- (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))))) (- (cast <real> (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>))))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>))))))) (cast <real> (c-sizeof <__int64_t>))) (- (cast <real> (if (is-a? (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) <c-ptr>) (c-ptr- (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))))) (- (cast <real> (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>))))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))))))) (cast <real> (c-sizeof <__int64_t>)))))))))
(define-c-struct msghdr)
(init-c-struct! (c-struct 'msghdr) (list (cons 'msg_name (ptr <c-void>)) (cons 'msg_namelen <socklen_t>) (cons 'msg_iov (ptr (c-struct 'iovec))) (cons 'msg_iovlen <c-int>) (cons 'msg_control (ptr <c-void>)) (cons 'msg_controllen <socklen_t>) (cons 'msg_flags <c-int>)))
(define-c-struct cmsghdr)
(init-c-struct! (c-struct 'cmsghdr) (list (cons 'cmsg_len <socklen_t>) (cons 'cmsg_level <c-int>) (cons 'cmsg_type <c-int>)))
(define-c-struct osockaddr)
(init-c-struct! (c-struct 'osockaddr) (list (cons 'sa_family <__uint16_t>) (cons 'sa_data (make-c-array <c-char> 14))))
(define-c-struct omsghdr)
(init-c-struct! (c-struct 'omsghdr) (list (cons 'msg_name (ptr <c-void>)) (cons 'msg_namelen <socklen_t>) (cons 'msg_iov (ptr (c-struct 'iovec))) (cons 'msg_iovlen <c-int>) (cons 'msg_accrights (ptr <c-void>)) (cons 'msg_accrightslen <c-int>)))
(define-extern accept (make-c-func 'accept <c-int> (list <c-int> (ptr (c-struct 'sockaddr)) (ptr <socklen_t>))))
(define-extern bind (make-c-func 'bind <c-int> (list <c-int> (ptr (c-struct 'sockaddr)) <socklen_t>)))
(define-extern connect (make-c-func 'connect <c-int> (list <c-int> (ptr (c-struct 'sockaddr)) <socklen_t>)))
(define-extern getpeername (make-c-func 'getpeername <c-int> (list <c-int> (ptr (c-struct 'sockaddr)) (ptr <socklen_t>))))
(define-extern getsockname (make-c-func 'getsockname <c-int> (list <c-int> (ptr (c-struct 'sockaddr)) (ptr <socklen_t>))))
(define-extern getsockopt (make-c-func 'getsockopt <c-int> (list <c-int> <c-int> <c-int> (ptr <c-void>) (ptr <socklen_t>))))
(define-extern listen (make-c-func 'listen <c-int> (list <c-int> <c-int>)))
(define-extern recv (make-c-func 'recv <ssize_t> (list <c-int> (ptr <c-void>) <size_t> <c-int>)))
(define-extern recvfrom (make-c-func 'recvfrom <ssize_t> (list <c-int> (ptr <c-void>) <size_t> <c-int> (ptr (c-struct 'sockaddr)) (ptr <socklen_t>))))
(define-extern recvmsg (make-c-func 'recvmsg <ssize_t> (list <c-int> (ptr (c-struct 'msghdr)) <c-int>)))
(define-extern send (make-c-func 'send <ssize_t> (list <c-int> (ptr <c-void>) <size_t> <c-int>)))
(define-extern sendmsg (make-c-func 'sendmsg <ssize_t> (list <c-int> (ptr (c-struct 'msghdr)) <c-int>)))
(define-extern sendto (make-c-func 'sendto <ssize_t> (list <c-int> (ptr <c-void>) <size_t> <c-int> (ptr (c-struct 'sockaddr)) <socklen_t>)))
(define-extern setsockopt (make-c-func 'setsockopt <c-int> (list <c-int> <c-int> <c-int> (ptr <c-void>) <socklen_t>)))
(define-extern shutdown (make-c-func 'shutdown <c-int> (list <c-int> <c-int>)))
(define-extern socket (make-c-func 'socket <c-int> (list <c-int> <c-int> <c-int>)))
(define-extern socketpair (make-c-func 'socketpair <c-int> (list <c-int> <c-int> <c-int> (ptr <c-int>))))
(define-c-struct in_addr)
(init-c-struct! (c-struct 'in_addr) (list (cons 's_addr <in_addr_t>)))
(define-c-struct sockaddr_in)
(init-c-struct! (c-struct 'sockaddr_in) (list (cons 'sin_len <__uint8_t>) (cons 'sin_family <sa_family_t>) (cons 'sin_port <in_port_t>) (cons 'sin_addr (c-struct 'in_addr)) (cons 'sin_zero (make-c-array <c-char> 8))))
(define-c-struct ip_opts)
(init-c-struct! (c-struct 'ip_opts) (list (cons 'ip_dst (c-struct 'in_addr)) (cons 'ip_opts (make-c-array <c-char> 40))))
(define-c-struct ip_mreq)
(init-c-struct! (c-struct 'ip_mreq) (list (cons 'imr_multiaddr (c-struct 'in_addr)) (cons 'imr_interface (c-struct 'in_addr))))
(define-c-union G402)
(init-c-union! (c-union 'G402) (list (cons '__u6_addr8 (make-c-array <__uint8_t> 16)) (cons '__u6_addr16 (make-c-array <__uint16_t> 8)) (cons '__u6_addr32 (make-c-array <__uint32_t> 4))))
(define-c-struct in6_addr)
(init-c-struct! (c-struct 'in6_addr) (list (cons '__u6_addr (c-union 'G402))))
(define-c-struct sockaddr_in6)
(init-c-struct! (c-struct 'sockaddr_in6) (list (cons 'sin6_len <__uint8_t>) (cons 'sin6_family <sa_family_t>) (cons 'sin6_port <in_port_t>) (cons 'sin6_flowinfo <__uint32_t>) (cons 'sin6_addr (c-struct 'in6_addr)) (cons 'sin6_scope_id <__uint32_t>)))
(define-extern in6addr_any (deref (cast (ptr (c-struct 'in6_addr)) (c-lookup-symbol 'in6addr_any))))
(define-extern in6addr_loopback (deref (cast (ptr (c-struct 'in6_addr)) (c-lookup-symbol 'in6addr_loopback))))
(define-extern in6addr_nodelocal_allnodes (deref (cast (ptr (c-struct 'in6_addr)) (c-lookup-symbol 'in6addr_nodelocal_allnodes))))
(define-extern in6addr_linklocal_allnodes (deref (cast (ptr (c-struct 'in6_addr)) (c-lookup-symbol 'in6addr_linklocal_allnodes))))
(define-extern in6addr_linklocal_allrouters (deref (cast (ptr (c-struct 'in6_addr)) (c-lookup-symbol 'in6addr_linklocal_allrouters))))
(define-c-struct ipv6_mreq)
(init-c-struct! (c-struct 'ipv6_mreq) (list (cons 'ipv6mr_multiaddr (c-struct 'in6_addr)) (cons 'ipv6mr_interface <c-uint>)))
(define-c-struct in6_pktinfo)
(init-c-struct! (c-struct 'in6_pktinfo) (list (cons 'ipi6_addr (c-struct 'in6_addr)) (cons 'ipi6_ifindex <c-uint>)))
(define-extern inet6_option_space (make-c-func 'inet6_option_space <c-int> (list <c-int>)))
(define-extern inet6_option_init (make-c-func 'inet6_option_init <c-int> (list (ptr <c-void>) (ptr (ptr (c-struct 'cmsghdr))) <c-int>)))
(define-extern inet6_option_append (make-c-func 'inet6_option_append <c-int> (list (ptr (c-struct 'cmsghdr)) (ptr <__uint8_t>) <c-int> <c-int>)))
(define-extern inet6_option_alloc (make-c-func 'inet6_option_alloc (ptr <__uint8_t>) (list (ptr (c-struct 'cmsghdr)) <c-int> <c-int> <c-int>)))
(define-extern inet6_option_next (make-c-func 'inet6_option_next <c-int> (list (ptr (c-struct 'cmsghdr)) (ptr (ptr <__uint8_t>)))))
(define-extern inet6_option_find (make-c-func 'inet6_option_find <c-int> (list (ptr (c-struct 'cmsghdr)) (ptr (ptr <__uint8_t>)) <c-int>)))
(define-extern inet6_rthdr_space (make-c-func 'inet6_rthdr_space <size_t> (list <c-int> <c-int>)))
(define-extern inet6_rthdr_init (make-c-func 'inet6_rthdr_init (ptr (c-struct 'cmsghdr)) (list (ptr <c-void>) <c-int>)))
(define-extern inet6_rthdr_add (make-c-func 'inet6_rthdr_add <c-int> (list (ptr (c-struct 'cmsghdr)) (ptr (c-struct 'in6_addr)) <c-uint>)))
(define-extern inet6_rthdr_lasthop (make-c-func 'inet6_rthdr_lasthop <c-int> (list (ptr (c-struct 'cmsghdr)) <c-uint>)))
(define-extern inet6_rthdr_segments (make-c-func 'inet6_rthdr_segments <c-int> (list (ptr (c-struct 'cmsghdr)))))
(define-extern inet6_rthdr_getaddr (make-c-func 'inet6_rthdr_getaddr (ptr (c-struct 'in6_addr)) (list (ptr (c-struct 'cmsghdr)) <c-int>)))
(define-extern inet6_rthdr_getflags (make-c-func 'inet6_rthdr_getflags <c-int> (list (ptr (c-struct 'cmsghdr)) <c-int>)))
(define-extern inet_addr (make-c-func 'inet_addr <in_addr_t> (list (ptr <c-char>))))
(define-extern inet_ntoa (make-c-func 'inet_ntoa (ptr <c-char>) (list (c-struct 'in_addr))))
(define-extern inet_ntop (make-c-func 'inet_ntop (ptr <c-char>) (list <c-int> (ptr <c-void>) (ptr <c-char>) <size_t>)))
(define-extern inet_pton (make-c-func 'inet_pton <c-int> (list <c-int> (ptr <c-char>) (ptr <c-void>))))
(define-extern ascii2addr (make-c-func 'ascii2addr <c-int> (list <c-int> (ptr <c-char>) (ptr <c-void>))))
(define-extern addr2ascii (make-c-func 'addr2ascii (ptr <c-char>) (list <c-int> (ptr <c-void>) <c-int> (ptr <c-char>))))
(define-extern inet_aton (make-c-func 'inet_aton <c-int> (list (ptr <c-char>) (ptr (c-struct 'in_addr)))))
(define-extern inet_lnaof (make-c-func 'inet_lnaof <in_addr_t> (list (c-struct 'in_addr))))
(define-extern inet_makeaddr (make-c-func 'inet_makeaddr (c-struct 'in_addr) (list <in_addr_t> <in_addr_t>)))
(define-extern inet_netof (make-c-func 'inet_netof <in_addr_t> (list (c-struct 'in_addr))))
(define-extern inet_network (make-c-func 'inet_network <in_addr_t> (list (ptr <c-char>))))
(define-extern inet_net_ntop (make-c-func 'inet_net_ntop (ptr <c-char>) (list <c-int> (ptr <c-void>) <c-int> (ptr <c-char>) <size_t>)))
(define-extern inet_net_pton (make-c-func 'inet_net_pton <c-int> (list <c-int> (ptr <c-char>) (ptr <c-void>) <size_t>)))
(define-extern inet_neta (make-c-func 'inet_neta (ptr <c-char>) (list <in_addr_t> (ptr <c-char>) <size_t>)))
(define-extern inet_nsap_addr (make-c-func 'inet_nsap_addr <c-uint> (list (ptr <c-char>) (ptr <c-uchar>) <c-int>)))
(define-extern inet_nsap_ntoa (make-c-func 'inet_nsap_ntoa (ptr <c-char>) (list <c-int> (ptr <c-uchar>) (ptr <c-char>))))
(define-c-struct ostat)
(init-c-struct! (c-struct 'ostat) (list (cons 'st_dev <__uint16_t>) (cons 'st_ino <ino_t>) (cons 'st_mode <mode_t>) (cons 'st_nlink <nlink_t>) (cons 'st_uid <__uint16_t>) (cons 'st_gid <__uint16_t>) (cons 'st_rdev <__uint16_t>) (cons 'st_size <__int32_t>) (cons 'st_atimespec (c-struct 'timespec)) (cons 'st_mtimespec (c-struct 'timespec)) (cons 'st_ctimespec (c-struct 'timespec)) (cons 'st_blksize <__int32_t>) (cons 'st_blocks <__int32_t>) (cons 'st_flags <__uint32_t>) (cons 'st_gen <__uint32_t>)))
(define-c-struct stat)
(init-c-struct! (c-struct 'stat) (list (cons 'st_dev <dev_t>) (cons 'st_ino <ino_t>) (cons 'st_mode <mode_t>) (cons 'st_nlink <nlink_t>) (cons 'st_uid <uid_t>) (cons 'st_gid <gid_t>) (cons 'st_rdev <dev_t>) (cons 'st_atimespec (c-struct 'timespec)) (cons 'st_mtimespec (c-struct 'timespec)) (cons 'st_ctimespec (c-struct 'timespec)) (cons 'st_size <off_t>) (cons 'st_blocks <blkcnt_t>) (cons 'st_blksize <blksize_t>) (cons 'st_flags <__uint32_t>) (cons 'st_gen <__uint32_t>) (cons 'st_lspare <__int32_t>) (cons 'st_qspare (make-c-array <__int64_t> 2))))
(define-extern chmod (make-c-func 'chmod <c-int> (list (ptr <c-char>) <mode_t>)))
(define-extern fchmod (make-c-func 'fchmod <c-int> (list <c-int> <mode_t>)))
(define-extern fstat (make-c-func 'fstat <c-int> (list <c-int> (ptr (c-struct 'stat)))))
(define-extern lstat (make-c-func 'lstat <c-int> (list (ptr <c-char>) (ptr (c-struct 'stat)))))
(define-extern mkdir (make-c-func 'mkdir <c-int> (list (ptr <c-char>) <mode_t>)))
(define-extern mkfifo (make-c-func 'mkfifo <c-int> (list (ptr <c-char>) <mode_t>)))
(define-extern stat (make-c-func 'stat <c-int> (list (ptr <c-char>) (ptr (c-struct 'stat)))))
(define-extern mknod (make-c-func 'mknod <c-int> (list (ptr <c-char>) <mode_t> <dev_t>)))
(define-extern umask (make-c-func 'umask <mode_t> (list <mode_t>)))
(define-c-struct _filesec)
(define-ctype filesec_t (ptr (c-struct '_filesec)))
(define-extern chflags (make-c-func 'chflags <c-int> (list (ptr <c-char>) <__uint32_t>)))
(define-extern chmodx_np (make-c-func 'chmodx_np <c-int> (list (ptr <c-char>) <filesec_t>)))
(define-extern fchflags (make-c-func 'fchflags <c-int> (list <c-int> <__uint32_t>)))
(define-extern fchmodx_np (make-c-func 'fchmodx_np <c-int> (list <c-int> <filesec_t>)))
(define-extern fstatx_np (make-c-func 'fstatx_np <c-int> (list <c-int> (ptr (c-struct 'stat)) <filesec_t>)))
(define-extern lstatx_np (make-c-func 'lstatx_np <c-int> (list (ptr <c-char>) (ptr (c-struct 'stat)) <filesec_t>)))
(define-extern mkdirx_np (make-c-func 'mkdirx_np <c-int> (list (ptr <c-char>) <filesec_t>)))
(define-extern mkfifox_np (make-c-func 'mkfifox_np <c-int> (list (ptr <c-char>) <filesec_t>)))
(define-extern statx_np (make-c-func 'statx_np <c-int> (list (ptr <c-char>) (ptr (c-struct 'stat)) <filesec_t>)))
(define-extern umaskx_np (make-c-func 'umaskx_np <c-int> (list <filesec_t>)))
(define-c-struct tms)
(init-c-struct! (c-struct 'tms) (list (cons 'tms_utime <clock_t>) (cons 'tms_stime <clock_t>) (cons 'tms_cutime <clock_t>) (cons 'tms_cstime <clock_t>)))
(define-extern times (make-c-func 'times <clock_t> (list (ptr (c-struct 'tms)))))
(define-extern __error (make-c-func '__error (ptr <c-int>) (list <c-void>)))
(define-extern h_errno (deref (cast (ptr <c-int>) (c-lookup-symbol 'h_errno))))
(define-c-struct hostent)
(init-c-struct! (c-struct 'hostent) (list (cons 'h_name (ptr <c-char>)) (cons 'h_aliases (ptr (ptr <c-char>))) (cons 'h_addrtype <c-int>) (cons 'h_length <c-int>) (cons 'h_addr_list (ptr (ptr <c-char>)))))
(define-c-struct netent)
(init-c-struct! (c-struct 'netent) (list (cons 'n_name (ptr <c-char>)) (cons 'n_aliases (ptr (ptr <c-char>))) (cons 'n_addrtype <c-int>) (cons 'n_net <uint32_t>)))
(define-c-struct servent)
(init-c-struct! (c-struct 'servent) (list (cons 's_name (ptr <c-char>)) (cons 's_aliases (ptr (ptr <c-char>))) (cons 's_port <c-int>) (cons 's_proto (ptr <c-char>))))
(define-c-struct protoent)
(init-c-struct! (c-struct 'protoent) (list (cons 'p_name (ptr <c-char>)) (cons 'p_aliases (ptr (ptr <c-char>))) (cons 'p_proto <c-int>)))
(define-c-struct addrinfo)
(init-c-struct! (c-struct 'addrinfo) (list (cons 'ai_flags <c-int>) (cons 'ai_family <c-int>) (cons 'ai_socktype <c-int>) (cons 'ai_protocol <c-int>) (cons 'ai_addrlen <socklen_t>) (cons 'ai_canonname (ptr <c-char>)) (cons 'ai_addr (ptr (c-struct 'sockaddr))) (cons 'ai_next (ptr (c-struct 'addrinfo)))))
(define-c-struct rpcent)
(init-c-struct! (c-struct 'rpcent) (list (cons 'r_name (ptr <c-char>)) (cons 'r_aliases (ptr (ptr <c-char>))) (cons 'r_number <c-int>)))
(define-extern endhostent (make-c-func 'endhostent <c-void> (list <c-void>)))
(define-extern endnetent (make-c-func 'endnetent <c-void> (list <c-void>)))
(define-extern endprotoent (make-c-func 'endprotoent <c-void> (list <c-void>)))
(define-extern endservent (make-c-func 'endservent <c-void> (list <c-void>)))
(define-extern freeaddrinfo (make-c-func 'freeaddrinfo <c-void> (list (ptr (c-struct 'addrinfo)))))
(define-extern gai_strerror (make-c-func 'gai_strerror (ptr <c-char>) (list <c-int>)))
(define-extern getaddrinfo (make-c-func 'getaddrinfo <c-int> (list (ptr <c-char>) (ptr <c-char>) (ptr (c-struct 'addrinfo)) (ptr (ptr (c-struct 'addrinfo))))))
(define-extern gethostbyaddr (make-c-func 'gethostbyaddr (ptr (c-struct 'hostent)) (list (ptr <c-void>) <socklen_t> <c-int>)))
(define-extern gethostbyname (make-c-func 'gethostbyname (ptr (c-struct 'hostent)) (list (ptr <c-char>))))
(define-extern gethostent (make-c-func 'gethostent (ptr (c-struct 'hostent)) (list <c-void>)))
(define-extern getnameinfo (make-c-func 'getnameinfo <c-int> (list (ptr (c-struct 'sockaddr)) <socklen_t> (ptr <c-char>) <socklen_t> (ptr <c-char>) <socklen_t> <c-int>)))
(define-extern getnetbyaddr (make-c-func 'getnetbyaddr (ptr (c-struct 'netent)) (list <uint32_t> <c-int>)))
(define-extern getnetbyname (make-c-func 'getnetbyname (ptr (c-struct 'netent)) (list (ptr <c-char>))))
(define-extern getnetent (make-c-func 'getnetent (ptr (c-struct 'netent)) (list <c-void>)))
(define-extern getprotobyname (make-c-func 'getprotobyname (ptr (c-struct 'protoent)) (list (ptr <c-char>))))
(define-extern getprotobynumber (make-c-func 'getprotobynumber (ptr (c-struct 'protoent)) (list <c-int>)))
(define-extern getprotoent (make-c-func 'getprotoent (ptr (c-struct 'protoent)) (list <c-void>)))
(define-extern getservbyname (make-c-func 'getservbyname (ptr (c-struct 'servent)) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern getservbyport (make-c-func 'getservbyport (ptr (c-struct 'servent)) (list <c-int> (ptr <c-char>))))
(define-extern getservent (make-c-func 'getservent (ptr (c-struct 'servent)) (list <c-void>)))
(define-extern sethostent (make-c-func 'sethostent <c-void> (list <c-int>)))
(define-extern setnetent (make-c-func 'setnetent <c-void> (list <c-int>)))
(define-extern setprotoent (make-c-func 'setprotoent <c-void> (list <c-int>)))
(define-extern setservent (make-c-func 'setservent <c-void> (list <c-int>)))
(define-extern freehostent (make-c-func 'freehostent <c-void> (list (ptr (c-struct 'hostent)))))
(define-extern gethostbyname2 (make-c-func 'gethostbyname2 (ptr (c-struct 'hostent)) (list (ptr <c-char>) <c-int>)))
(define-extern getipnodebyaddr (make-c-func 'getipnodebyaddr (ptr (c-struct 'hostent)) (list (ptr <c-void>) <size_t> <c-int> (ptr <c-int>))))
(define-extern getipnodebyname (make-c-func 'getipnodebyname (ptr (c-struct 'hostent)) (list (ptr <c-char>) <c-int> <c-int> (ptr <c-int>))))
(define-extern getrpcbyname (make-c-func 'getrpcbyname (ptr (c-struct 'rpcent)) (list (ptr <c-char>))))
(define-extern getrpcbynumber (make-c-func 'getrpcbynumber (ptr (c-struct 'rpcent)) (list <c-long>)))
(define-extern getrpcent (make-c-func 'getrpcent (ptr (c-struct 'rpcent)) (list <c-void>)))
(define-extern setrpcent (make-c-func 'setrpcent <c-void> (list <c-int>)))
(define-extern endrpcent (make-c-func 'endrpcent <c-void> (list <c-void>)))
(define-extern herror (make-c-func 'herror <c-void> (list (ptr <c-char>))))
(define-extern hstrerror (make-c-func 'hstrerror (ptr <c-char>) (list <c-int>)))
(define-extern innetgr (make-c-func 'innetgr <c-int> (list (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>))))
(define-extern strerror (make-c-func 'strerror (ptr <c-char>) (list <c-int>)))
(define-c-struct winsize)
(init-c-struct! (c-struct 'winsize) (list (cons 'ws_row <c-ushort>) (cons 'ws_col <c-ushort>) (cons 'ws_xpixel <c-ushort>) (cons 'ws_ypixel <c-ushort>)))
(define-c-struct ttysize)
(init-c-struct! (c-struct 'ttysize) (list (cons 'ts_lines <c-ushort>) (cons 'ts_cols <c-ushort>) (cons 'ts_xxx <c-ushort>) (cons 'ts_yyy <c-ushort>)))
(define-extern ioctl (make-c-func-vaargs 'ioctl <c-int> (list <c-int> <c-ulong>)))
(define-c-struct dirent)
(init-c-struct! (c-struct 'dirent) (list (cons 'd_ino <ino_t>) (cons 'd_reclen <__uint16_t>) (cons 'd_type <__uint8_t>) (cons 'd_namlen <__uint8_t>) (cons 'd_name (make-c-array <c-char> 256))))
(define-c-struct _telldir)
(define-c-struct G403)
(init-c-struct! (c-struct 'G403) (list (cons 'dd_fd <c-int>) (cons 'dd_loc <c-long>) (cons 'dd_size <c-long>) (cons 'dd_buf (ptr <c-char>)) (cons 'dd_len <c-int>) (cons 'dd_seek <c-long>) (cons 'dd_rewind <c-long>) (cons 'dd_flags <c-int>) (cons 'dd_lock <__darwin_pthread_mutex_t>) (cons 'dd_td (ptr (c-struct '_telldir)))))
(define-ctype DIR (c-struct 'G403))
(define-extern alphasort (make-c-func 'alphasort <c-int> (list (ptr <c-void>) (ptr <c-void>))))
(define-extern closedir (make-c-func 'closedir <c-int> (list (ptr <DIR>))))
(define-extern getdirentries (make-c-func 'getdirentries <c-int> (list <c-int> (ptr <c-char>) <c-int> (ptr <c-long>))))
(define-extern opendir (make-c-func 'opendir (ptr <DIR>) (list (ptr <c-char>))))
(define-extern __opendir2 (make-c-func '__opendir2 (ptr <DIR>) (list (ptr <c-char>) <c-int>)))
(define-extern readdir (make-c-func 'readdir (ptr (c-struct 'dirent)) (list (ptr <DIR>))))
(define-extern readdir_r (make-c-func 'readdir_r <c-int> (list (ptr <DIR>) (ptr (c-struct 'dirent)) (ptr (ptr (c-struct 'dirent))))))
(define-extern rewinddir (make-c-func 'rewinddir <c-void> (list (ptr <DIR>))))
(define-extern scandir (make-c-func 'scandir <c-int> (list (ptr <c-char>) (ptr (ptr (ptr (c-struct 'dirent)))) (make-c-func-ptr <c-int> (list (list '#f (ptr (c-struct 'dirent))))) (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>)) (list '#f (ptr <c-void>)))))))
(define-extern seekdir (make-c-func 'seekdir <c-void> (list (ptr <DIR>) <c-long>)))
(define-extern telldir (make-c-func 'telldir <c-long> (list (ptr <DIR>))))
(define-ctype IV <c-long>)
(define-ctype UV <c-ulong>)
(define-ctype NV <c-double>)
(define-ctype float_t <c-float>)
(define-ctype double_t <c-double>)
(define-enum _FP_NAN 1)
(define-enum _FP_INFINITE 2)
(define-enum _FP_ZERO 3)
(define-enum _FP_NORMAL 4)
(define-enum _FP_SUBNORMAL 5)
(define-enum _FP_SUPERNORMAL 6)
(define-extern __math_errhandling (make-c-func '__math_errhandling <c-uint> (list <c-void>)))
(define-extern __fpclassifyf (make-c-func '__fpclassifyf <c-int> (list <c-float>)))
(define-extern __fpclassifyd (make-c-func '__fpclassifyd <c-int> (list <c-double>)))
(define-extern __fpclassify (make-c-func '__fpclassify <c-int> (list <c-longdouble>)))
(define-inline-cfunc __inline_isnanf <c-int> (__x) (<c-float>) (call/cc (lambda (%return) (begin (%return (if (equal? (cast <real> __x) (cast <real> __x)) 0 1))))))
(define-inline-cfunc __inline_isnand <c-int> (__x) (<c-double>) (call/cc (lambda (%return) (begin (%return (if (equal? (cast <real> __x) (cast <real> __x)) 0 1))))))
(define-inline-cfunc __inline_isnan <c-int> (__x) (<c-longdouble>) (call/cc (lambda (%return) (begin (%return (if (equal? (cast <real> __x) (cast <real> __x)) 0 1))))))
(define-c-union G404)
(init-c-union! (c-union 'G404) (list (cons '__f <c-float>) (cons '__u <c-uint>)))
(define-inline-cfunc __inline_signbitf <c-int> (__x) (<c-float>) (call/cc (lambda (%return) (let* ((__u (make (c-union 'G404)))) (%return (cast <c-int> (ash (cast <integer> (raw-ref __u '__u)) (- 31))))))))
(define-c-union G405)
(init-c-union! (c-union 'G405) (list (cons '__f <c-double>) (cons '__u <c-ulonglong>)))
(define-inline-cfunc __inline_signbitd <c-int> (__x) (<c-double>) (call/cc (lambda (%return) (let* ((__u (make (c-union 'G405)))) (%return (cast <c-int> (ash (cast <integer> (raw-ref __u '__u)) (- 63))))))))
(define-c-struct G406)
(init-c-struct! (c-struct 'G406) (list (cons '__m <c-ulonglong>) (cons '__sexp <c-short>)))
(define-c-union G407)
(init-c-union! (c-union 'G407) (list (cons '__ld <c-longdouble>) (cons '__p (c-struct 'G406))))
(define-inline-cfunc __inline_signbit <c-int> (__x) (<c-longdouble>) (call/cc (lambda (%return) (let* ((__u (make (c-union 'G407)))) (%return (cast <c-int> (ash (cast <integer> (cast <c-uint> (raw-ref (raw-ref __u '__p) '__sexp))) (- 15))))))))
(define-extern acos (make-c-func 'acos <c-double> (list <c-double>)))
(define-extern acosf (make-c-func 'acosf <c-float> (list <c-float>)))
(define-extern asin (make-c-func 'asin <c-double> (list <c-double>)))
(define-extern asinf (make-c-func 'asinf <c-float> (list <c-float>)))
(define-extern atan (make-c-func 'atan <c-double> (list <c-double>)))
(define-extern atanf (make-c-func 'atanf <c-float> (list <c-float>)))
(define-extern atan2 (make-c-func 'atan2 <c-double> (list <c-double> <c-double>)))
(define-extern atan2f (make-c-func 'atan2f <c-float> (list <c-float> <c-float>)))
(define-extern cos (make-c-func 'cos <c-double> (list <c-double>)))
(define-extern cosf (make-c-func 'cosf <c-float> (list <c-float>)))
(define-extern sin (make-c-func 'sin <c-double> (list <c-double>)))
(define-extern sinf (make-c-func 'sinf <c-float> (list <c-float>)))
(define-extern tan (make-c-func 'tan <c-double> (list <c-double>)))
(define-extern tanf (make-c-func 'tanf <c-float> (list <c-float>)))
(define-extern acosh (make-c-func 'acosh <c-double> (list <c-double>)))
(define-extern acoshf (make-c-func 'acoshf <c-float> (list <c-float>)))
(define-extern asinh (make-c-func 'asinh <c-double> (list <c-double>)))
(define-extern asinhf (make-c-func 'asinhf <c-float> (list <c-float>)))
(define-extern atanh (make-c-func 'atanh <c-double> (list <c-double>)))
(define-extern atanhf (make-c-func 'atanhf <c-float> (list <c-float>)))
(define-extern cosh (make-c-func 'cosh <c-double> (list <c-double>)))
(define-extern coshf (make-c-func 'coshf <c-float> (list <c-float>)))
(define-extern sinh (make-c-func 'sinh <c-double> (list <c-double>)))
(define-extern sinhf (make-c-func 'sinhf <c-float> (list <c-float>)))
(define-extern tanh (make-c-func 'tanh <c-double> (list <c-double>)))
(define-extern tanhf (make-c-func 'tanhf <c-float> (list <c-float>)))
(define-extern exp (make-c-func 'exp <c-double> (list <c-double>)))
(define-extern expf (make-c-func 'expf <c-float> (list <c-float>)))
(define-extern exp2 (make-c-func 'exp2 <c-double> (list <c-double>)))
(define-extern exp2f (make-c-func 'exp2f <c-float> (list <c-float>)))
(define-extern expm1 (make-c-func 'expm1 <c-double> (list <c-double>)))
(define-extern expm1f (make-c-func 'expm1f <c-float> (list <c-float>)))
(define-extern log (make-c-func 'log <c-double> (list <c-double>)))
(define-extern logf (make-c-func 'logf <c-float> (list <c-float>)))
(define-extern log10 (make-c-func 'log10 <c-double> (list <c-double>)))
(define-extern log10f (make-c-func 'log10f <c-float> (list <c-float>)))
(define-extern log2 (make-c-func 'log2 <c-double> (list <c-double>)))
(define-extern log2f (make-c-func 'log2f <c-float> (list <c-float>)))
(define-extern log1p (make-c-func 'log1p <c-double> (list <c-double>)))
(define-extern log1pf (make-c-func 'log1pf <c-float> (list <c-float>)))
(define-extern logb (make-c-func 'logb <c-double> (list <c-double>)))
(define-extern logbf (make-c-func 'logbf <c-float> (list <c-float>)))
(define-extern modf (make-c-func 'modf <c-double> (list <c-double> (ptr <c-double>))))
(define-extern modff (make-c-func 'modff <c-float> (list <c-float> (ptr <c-float>))))
(define-extern ldexp (make-c-func 'ldexp <c-double> (list <c-double> <c-int>)))
(define-extern ldexpf (make-c-func 'ldexpf <c-float> (list <c-float> <c-int>)))
(define-extern frexp (make-c-func 'frexp <c-double> (list <c-double> (ptr <c-int>))))
(define-extern frexpf (make-c-func 'frexpf <c-float> (list <c-float> (ptr <c-int>))))
(define-extern ilogb (make-c-func 'ilogb <c-int> (list <c-double>)))
(define-extern ilogbf (make-c-func 'ilogbf <c-int> (list <c-float>)))
(define-extern scalbn (make-c-func 'scalbn <c-double> (list <c-double> <c-int>)))
(define-extern scalbnf (make-c-func 'scalbnf <c-float> (list <c-float> <c-int>)))
(define-extern scalbln (make-c-func 'scalbln <c-double> (list <c-double> <c-long>)))
(define-extern scalblnf (make-c-func 'scalblnf <c-float> (list <c-float> <c-long>)))
(define-extern fabs (make-c-func 'fabs <c-double> (list <c-double>)))
(define-extern fabsf (make-c-func 'fabsf <c-float> (list <c-float>)))
(define-extern cbrt (make-c-func 'cbrt <c-double> (list <c-double>)))
(define-extern cbrtf (make-c-func 'cbrtf <c-float> (list <c-float>)))
(define-extern hypot (make-c-func 'hypot <c-double> (list <c-double> <c-double>)))
(define-extern hypotf (make-c-func 'hypotf <c-float> (list <c-float> <c-float>)))
(define-extern pow (make-c-func 'pow <c-double> (list <c-double> <c-double>)))
(define-extern powf (make-c-func 'powf <c-float> (list <c-float> <c-float>)))
(define-extern sqrt (make-c-func 'sqrt <c-double> (list <c-double>)))
(define-extern sqrtf (make-c-func 'sqrtf <c-float> (list <c-float>)))
(define-extern erf (make-c-func 'erf <c-double> (list <c-double>)))
(define-extern erff (make-c-func 'erff <c-float> (list <c-float>)))
(define-extern erfc (make-c-func 'erfc <c-double> (list <c-double>)))
(define-extern erfcf (make-c-func 'erfcf <c-float> (list <c-float>)))
(define-extern lgamma (make-c-func 'lgamma <c-double> (list <c-double>)))
(define-extern lgammaf (make-c-func 'lgammaf <c-float> (list <c-float>)))
(define-extern tgamma (make-c-func 'tgamma <c-double> (list <c-double>)))
(define-extern tgammaf (make-c-func 'tgammaf <c-float> (list <c-float>)))
(define-extern ceil (make-c-func 'ceil <c-double> (list <c-double>)))
(define-extern ceilf (make-c-func 'ceilf <c-float> (list <c-float>)))
(define-extern floor (make-c-func 'floor <c-double> (list <c-double>)))
(define-extern floorf (make-c-func 'floorf <c-float> (list <c-float>)))
(define-extern nearbyint (make-c-func 'nearbyint <c-double> (list <c-double>)))
(define-extern nearbyintf (make-c-func 'nearbyintf <c-float> (list <c-float>)))
(define-extern rint (make-c-func 'rint <c-double> (list <c-double>)))
(define-extern rintf (make-c-func 'rintf <c-float> (list <c-float>)))
(define-extern lrint (make-c-func 'lrint <c-long> (list <c-double>)))
(define-extern lrintf (make-c-func 'lrintf <c-long> (list <c-float>)))
(define-extern llrint (make-c-func 'llrint <c-longlong> (list <c-double>)))
(define-extern llrintf (make-c-func 'llrintf <c-longlong> (list <c-float>)))
(define-extern round (make-c-func 'round <c-double> (list <c-double>)))
(define-extern roundf (make-c-func 'roundf <c-float> (list <c-float>)))
(define-extern lround (make-c-func 'lround <c-long> (list <c-double>)))
(define-extern lroundf (make-c-func 'lroundf <c-long> (list <c-float>)))
(define-extern llround (make-c-func 'llround <c-longlong> (list <c-double>)))
(define-extern llroundf (make-c-func 'llroundf <c-longlong> (list <c-float>)))
(define-extern trunc (make-c-func 'trunc <c-double> (list <c-double>)))
(define-extern truncf (make-c-func 'truncf <c-float> (list <c-float>)))
(define-extern fmod (make-c-func 'fmod <c-double> (list <c-double> <c-double>)))
(define-extern fmodf (make-c-func 'fmodf <c-float> (list <c-float> <c-float>)))
(define-extern remainder (make-c-func 'remainder <c-double> (list <c-double> <c-double>)))
(define-extern remainderf (make-c-func 'remainderf <c-float> (list <c-float> <c-float>)))
(define-extern remquo (make-c-func 'remquo <c-double> (list <c-double> <c-double> (ptr <c-int>))))
(define-extern remquof (make-c-func 'remquof <c-float> (list <c-float> <c-float> (ptr <c-int>))))
(define-extern copysign (make-c-func 'copysign <c-double> (list <c-double> <c-double>)))
(define-extern copysignf (make-c-func 'copysignf <c-float> (list <c-float> <c-float>)))
(define-extern nan (make-c-func 'nan <c-double> (list (ptr <c-char>))))
(define-extern nanf (make-c-func 'nanf <c-float> (list (ptr <c-char>))))
(define-extern nextafter (make-c-func 'nextafter <c-double> (list <c-double> <c-double>)))
(define-extern nextafterf (make-c-func 'nextafterf <c-float> (list <c-float> <c-float>)))
(define-extern fdim (make-c-func 'fdim <c-double> (list <c-double> <c-double>)))
(define-extern fdimf (make-c-func 'fdimf <c-float> (list <c-float> <c-float>)))
(define-extern fmax (make-c-func 'fmax <c-double> (list <c-double> <c-double>)))
(define-extern fmaxf (make-c-func 'fmaxf <c-float> (list <c-float> <c-float>)))
(define-extern fmin (make-c-func 'fmin <c-double> (list <c-double> <c-double>)))
(define-extern fminf (make-c-func 'fminf <c-float> (list <c-float> <c-float>)))
(define-extern fma (make-c-func 'fma <c-double> (list <c-double> <c-double> <c-double>)))
(define-extern fmaf (make-c-func 'fmaf <c-float> (list <c-float> <c-float> <c-float>)))
(define-extern acosl (make-c-func 'acosl <c-longdouble> (list <c-longdouble>)))
(define-extern asinl (make-c-func 'asinl <c-longdouble> (list <c-longdouble>)))
(define-extern atanl (make-c-func 'atanl <c-longdouble> (list <c-longdouble>)))
(define-extern atan2l (make-c-func 'atan2l <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define-extern cosl (make-c-func 'cosl <c-longdouble> (list <c-longdouble>)))
(define-extern sinl (make-c-func 'sinl <c-longdouble> (list <c-longdouble>)))
(define-extern tanl (make-c-func 'tanl <c-longdouble> (list <c-longdouble>)))
(define-extern acoshl (make-c-func 'acoshl <c-longdouble> (list <c-longdouble>)))
(define-extern asinhl (make-c-func 'asinhl <c-longdouble> (list <c-longdouble>)))
(define-extern atanhl (make-c-func 'atanhl <c-longdouble> (list <c-longdouble>)))
(define-extern coshl (make-c-func 'coshl <c-longdouble> (list <c-longdouble>)))
(define-extern sinhl (make-c-func 'sinhl <c-longdouble> (list <c-longdouble>)))
(define-extern tanhl (make-c-func 'tanhl <c-longdouble> (list <c-longdouble>)))
(define-extern expl (make-c-func 'expl <c-longdouble> (list <c-longdouble>)))
(define-extern exp2l (make-c-func 'exp2l <c-longdouble> (list <c-longdouble>)))
(define-extern expm1l (make-c-func 'expm1l <c-longdouble> (list <c-longdouble>)))
(define-extern logl (make-c-func 'logl <c-longdouble> (list <c-longdouble>)))
(define-extern log10l (make-c-func 'log10l <c-longdouble> (list <c-longdouble>)))
(define-extern log2l (make-c-func 'log2l <c-longdouble> (list <c-longdouble>)))
(define-extern log1pl (make-c-func 'log1pl <c-longdouble> (list <c-longdouble>)))
(define-extern logbl (make-c-func 'logbl <c-longdouble> (list <c-longdouble>)))
(define-extern modfl (make-c-func 'modfl <c-longdouble> (list <c-longdouble> (ptr <c-longdouble>))))
(define-extern ldexpl (make-c-func 'ldexpl <c-longdouble> (list <c-longdouble> <c-int>)))
(define-extern frexpl (make-c-func 'frexpl <c-longdouble> (list <c-longdouble> (ptr <c-int>))))
(define-extern ilogbl (make-c-func 'ilogbl <c-int> (list <c-longdouble>)))
(define-extern scalbnl (make-c-func 'scalbnl <c-longdouble> (list <c-longdouble> <c-int>)))
(define-extern scalblnl (make-c-func 'scalblnl <c-longdouble> (list <c-longdouble> <c-long>)))
(define-extern fabsl (make-c-func 'fabsl <c-longdouble> (list <c-longdouble>)))
(define-extern cbrtl (make-c-func 'cbrtl <c-longdouble> (list <c-longdouble>)))
(define-extern hypotl (make-c-func 'hypotl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define-extern powl (make-c-func 'powl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define-extern sqrtl (make-c-func 'sqrtl <c-longdouble> (list <c-longdouble>)))
(define-extern erfl (make-c-func 'erfl <c-longdouble> (list <c-longdouble>)))
(define-extern erfcl (make-c-func 'erfcl <c-longdouble> (list <c-longdouble>)))
(define-extern lgammal (make-c-func 'lgammal <c-longdouble> (list <c-longdouble>)))
(define-extern tgammal (make-c-func 'tgammal <c-longdouble> (list <c-longdouble>)))
(define-extern ceill (make-c-func 'ceill <c-longdouble> (list <c-longdouble>)))
(define-extern floorl (make-c-func 'floorl <c-longdouble> (list <c-longdouble>)))
(define-extern nearbyintl (make-c-func 'nearbyintl <c-longdouble> (list <c-longdouble>)))
(define-extern rintl (make-c-func 'rintl <c-longdouble> (list <c-longdouble>)))
(define-extern lrintl (make-c-func 'lrintl <c-long> (list <c-longdouble>)))
(define-extern llrintl (make-c-func 'llrintl <c-longlong> (list <c-longdouble>)))
(define-extern roundl (make-c-func 'roundl <c-longdouble> (list <c-longdouble>)))
(define-extern lroundl (make-c-func 'lroundl <c-long> (list <c-longdouble>)))
(define-extern llroundl (make-c-func 'llroundl <c-longlong> (list <c-longdouble>)))
(define-extern truncl (make-c-func 'truncl <c-longdouble> (list <c-longdouble>)))
(define-extern fmodl (make-c-func 'fmodl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define-extern remainderl (make-c-func 'remainderl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define-extern remquol (make-c-func 'remquol <c-longdouble> (list <c-longdouble> <c-longdouble> (ptr <c-int>))))
(define-extern copysignl (make-c-func 'copysignl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define-extern nanl (make-c-func 'nanl <c-longdouble> (list (ptr <c-char>))))
(define-extern nextafterl (make-c-func 'nextafterl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define-extern nexttoward (make-c-func 'nexttoward <c-double> (list <c-double> <c-longdouble>)))
(define-extern nexttowardf (make-c-func 'nexttowardf <c-float> (list <c-float> <c-longdouble>)))
(define-extern nexttowardl (make-c-func 'nexttowardl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define-extern fdiml (make-c-func 'fdiml <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define-extern fmaxl (make-c-func 'fmaxl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define-extern fminl (make-c-func 'fminl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define-extern fmal (make-c-func 'fmal <c-longdouble> (list <c-longdouble> <c-longdouble> <c-longdouble>)))
(define-extern __inf (make-c-func '__inf <c-double> (list <c-void>)))
(define-extern __inff (make-c-func '__inff <c-float> (list <c-void>)))
(define-extern __infl (make-c-func '__infl <c-longdouble> (list <c-void>)))
(define-extern __nan (make-c-func '__nan <c-float> (list <c-void>)))
(define-extern j0 (make-c-func 'j0 <c-double> (list <c-double>)))
(define-extern j1 (make-c-func 'j1 <c-double> (list <c-double>)))
(define-extern jn (make-c-func 'jn <c-double> (list <c-int> <c-double>)))
(define-extern y0 (make-c-func 'y0 <c-double> (list <c-double>)))
(define-extern y1 (make-c-func 'y1 <c-double> (list <c-double>)))
(define-extern yn (make-c-func 'yn <c-double> (list <c-int> <c-double>)))
(define-extern scalb (make-c-func 'scalb <c-double> (list <c-double> <c-double>)))
(define-extern signgam (deref (cast (ptr <c-int>) (c-lookup-symbol 'signgam))))
(define-extern rinttol (make-c-func 'rinttol <c-long> (list <c-double>)))
(define-extern roundtol (make-c-func 'roundtol <c-long> (list <c-double>)))
(define-c-struct exception)
(init-c-struct! (c-struct 'exception) (list (cons 'type <c-int>) (cons 'name (ptr <c-char>)) (cons 'arg1 <c-double>) (cons 'arg2 <c-double>) (cons 'retval <c-double>)))
(define-extern finite (make-c-func 'finite <c-int> (list <c-double>)))
(define-extern gamma (make-c-func 'gamma <c-double> (list <c-double>)))
(define-extern matherr (make-c-func 'matherr <c-int> (list (ptr (c-struct 'exception)))))
(define-extern significand (make-c-func 'significand <c-double> (list <c-double>)))
(define-extern drem (make-c-func 'drem <c-double> (list <c-double> <c-double>)))
(define-c-struct RExC_state_t)
(define-ctype STRLEN <size_t>)
(define-c-struct op)
(define-ctype OP (c-struct 'op))
(define-c-struct cop)
(define-ctype COP (c-struct 'cop))
(define-c-struct unop)
(define-ctype UNOP (c-struct 'unop))
(define-c-struct binop)
(define-ctype BINOP (c-struct 'binop))
(define-c-struct listop)
(define-ctype LISTOP (c-struct 'listop))
(define-c-struct logop)
(define-ctype LOGOP (c-struct 'logop))
(define-c-struct pmop)
(define-ctype PMOP (c-struct 'pmop))
(define-c-struct svop)
(define-ctype SVOP (c-struct 'svop))
(define-c-struct padop)
(define-ctype PADOP (c-struct 'padop))
(define-c-struct pvop)
(define-ctype PVOP (c-struct 'pvop))
(define-c-struct loop)
(define-ctype LOOP (c-struct 'loop))
(define-c-struct interpreter)
(define-ctype PerlInterpreter (c-struct 'interpreter))
(define-c-struct sv)
(define-ctype SV (c-struct 'sv))
(define-c-struct av)
(define-ctype AV (c-struct 'av))
(define-c-struct hv)
(define-ctype HV (c-struct 'hv))
(define-c-struct cv)
(define-ctype CV (c-struct 'cv))
(define-c-struct regexp)
(define-ctype REGEXP (c-struct 'regexp))
(define-c-struct gp)
(define-ctype GP (c-struct 'gp))
(define-c-struct gv)
(define-ctype GV (c-struct 'gv))
(define-c-struct io)
(define-ctype IO (c-struct 'io))
(define-c-struct context)
(define-ctype PERL_CONTEXT (c-struct 'context))
(define-c-struct block)
(define-ctype BLOCK (c-struct 'block))
(define-c-struct magic)
(define-ctype MAGIC (c-struct 'magic))
(define-c-struct xrv)
(define-ctype XRV (c-struct 'xrv))
(define-c-struct xpv)
(define-ctype XPV (c-struct 'xpv))
(define-c-struct xpviv)
(define-ctype XPVIV (c-struct 'xpviv))
(define-c-struct xpvuv)
(define-ctype XPVUV (c-struct 'xpvuv))
(define-c-struct xpvnv)
(define-ctype XPVNV (c-struct 'xpvnv))
(define-c-struct xpvmg)
(define-ctype XPVMG (c-struct 'xpvmg))
(define-c-struct xpvlv)
(define-ctype XPVLV (c-struct 'xpvlv))
(define-c-struct xpvav)
(define-ctype XPVAV (c-struct 'xpvav))
(define-c-struct xpvhv)
(define-ctype XPVHV (c-struct 'xpvhv))
(define-c-struct xpvgv)
(define-ctype XPVGV (c-struct 'xpvgv))
(define-c-struct xpvcv)
(define-ctype XPVCV (c-struct 'xpvcv))
(define-c-struct xpvbm)
(define-ctype XPVBM (c-struct 'xpvbm))
(define-c-struct xpvfm)
(define-ctype XPVFM (c-struct 'xpvfm))
(define-c-struct xpvio)
(define-ctype XPVIO (c-struct 'xpvio))
(define-c-struct mgvtbl)
(define-ctype MGVTBL (c-struct 'mgvtbl))
(define-c-union any)
(define-ctype ANY (c-union 'any))
(define-c-struct ptr_tbl_ent)
(define-ctype PTR_TBL_ENT_t (c-struct 'ptr_tbl_ent))
(define-c-struct ptr_tbl)
(define-ctype PTR_TBL_t (c-struct 'ptr_tbl))
(define-c-struct clone_params)
(define-ctype CLONE_PARAMS (c-struct 'clone_params))
(define-extern imaxabs (make-c-func 'imaxabs <intmax_t> (list <intmax_t>)))
(define-c-struct G408)
(init-c-struct! (c-struct 'G408) (list (cons 'quot <intmax_t>) (cons 'rem <intmax_t>)))
(define-ctype imaxdiv_t (c-struct 'G408))
(define-extern imaxdiv (make-c-func 'imaxdiv <imaxdiv_t> (list <intmax_t> <intmax_t>)))
(define-extern strtoimax (make-c-func 'strtoimax <intmax_t> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define-extern strtoumax (make-c-func 'strtoumax <uintmax_t> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define-extern wcstoimax (make-c-func 'wcstoimax <intmax_t> (list (ptr <wchar_t>) (ptr (ptr <wchar_t>)) <c-int>)))
(define-extern wcstoumax (make-c-func 'wcstoumax <uintmax_t> (list (ptr <wchar_t>) (ptr (ptr <wchar_t>)) <c-int>)))
(define-ctype I8 <c-char>)
(define-ctype U8 <c-uchar>)
(define-ctype I16 <c-short>)
(define-ctype U16 <c-ushort>)
(define-ctype I32 <c-long>)
(define-ctype U32 <c-ulong>)
(define-ctype line_t <U32>)
(define-c-struct sched_param)
(init-c-struct! (c-struct 'sched_param) (list (cons 'sched_priority <c-int>) (cons 'opaque (make-c-array <c-char> 4))))
(define-extern sched_yield (make-c-func 'sched_yield <c-int> (list <c-void>)))
(define-extern sched_get_priority_min (make-c-func 'sched_get_priority_min <c-int> (list <c-int>)))
(define-extern sched_get_priority_max (make-c-func 'sched_get_priority_max <c-int> (list <c-int>)))
(define-ctype mach_port_t <__darwin_mach_port_t>)
(define-extern pthread_atfork (make-c-func 'pthread_atfork <c-int> (list (make-c-func-ptr <c-void> (list (list '#f <c-void>))) (make-c-func-ptr <c-void> (list (list '#f <c-void>))) (make-c-func-ptr <c-void> (list (list '#f <c-void>))))))
(define-extern pthread_attr_destroy (make-c-func 'pthread_attr_destroy <c-int> (list (ptr <pthread_attr_t>))))
(define-extern pthread_attr_getdetachstate (make-c-func 'pthread_attr_getdetachstate <c-int> (list (ptr <pthread_attr_t>) (ptr <c-int>))))
(define-extern pthread_attr_getguardsize (make-c-func 'pthread_attr_getguardsize <c-int> (list (ptr <pthread_attr_t>) (ptr <size_t>))))
(define-extern pthread_attr_getinheritsched (make-c-func 'pthread_attr_getinheritsched <c-int> (list (ptr <pthread_attr_t>) (ptr <c-int>))))
(define-extern pthread_attr_getschedparam (make-c-func 'pthread_attr_getschedparam <c-int> (list (ptr <pthread_attr_t>) (ptr (c-struct 'sched_param)))))
(define-extern pthread_attr_getschedpolicy (make-c-func 'pthread_attr_getschedpolicy <c-int> (list (ptr <pthread_attr_t>) (ptr <c-int>))))
(define-extern pthread_attr_getscope (make-c-func 'pthread_attr_getscope <c-int> (list (ptr <pthread_attr_t>) (ptr <c-int>))))
(define-extern pthread_attr_getstack (make-c-func 'pthread_attr_getstack <c-int> (list (ptr <pthread_attr_t>) (ptr (ptr <c-void>)) (ptr <size_t>))))
(define-extern pthread_attr_getstackaddr (make-c-func 'pthread_attr_getstackaddr <c-int> (list (ptr <pthread_attr_t>) (ptr (ptr <c-void>)))))
(define-extern pthread_attr_getstacksize (make-c-func 'pthread_attr_getstacksize <c-int> (list (ptr <pthread_attr_t>) (ptr <size_t>))))
(define-extern pthread_attr_init (make-c-func 'pthread_attr_init <c-int> (list (ptr <pthread_attr_t>))))
(define-extern pthread_attr_setdetachstate (make-c-func 'pthread_attr_setdetachstate <c-int> (list (ptr <pthread_attr_t>) <c-int>)))
(define-extern pthread_attr_setguardsize (make-c-func 'pthread_attr_setguardsize <c-int> (list (ptr <pthread_attr_t>) <size_t>)))
(define-extern pthread_attr_setinheritsched (make-c-func 'pthread_attr_setinheritsched <c-int> (list (ptr <pthread_attr_t>) <c-int>)))
(define-extern pthread_attr_setschedparam (make-c-func 'pthread_attr_setschedparam <c-int> (list (ptr <pthread_attr_t>) (ptr (c-struct 'sched_param)))))
(define-extern pthread_attr_setschedpolicy (make-c-func 'pthread_attr_setschedpolicy <c-int> (list (ptr <pthread_attr_t>) <c-int>)))
(define-extern pthread_attr_setscope (make-c-func 'pthread_attr_setscope <c-int> (list (ptr <pthread_attr_t>) <c-int>)))
(define-extern pthread_attr_setstack (make-c-func 'pthread_attr_setstack <c-int> (list (ptr <pthread_attr_t>) (ptr <c-void>) <size_t>)))
(define-extern pthread_attr_setstackaddr (make-c-func 'pthread_attr_setstackaddr <c-int> (list (ptr <pthread_attr_t>) (ptr <c-void>))))
(define-extern pthread_attr_setstacksize (make-c-func 'pthread_attr_setstacksize <c-int> (list (ptr <pthread_attr_t>) <size_t>)))
(define-extern pthread_cancel (make-c-func 'pthread_cancel <c-int> (list <pthread_t>)))
(define-extern pthread_cond_broadcast (make-c-func 'pthread_cond_broadcast <c-int> (list (ptr <pthread_cond_t>))))
(define-extern pthread_cond_destroy (make-c-func 'pthread_cond_destroy <c-int> (list (ptr <pthread_cond_t>))))
(define-extern pthread_cond_init (make-c-func 'pthread_cond_init <c-int> (list (ptr <pthread_cond_t>) (ptr <pthread_condattr_t>))))
(define-extern pthread_cond_signal (make-c-func 'pthread_cond_signal <c-int> (list (ptr <pthread_cond_t>))))
(define-extern pthread_cond_timedwait (make-c-func 'pthread_cond_timedwait <c-int> (list (ptr <pthread_cond_t>) (ptr <pthread_mutex_t>) (ptr (c-struct 'timespec)))))
(define-extern pthread_cond_wait (make-c-func 'pthread_cond_wait <c-int> (list (ptr <pthread_cond_t>) (ptr <pthread_mutex_t>))))
(define-extern pthread_condattr_destroy (make-c-func 'pthread_condattr_destroy <c-int> (list (ptr <pthread_condattr_t>))))
(define-extern pthread_condattr_getpshared (make-c-func 'pthread_condattr_getpshared <c-int> (list (ptr <pthread_condattr_t>) (ptr <c-int>))))
(define-extern pthread_condattr_init (make-c-func 'pthread_condattr_init <c-int> (list (ptr <pthread_condattr_t>))))
(define-extern pthread_condattr_setpshared (make-c-func 'pthread_condattr_setpshared <c-int> (list (ptr <pthread_condattr_t>) <c-int>)))
(define-extern pthread_create (make-c-func 'pthread_create <c-int> (list (ptr <pthread_t>) (ptr <pthread_attr_t>) (make-c-func-ptr (ptr <c-void>) (list (list '#f (ptr <c-void>)))) (ptr <c-void>))))
(define-extern pthread_detach (make-c-func 'pthread_detach <c-int> (list <pthread_t>)))
(define-extern pthread_equal (make-c-func 'pthread_equal <c-int> (list <pthread_t> <pthread_t>)))
(define-extern pthread_exit (make-c-func 'pthread_exit <c-void> (list (ptr <c-void>))))
(define-extern pthread_getconcurrency (make-c-func 'pthread_getconcurrency <c-int> (list <c-void>)))
(define-extern pthread_getschedparam (make-c-func 'pthread_getschedparam <c-int> (list <pthread_t> (ptr <c-int>) (ptr (c-struct 'sched_param)))))
(define-extern pthread_getspecific (make-c-func 'pthread_getspecific (ptr <c-void>) (list <pthread_key_t>)))
(define-extern pthread_join (make-c-func 'pthread_join <c-int> (list <pthread_t> (ptr (ptr <c-void>)))))
(define-extern pthread_key_create (make-c-func 'pthread_key_create <c-int> (list (ptr <pthread_key_t>) (make-c-func-ptr <c-void> (list (list '#f (ptr <c-void>)))))))
(define-extern pthread_key_delete (make-c-func 'pthread_key_delete <c-int> (list <pthread_key_t>)))
(define-extern pthread_mutex_destroy (make-c-func 'pthread_mutex_destroy <c-int> (list (ptr <pthread_mutex_t>))))
(define-extern pthread_mutex_getprioceiling (make-c-func 'pthread_mutex_getprioceiling <c-int> (list (ptr <pthread_mutex_t>) (ptr <c-int>))))
(define-extern pthread_mutex_init (make-c-func 'pthread_mutex_init <c-int> (list (ptr <pthread_mutex_t>) (ptr <pthread_mutexattr_t>))))
(define-extern pthread_mutex_lock (make-c-func 'pthread_mutex_lock <c-int> (list (ptr <pthread_mutex_t>))))
(define-extern pthread_mutex_setprioceiling (make-c-func 'pthread_mutex_setprioceiling <c-int> (list (ptr <pthread_mutex_t>) <c-int> (ptr <c-int>))))
(define-extern pthread_mutex_trylock (make-c-func 'pthread_mutex_trylock <c-int> (list (ptr <pthread_mutex_t>))))
(define-extern pthread_mutex_unlock (make-c-func 'pthread_mutex_unlock <c-int> (list (ptr <pthread_mutex_t>))))
(define-extern pthread_mutexattr_destroy (make-c-func 'pthread_mutexattr_destroy <c-int> (list (ptr <pthread_mutexattr_t>))))
(define-extern pthread_mutexattr_getprioceiling (make-c-func 'pthread_mutexattr_getprioceiling <c-int> (list (ptr <pthread_mutexattr_t>) (ptr <c-int>))))
(define-extern pthread_mutexattr_getprotocol (make-c-func 'pthread_mutexattr_getprotocol <c-int> (list (ptr <pthread_mutexattr_t>) (ptr <c-int>))))
(define-extern pthread_mutexattr_getpshared (make-c-func 'pthread_mutexattr_getpshared <c-int> (list (ptr <pthread_mutexattr_t>) (ptr <c-int>))))
(define-extern pthread_mutexattr_gettype (make-c-func 'pthread_mutexattr_gettype <c-int> (list (ptr <pthread_mutexattr_t>) (ptr <c-int>))))
(define-extern pthread_mutexattr_init (make-c-func 'pthread_mutexattr_init <c-int> (list (ptr <pthread_mutexattr_t>))))
(define-extern pthread_mutexattr_setprioceiling (make-c-func 'pthread_mutexattr_setprioceiling <c-int> (list (ptr <pthread_mutexattr_t>) <c-int>)))
(define-extern pthread_mutexattr_setprotocol (make-c-func 'pthread_mutexattr_setprotocol <c-int> (list (ptr <pthread_mutexattr_t>) <c-int>)))
(define-extern pthread_mutexattr_setpshared (make-c-func 'pthread_mutexattr_setpshared <c-int> (list (ptr <pthread_mutexattr_t>) <c-int>)))
(define-extern pthread_mutexattr_settype (make-c-func 'pthread_mutexattr_settype <c-int> (list (ptr <pthread_mutexattr_t>) <c-int>)))
(define-extern pthread_once (make-c-func 'pthread_once <c-int> (list (ptr <pthread_once_t>) (make-c-func-ptr <c-void> (list (list '#f <c-void>))))))
(define-extern pthread_rwlock_destroy (make-c-func 'pthread_rwlock_destroy <c-int> (list (ptr <pthread_rwlock_t>))))
(define-extern pthread_rwlock_init (make-c-func 'pthread_rwlock_init <c-int> (list (ptr <pthread_rwlock_t>) (ptr <pthread_rwlockattr_t>))))
(define-extern pthread_rwlock_rdlock (make-c-func 'pthread_rwlock_rdlock <c-int> (list (ptr <pthread_rwlock_t>))))
(define-extern pthread_rwlock_tryrdlock (make-c-func 'pthread_rwlock_tryrdlock <c-int> (list (ptr <pthread_rwlock_t>))))
(define-extern pthread_rwlock_trywrlock (make-c-func 'pthread_rwlock_trywrlock <c-int> (list (ptr <pthread_rwlock_t>))))
(define-extern pthread_rwlock_unlock (make-c-func 'pthread_rwlock_unlock <c-int> (list (ptr <pthread_rwlock_t>))))
(define-extern pthread_rwlock_wrlock (make-c-func 'pthread_rwlock_wrlock <c-int> (list (ptr <pthread_rwlock_t>))))
(define-extern pthread_rwlockattr_destroy (make-c-func 'pthread_rwlockattr_destroy <c-int> (list (ptr <pthread_rwlockattr_t>))))
(define-extern pthread_rwlockattr_getpshared (make-c-func 'pthread_rwlockattr_getpshared <c-int> (list (ptr <pthread_rwlockattr_t>) (ptr <c-int>))))
(define-extern pthread_rwlockattr_init (make-c-func 'pthread_rwlockattr_init <c-int> (list (ptr <pthread_rwlockattr_t>))))
(define-extern pthread_rwlockattr_setpshared (make-c-func 'pthread_rwlockattr_setpshared <c-int> (list (ptr <pthread_rwlockattr_t>) <c-int>)))
(define-extern pthread_self (make-c-func 'pthread_self <pthread_t> (list <c-void>)))
(define-extern pthread_setcancelstate (make-c-func 'pthread_setcancelstate <c-int> (list <c-int> (ptr <c-int>))))
(define-extern pthread_setcanceltype (make-c-func 'pthread_setcanceltype <c-int> (list <c-int> (ptr <c-int>))))
(define-extern pthread_setconcurrency (make-c-func 'pthread_setconcurrency <c-int> (list <c-int>)))
(define-extern pthread_setschedparam (make-c-func 'pthread_setschedparam <c-int> (list <pthread_t> <c-int> (ptr (c-struct 'sched_param)))))
(define-extern pthread_setspecific (make-c-func 'pthread_setspecific <c-int> (list <pthread_key_t> (ptr <c-void>))))
(define-extern pthread_testcancel (make-c-func 'pthread_testcancel <c-void> (list <c-void>)))
(define-extern pthread_is_threaded_np (make-c-func 'pthread_is_threaded_np <c-int> (list <c-void>)))
(define-extern pthread_main_np (make-c-func 'pthread_main_np <c-int> (list <c-void>)))
(define-extern pthread_mach_thread_np (make-c-func 'pthread_mach_thread_np <mach_port_t> (list <pthread_t>)))
(define-extern pthread_get_stacksize_np (make-c-func 'pthread_get_stacksize_np <size_t> (list <pthread_t>)))
(define-extern pthread_get_stackaddr_np (make-c-func 'pthread_get_stackaddr_np (ptr <c-void>) (list <pthread_t>)))
(define-extern pthread_cond_signal_thread_np (make-c-func 'pthread_cond_signal_thread_np <c-int> (list (ptr <pthread_cond_t>) <pthread_t>)))
(define-extern pthread_cond_timedwait_relative_np (make-c-func 'pthread_cond_timedwait_relative_np <c-int> (list (ptr <pthread_cond_t>) (ptr <pthread_mutex_t>) (ptr (c-struct 'timespec)))))
(define-extern pthread_create_suspended_np (make-c-func 'pthread_create_suspended_np <c-int> (list (ptr <pthread_t>) (ptr <pthread_attr_t>) (make-c-func-ptr (ptr <c-void>) (list (list '#f (ptr <c-void>)))) (ptr <c-void>))))
(define-extern pthread_kill (make-c-func 'pthread_kill <c-int> (list <pthread_t> <c-int>)))
(define-extern pthread_sigmask (make-c-func 'pthread_sigmask <c-int> (list <c-int> (ptr <sigset_t>) (ptr <sigset_t>))))
(define-extern pthread_yield_np (make-c-func 'pthread_yield_np <c-void> (list <c-void>)))
(define-ctype perl_os_thread <pthread_t>)
(define-ctype perl_mutex <pthread_mutex_t>)
(define-ctype perl_cond <pthread_cond_t>)
(define-ctype perl_key <pthread_key_t>)
(init-c-union! (c-union 'any) (list (cons 'any_ptr (ptr <c-void>)) (cons 'any_i32 <I32>) (cons 'any_iv <IV>) (cons 'any_long <c-long>) (cons 'any_bool <c-char>) (cons 'any_dptr (make-c-func-ptr <c-void> (list (list '#f (ptr <c-void>))))) (cons 'any_dxptr (make-c-func-ptr <c-void> (list (list 'my_perl (ptr <PerlInterpreter>)) (list '#f (ptr <c-void>)))))))
(define-ctype filter_t (make-c-func-ptr <I32> (list (ptr <PerlInterpreter>) <c-int> (ptr <SV>) <c-int>)))
(define-ctype fpos_t <__darwin_off_t>)
(define-c-struct __sbuf)
(init-c-struct! (c-struct '__sbuf) (list (cons '_base (ptr <c-uchar>)) (cons '_size <c-int>)))
(define-c-struct __sFILEX)
(define-c-struct __sFILE)
(init-c-struct! (c-struct '__sFILE) (list (cons '_p (ptr <c-uchar>)) (cons '_r <c-int>) (cons '_w <c-int>) (cons '_flags <c-short>) (cons '_file <c-short>) (cons '_bf (c-struct '__sbuf)) (cons '_lbfsize <c-int>) (cons '_cookie (ptr <c-void>)) (cons '_close (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>))))) (cons '_read (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>)) (list '#f (ptr <c-char>)) (list '#f <c-int>)))) (cons '_seek (make-c-func-ptr <fpos_t> (list (list '#f (ptr <c-void>)) (list '#f <fpos_t>) (list '#f <c-int>)))) (cons '_write (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>)) (list '#f (ptr <c-char>)) (list '#f <c-int>)))) (cons '_ub (c-struct '__sbuf)) (cons '_extra (ptr (c-struct '__sFILEX))) (cons '_ur <c-int>) (cons '_ubuf (make-c-array <c-uchar> 3)) (cons '_nbuf (make-c-array <c-uchar> 1)) (cons '_lb (c-struct '__sbuf)) (cons '_blksize <c-int>) (cons '_offset <fpos_t>)))
(define-ctype FILE (c-struct '__sFILE))
(define-extern __sF (deref (cast (ptr (make-c-array <FILE> #f)) (c-lookup-symbol '__sF))))
(define-extern clearerr (make-c-func 'clearerr <c-void> (list (ptr <FILE>))))
(define-extern fclose (make-c-func 'fclose <c-int> (list (ptr <FILE>))))
(define-extern feof (make-c-func 'feof <c-int> (list (ptr <FILE>))))
(define-extern ferror (make-c-func 'ferror <c-int> (list (ptr <FILE>))))
(define-extern fflush (make-c-func 'fflush <c-int> (list (ptr <FILE>))))
(define-extern fgetc (make-c-func 'fgetc <c-int> (list (ptr <FILE>))))
(define-extern fgetpos (make-c-func 'fgetpos <c-int> (list (ptr <FILE>) (ptr <fpos_t>))))
(define-extern fgets (make-c-func 'fgets (ptr <c-char>) (list (ptr <c-char>) <c-int> (ptr <FILE>))))
(define-extern fopen (make-c-func 'fopen (ptr <FILE>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern fprintf (make-c-func-vaargs 'fprintf <c-int> (list (ptr <FILE>) (ptr <c-char>))))
(define-extern fputc (make-c-func 'fputc <c-int> (list <c-int> (ptr <FILE>))))
(define-extern fputs (make-c-func 'fputs <c-int> (list (ptr <c-char>) (ptr <FILE>))))
(define-extern fread (make-c-func 'fread <size_t> (list (ptr <c-void>) <size_t> <size_t> (ptr <FILE>))))
(define-extern freopen (make-c-func 'freopen (ptr <FILE>) (list (ptr <c-char>) (ptr <c-char>) (ptr <FILE>))))
(define-extern fscanf (make-c-func-vaargs 'fscanf <c-int> (list (ptr <FILE>) (ptr <c-char>))))
(define-extern fseek (make-c-func 'fseek <c-int> (list (ptr <FILE>) <c-long> <c-int>)))
(define-extern fsetpos (make-c-func 'fsetpos <c-int> (list (ptr <FILE>) (ptr <fpos_t>))))
(define-extern ftell (make-c-func 'ftell <c-long> (list (ptr <FILE>))))
(define-extern fwrite (make-c-func 'fwrite <size_t> (list (ptr <c-void>) <size_t> <size_t> (ptr <FILE>))))
(define-extern getc (make-c-func 'getc <c-int> (list (ptr <FILE>))))
(define-extern getchar (make-c-func 'getchar <c-int> (list <c-void>)))
(define-extern gets (make-c-func 'gets (ptr <c-char>) (list (ptr <c-char>))))
(define-extern sys_nerr (deref (cast (ptr <c-int>) (c-lookup-symbol 'sys_nerr))))
(define-extern sys_errlist (deref (cast (ptr (make-c-array (ptr <c-char>) #f)) (c-lookup-symbol 'sys_errlist))))
(define-extern perror (make-c-func 'perror <c-void> (list (ptr <c-char>))))
(define-extern printf (make-c-func-vaargs 'printf <c-int> (list (ptr <c-char>))))
(define-extern putc (make-c-func 'putc <c-int> (list <c-int> (ptr <FILE>))))
(define-extern putchar (make-c-func 'putchar <c-int> (list <c-int>)))
(define-extern puts (make-c-func 'puts <c-int> (list (ptr <c-char>))))
(define-extern remove (make-c-func 'remove <c-int> (list (ptr <c-char>))))
(define-extern rename (make-c-func 'rename <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern rewind (make-c-func 'rewind <c-void> (list (ptr <FILE>))))
(define-extern scanf (make-c-func-vaargs 'scanf <c-int> (list (ptr <c-char>))))
(define-extern setbuf (make-c-func 'setbuf <c-void> (list (ptr <FILE>) (ptr <c-char>))))
(define-extern setvbuf (make-c-func 'setvbuf <c-int> (list (ptr <FILE>) (ptr <c-char>) <c-int> <size_t>)))
(define-extern sprintf (make-c-func-vaargs 'sprintf <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern sscanf (make-c-func-vaargs 'sscanf <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define-extern tmpfile (make-c-func 'tmpfile (ptr <FILE>) (list <c-void>)))
(define-extern tmpnam (make-c-func 'tmpnam (ptr <c-char>) (list (ptr <c-char>))))
(define-extern ungetc (make-c-func 'ungetc <c-int> (list <c-int> (ptr <FILE>))))
(define-extern vfprintf (make-c-func 'vfprintf <c-int> (list (ptr <FILE>) (ptr <c-char>) <va_list>)))
(define-extern vprintf (make-c-func 'vprintf <c-int> (list (ptr <c-char>) <va_list>)))
(define-extern vsprintf (make-c-func 'vsprintf <c-int> (list (ptr <c-char>) (ptr <c-char>) <va_list>)))
(define-extern asprintf (make-c-func-vaargs 'asprintf <c-int> (list (ptr (ptr <c-char>)) (ptr <c-char>))))
(define-extern vasprintf (make-c-func 'vasprintf <c-int> (list (ptr (ptr <c-char>)) (ptr <c-char>) <va_list>)))
(define-extern ctermid (make-c-func 'ctermid (ptr <c-char>) (list (ptr <c-char>))))
(define-extern ctermid_r (make-c-func 'ctermid_r (ptr <c-char>) (list (ptr <c-char>))))
(define-extern fdopen (make-c-func 'fdopen (ptr <FILE>) (list <c-int> (ptr <c-char>))))
(define-extern fgetln (make-c-func 'fgetln (ptr <c-char>) (list (ptr <FILE>) (ptr <size_t>))))
(define-extern fileno (make-c-func 'fileno <c-int> (list (ptr <FILE>))))
(define-extern flockfile (make-c-func 'flockfile <c-void> (list (ptr <FILE>))))
(define-extern fmtcheck (make-c-func 'fmtcheck (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern fpurge (make-c-func 'fpurge <c-int> (list (ptr <FILE>))))
(define-extern fseeko (make-c-func 'fseeko <c-int> (list (ptr <FILE>) <fpos_t> <c-int>)))
(define-extern ftello (make-c-func 'ftello <fpos_t> (list (ptr <FILE>))))
(define-extern ftrylockfile (make-c-func 'ftrylockfile <c-int> (list (ptr <FILE>))))
(define-extern funlockfile (make-c-func 'funlockfile <c-void> (list (ptr <FILE>))))
(define-extern getc_unlocked (make-c-func 'getc_unlocked <c-int> (list (ptr <FILE>))))
(define-extern getchar_unlocked (make-c-func 'getchar_unlocked <c-int> (list <c-void>)))
(define-extern getw (make-c-func 'getw <c-int> (list (ptr <FILE>))))
(define-extern pclose (make-c-func 'pclose <c-int> (list (ptr <FILE>))))
(define-extern popen (make-c-func 'popen (ptr <FILE>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern putc_unlocked (make-c-func 'putc_unlocked <c-int> (list <c-int> (ptr <FILE>))))
(define-extern putchar_unlocked (make-c-func 'putchar_unlocked <c-int> (list <c-int>)))
(define-extern putw (make-c-func 'putw <c-int> (list <c-int> (ptr <FILE>))))
(define-extern setbuffer (make-c-func 'setbuffer <c-void> (list (ptr <FILE>) (ptr <c-char>) <c-int>)))
(define-extern setlinebuf (make-c-func 'setlinebuf <c-int> (list (ptr <FILE>))))
(define-extern snprintf (make-c-func-vaargs 'snprintf <c-int> (list (ptr <c-char>) <size_t> (ptr <c-char>))))
(define-extern tempnam (make-c-func 'tempnam (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern vfscanf (make-c-func 'vfscanf <c-int> (list (ptr <FILE>) (ptr <c-char>) <va_list>)))
(define-extern vscanf (make-c-func 'vscanf <c-int> (list (ptr <c-char>) <va_list>)))
(define-extern vsnprintf (make-c-func 'vsnprintf <c-int> (list (ptr <c-char>) <size_t> (ptr <c-char>) <va_list>)))
(define-extern vsscanf (make-c-func 'vsscanf <c-int> (list (ptr <c-char>) (ptr <c-char>) <va_list>)))
(define-extern funopen (make-c-func 'funopen (ptr <FILE>) (list (ptr <c-void>) (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>)) (list '#f (ptr <c-char>)) (list '#f <c-int>))) (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>)) (list '#f (ptr <c-char>)) (list '#f <c-int>))) (make-c-func-ptr <fpos_t> (list (list '#f (ptr <c-void>)) (list '#f <fpos_t>) (list '#f <c-int>))) (make-c-func-ptr <c-int> (list (list '#f (ptr <c-void>)))))))
(define-extern __srget (make-c-func '__srget <c-int> (list (ptr <FILE>))))
(define-extern __svfscanf (make-c-func '__svfscanf <c-int> (list (ptr <FILE>) (ptr <c-char>) <va_list>)))
(define-extern __swbuf (make-c-func '__swbuf <c-int> (list <c-int> (ptr <FILE>))))
(define-inline-cfunc __sputc <c-int> (_c _p) (<c-int> (ptr <FILE>)) (call/cc (lambda (%return) (begin (if (eq? (cast <real> (let ((G410 (cast <real> (if (>= (cast <real> (pre-- (raw-ref (deref _p) '_w))) 0) 1 0)))) (if (eq? G410 0) (let ((G409 (cast <real> (if (>= (cast <real> (raw-ref (deref _p) '_w)) (cast <real> (raw-ref (deref _p) '_lbfsize))) 1 0)))) (if (eq? G409 0) G409 (if (equal? (cast <real> (cast <c-char> _c)) 10) 0 1))) G410))) 0) (%return (__swbuf _c _p)) (%return (let ((%v _c)) (set! (deref (post++ (raw-ref (deref _p) '_p))) %v) %v)))))))
(define-c-struct _PerlIO)
(define-ctype PerlIOl (c-struct '_PerlIO))
(define-c-struct _PerlIO_funcs)
(define-ctype PerlIO_funcs (c-struct '_PerlIO_funcs))
(define-ctype PerlIO (ptr <PerlIOl>))
(define-extern PerlIO_define_layer (make-c-func 'PerlIO_define_layer <c-void> (list (ptr <PerlInterpreter>) (ptr <PerlIO_funcs>))))
(define-extern PerlIO_find_layer (make-c-func 'PerlIO_find_layer (ptr <PerlIO_funcs>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <STRLEN> <c-int>)))
(define-extern PerlIO_push (make-c-func 'PerlIO_push (ptr <PerlIO>) (list (ptr <PerlInterpreter>) (ptr <PerlIO>) (ptr <PerlIO_funcs>) (ptr <c-char>) (ptr <SV>))))
(define-extern PerlIO_pop (make-c-func 'PerlIO_pop <c-void> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern PerlIO_get_layers (make-c-func 'PerlIO_get_layers (ptr <AV>) (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern PerlIO_clone (make-c-func 'PerlIO_clone <c-void> (list (ptr <PerlInterpreter>) (ptr <PerlInterpreter>) (ptr <CLONE_PARAMS>))))
(define-extern PerlIO_init (make-c-func 'PerlIO_init <c-void> (list (ptr <PerlInterpreter>))))
(define-extern PerlIO_stdoutf (make-c-func-vaargs 'PerlIO_stdoutf <c-int> (list (ptr <c-char>))))
(define-extern PerlIO_puts (make-c-func 'PerlIO_puts <c-int> (list (ptr <PerlIO>) (ptr <c-char>))))
(define-extern PerlIO_open (make-c-func 'PerlIO_open (ptr <PerlIO>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern PerlIO_openn (make-c-func 'PerlIO_openn (ptr <PerlIO>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) <c-int> <c-int> <c-int> (ptr <PerlIO>) <c-int> (ptr (ptr <SV>)))))
(define-extern PerlIO_getc (make-c-func 'PerlIO_getc <c-int> (list (ptr <PerlIO>))))
(define-extern PerlIO_putc (make-c-func 'PerlIO_putc <c-int> (list (ptr <PerlIO>) <c-int>)))
(define-extern PerlIO_ungetc (make-c-func 'PerlIO_ungetc <c-int> (list (ptr <PerlIO>) <c-int>)))
(define-extern PerlIO_fdopen (make-c-func 'PerlIO_fdopen (ptr <PerlIO>) (list <c-int> (ptr <c-char>))))
(define-extern PerlIO_importFILE (make-c-func 'PerlIO_importFILE (ptr <PerlIO>) (list (ptr <FILE>) (ptr <c-char>))))
(define-extern PerlIO_exportFILE (make-c-func 'PerlIO_exportFILE (ptr <FILE>) (list (ptr <PerlIO>) (ptr <c-char>))))
(define-extern PerlIO_findFILE (make-c-func 'PerlIO_findFILE (ptr <FILE>) (list (ptr <PerlIO>))))
(define-extern PerlIO_releaseFILE (make-c-func 'PerlIO_releaseFILE <c-void> (list (ptr <PerlIO>) (ptr <FILE>))))
(define-extern PerlIO_printf (make-c-func-vaargs 'PerlIO_printf <c-int> (list (ptr <PerlIO>) (ptr <c-char>))))
(define-extern PerlIO_sprintf (make-c-func-vaargs 'PerlIO_sprintf <c-int> (list (ptr <c-char>) <c-int> (ptr <c-char>))))
(define-extern PerlIO_vprintf (make-c-func 'PerlIO_vprintf <c-int> (list (ptr <PerlIO>) (ptr <c-char>) <va_list>)))
(define-extern PerlIO_rewind (make-c-func 'PerlIO_rewind <c-void> (list (ptr <PerlIO>))))
(define-extern PerlIO_has_base (make-c-func 'PerlIO_has_base <c-int> (list (ptr <PerlIO>))))
(define-extern PerlIO_has_cntptr (make-c-func 'PerlIO_has_cntptr <c-int> (list (ptr <PerlIO>))))
(define-extern PerlIO_fast_gets (make-c-func 'PerlIO_fast_gets <c-int> (list (ptr <PerlIO>))))
(define-extern PerlIO_canset_cnt (make-c-func 'PerlIO_canset_cnt <c-int> (list (ptr <PerlIO>))))
(define-extern PerlIO_tmpfile (make-c-func 'PerlIO_tmpfile (ptr <PerlIO>) (list <c-void>)))
(define-extern PerlIO_getpos (make-c-func 'PerlIO_getpos <c-int> (list (ptr <PerlIO>) (ptr <SV>))))
(define-extern PerlIO_setpos (make-c-func 'PerlIO_setpos <c-int> (list (ptr <PerlIO>) (ptr <SV>))))
(define-extern PerlIO_fdupopen (make-c-func 'PerlIO_fdupopen (ptr <PerlIO>) (list (ptr <PerlInterpreter>) (ptr <PerlIO>) (ptr <CLONE_PARAMS>) <c-int>)))
(define-extern PerlIO_modestr (make-c-func 'PerlIO_modestr (ptr <c-char>) (list (ptr <PerlIO>) (ptr <c-char>))))
(define-extern PerlIO_isutf8 (make-c-func 'PerlIO_isutf8 <c-int> (list (ptr <PerlIO>))))
(define-extern PerlIO_apply_layers (make-c-func 'PerlIO_apply_layers <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>) (ptr <c-char>) (ptr <c-char>))))
(define-extern PerlIO_binmode (make-c-func 'PerlIO_binmode <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>) <c-int> <c-int> (ptr <c-char>))))
(define-extern PerlIO_getname (make-c-func 'PerlIO_getname (ptr <c-char>) (list (ptr <PerlIO>) (ptr <c-char>))))
(define-extern PerlIO_destruct (make-c-func 'PerlIO_destruct <c-void> (list (ptr <PerlInterpreter>))))
(define-extern PerlIO_intmode2str (make-c-func 'PerlIO_intmode2str <c-int> (list <c-int> (ptr <c-char>) (ptr <c-int>))))
(define-extern PerlIO_cleanup (make-c-func 'PerlIO_cleanup <c-void> (list (ptr <PerlInterpreter>))))
(define-extern PerlIO_debug (make-c-func-vaargs 'PerlIO_debug <c-void> (list (ptr <c-char>))))
(define-c-struct PerlIO_list_s)
(define-ctype PerlIO_list_t (c-struct 'PerlIO_list_s))
(define-ctype Sighandler_t (make-c-func-ptr <c-void> (list <c-int>)))
(define-c-struct regnode)
(init-c-struct! (c-struct 'regnode) (list (cons 'flags <U8>) (cons 'type <U8>) (cons 'next_off <U16>)))
(define-ctype regnode (c-struct 'regnode))
(define-c-struct reg_substr_data)
(define-c-struct reg_data)
(init-c-struct! (c-struct 'regexp) (list (cons 'startp (ptr <I32>)) (cons 'endp (ptr <I32>)) (cons 'regstclass (ptr <regnode>)) (cons 'substrs (ptr (c-struct 'reg_substr_data))) (cons 'precomp (ptr <c-char>)) (cons 'data (ptr (c-struct 'reg_data))) (cons 'subbeg (ptr <c-char>)) (cons 'offsets (ptr <U32>)) (cons 'sublen <I32>) (cons 'refcnt <I32>) (cons 'minlen <I32>) (cons 'prelen <I32>) (cons 'nparens <U32>) (cons 'lastparen <U32>) (cons 'lastcloseparen <U32>) (cons 'reganch <U32>) (cons 'program (make-c-array <regnode> 1))))
(define-ctype regexp (c-struct 'regexp))
(define-c-struct re_scream_pos_data_s)
(define-enum SVt_NULL 0)
(define-enum SVt_IV 1)
(define-enum SVt_NV 2)
(define-enum SVt_RV 3)
(define-enum SVt_PV 4)
(define-enum SVt_PVIV 5)
(define-enum SVt_PVNV 6)
(define-enum SVt_PVMG 7)
(define-enum SVt_PVBM 8)
(define-enum SVt_PVLV 9)
(define-enum SVt_PVAV 10)
(define-enum SVt_PVHV 11)
(define-enum SVt_PVCV 12)
(define-enum SVt_PVGV 13)
(define-enum SVt_PVFM 14)
(define-enum SVt_PVIO 15)
(define-ctype svtype <c-int>)
(init-c-struct! (c-struct 'sv) (list (cons 'sv_any (ptr <c-void>)) (cons 'sv_refcnt <U32>) (cons 'sv_flags <U32>)))
(init-c-struct! (c-struct 'gv) (list (cons 'sv_any (ptr <XPVGV>)) (cons 'sv_refcnt <U32>) (cons 'sv_flags <U32>)))
(init-c-struct! (c-struct 'cv) (list (cons 'sv_any (ptr <XPVCV>)) (cons 'sv_refcnt <U32>) (cons 'sv_flags <U32>)))
(init-c-struct! (c-struct 'av) (list (cons 'sv_any (ptr <XPVAV>)) (cons 'sv_refcnt <U32>) (cons 'sv_flags <U32>)))
(init-c-struct! (c-struct 'hv) (list (cons 'sv_any (ptr <XPVHV>)) (cons 'sv_refcnt <U32>) (cons 'sv_flags <U32>)))
(init-c-struct! (c-struct 'io) (list (cons 'sv_any (ptr <XPVIO>)) (cons 'sv_refcnt <U32>) (cons 'sv_flags <U32>)))
(init-c-struct! (c-struct 'xrv) (list (cons 'xrv_rv (ptr <SV>))))
(init-c-struct! (c-struct 'xpv) (list (cons 'xpv_pv (ptr <c-char>)) (cons 'xpv_cur <STRLEN>) (cons 'xpv_len <STRLEN>)))
(init-c-struct! (c-struct 'xpviv) (list (cons 'xpv_pv (ptr <c-char>)) (cons 'xpv_cur <STRLEN>) (cons 'xpv_len <STRLEN>) (cons 'xiv_iv <IV>)))
(init-c-struct! (c-struct 'xpvuv) (list (cons 'xpv_pv (ptr <c-char>)) (cons 'xpv_cur <STRLEN>) (cons 'xpv_len <STRLEN>) (cons 'xuv_uv <UV>)))
(init-c-struct! (c-struct 'xpvnv) (list (cons 'xpv_pv (ptr <c-char>)) (cons 'xpv_cur <STRLEN>) (cons 'xpv_len <STRLEN>) (cons 'xiv_iv <IV>) (cons 'xnv_nv <NV>)))
(init-c-struct! (c-struct 'xpvmg) (list (cons 'xpv_pv (ptr <c-char>)) (cons 'xpv_cur <STRLEN>) (cons 'xpv_len <STRLEN>) (cons 'xiv_iv <IV>) (cons 'xnv_nv <NV>) (cons 'xmg_magic (ptr <MAGIC>)) (cons 'xmg_stash (ptr <HV>))))
(init-c-struct! (c-struct 'xpvlv) (list (cons 'xpv_pv (ptr <c-char>)) (cons 'xpv_cur <STRLEN>) (cons 'xpv_len <STRLEN>) (cons 'xiv_iv <IV>) (cons 'xnv_nv <NV>) (cons 'xmg_magic (ptr <MAGIC>)) (cons 'xmg_stash (ptr <HV>)) (cons 'xlv_targoff <STRLEN>) (cons 'xlv_targlen <STRLEN>) (cons 'xlv_targ (ptr <SV>)) (cons 'xlv_type <c-char>)))
(init-c-struct! (c-struct 'xpvgv) (list (cons 'xpv_pv (ptr <c-char>)) (cons 'xpv_cur <STRLEN>) (cons 'xpv_len <STRLEN>) (cons 'xiv_iv <IV>) (cons 'xnv_nv <NV>) (cons 'xmg_magic (ptr <MAGIC>)) (cons 'xmg_stash (ptr <HV>)) (cons 'xgv_gp (ptr <GP>)) (cons 'xgv_name (ptr <c-char>)) (cons 'xgv_namelen <STRLEN>) (cons 'xgv_stash (ptr <HV>)) (cons 'xgv_flags <U8>)))
(init-c-struct! (c-struct 'xpvbm) (list (cons 'xpv_pv (ptr <c-char>)) (cons 'xpv_cur <STRLEN>) (cons 'xpv_len <STRLEN>) (cons 'xiv_iv <IV>) (cons 'xnv_nv <NV>) (cons 'xmg_magic (ptr <MAGIC>)) (cons 'xmg_stash (ptr <HV>)) (cons 'xbm_useful <I32>) (cons 'xbm_previous <U16>) (cons 'xbm_rare <U8>)))
(define-ctype cv_flags_t <U16>)
(init-c-struct! (c-struct 'xpvfm) (list (cons 'xpv_pv (ptr <c-char>)) (cons 'xpv_cur <STRLEN>) (cons 'xpv_len <STRLEN>) (cons 'xiv_iv <IV>) (cons 'xnv_nv <NV>) (cons 'xmg_magic (ptr <MAGIC>)) (cons 'xmg_stash (ptr <HV>)) (cons 'xcv_stash (ptr <HV>)) (cons 'xcv_start (ptr <OP>)) (cons 'xcv_root (ptr <OP>)) (cons 'xcv_xsub (make-c-func-ptr <c-void> (list (list 'my_perl (ptr <PerlInterpreter>)) (list '#f (ptr <CV>))))) (cons 'xcv_xsubany <ANY>) (cons 'xcv_gv (ptr <GV>)) (cons 'xcv_file (ptr <c-char>)) (cons 'xcv_depth <c-long>) (cons 'xcv_padlist (ptr <AV>)) (cons 'xcv_outside (ptr <CV>)) (cons 'xcv_flags <cv_flags_t>) (cons 'xcv_outside_seq <U32>) (cons 'xfm_lines <IV>)))
(define-c-union G411)
(init-c-union! (c-union 'G411) (list (cons 'xiou_dirp (ptr <DIR>)) (cons 'xiou_any (ptr <c-void>))))
(init-c-struct! (c-struct 'xpvio) (list (cons 'xpv_pv (ptr <c-char>)) (cons 'xpv_cur <STRLEN>) (cons 'xpv_len <STRLEN>) (cons 'xiv_iv <IV>) (cons 'xnv_nv <NV>) (cons 'xmg_magic (ptr <MAGIC>)) (cons 'xmg_stash (ptr <HV>)) (cons 'xio_ifp (ptr <PerlIO>)) (cons 'xio_ofp (ptr <PerlIO>)) (cons 'xio_dirpu (c-union 'G411)) (cons 'xio_lines <IV>) (cons 'xio_page <IV>) (cons 'xio_page_len <IV>) (cons 'xio_lines_left <IV>) (cons 'xio_top_name (ptr <c-char>)) (cons 'xio_top_gv (ptr <GV>)) (cons 'xio_fmt_name (ptr <c-char>)) (cons 'xio_fmt_gv (ptr <GV>)) (cons 'xio_bottom_name (ptr <c-char>)) (cons 'xio_bottom_gv (ptr <GV>)) (cons 'xio_subprocess <c-short>) (cons 'xio_type <c-char>) (cons 'xio_flags <c-char>)))
(init-c-struct! (c-struct 'clone_params) (list (cons 'stashes (ptr <AV>)) (cons 'flags <UV>) (cons 'proto_perl (ptr <PerlInterpreter>))))
(init-c-struct! (c-struct 'gp) (list (cons 'gp_sv (ptr <SV>)) (cons 'gp_refcnt <U32>) (cons 'gp_io (ptr (c-struct 'io))) (cons 'gp_form (ptr <CV>)) (cons 'gp_av (ptr <AV>)) (cons 'gp_hv (ptr <HV>)) (cons 'gp_egv (ptr <GV>)) (cons 'gp_cv (ptr <CV>)) (cons 'gp_cvgen <U32>) (cons 'gp_flags <U32>) (cons 'gp_line <line_t>) (cons 'gp_file (ptr <c-char>))))
(define-ctype PADLIST <AV>)
(define-ctype PAD <AV>)
(define-ctype PADOFFSET <c-ulong>)
(define-enum padtidy_SUB 0)
(define-enum padtidy_SUBCLONE 1)
(define-enum padtidy_FORMAT 2)
(define-ctype padtidy_type <c-int>)
(init-c-struct! (c-struct 'xpvcv) (list (cons 'xpv_pv (ptr <c-char>)) (cons 'xpv_cur <STRLEN>) (cons 'xpv_len <STRLEN>) (cons 'xof_off <IV>) (cons 'xnv_nv <NV>) (cons 'xmg_magic (ptr <MAGIC>)) (cons 'xmg_stash (ptr <HV>)) (cons 'xcv_stash (ptr <HV>)) (cons 'xcv_start (ptr <OP>)) (cons 'xcv_root (ptr <OP>)) (cons 'xcv_xsub (make-c-func-ptr <c-void> (list (list 'my_perl (ptr <PerlInterpreter>)) (list '#f (ptr <CV>))))) (cons 'xcv_xsubany <ANY>) (cons 'xcv_gv (ptr <GV>)) (cons 'xcv_file (ptr <c-char>)) (cons 'xcv_depth <c-long>) (cons 'xcv_padlist (ptr <PADLIST>)) (cons 'xcv_outside (ptr <CV>)) (cons 'xcv_flags <cv_flags_t>) (cons 'xcv_outside_seq <U32>)))
(define-enum OP_NULL 0)
(define-enum OP_STUB 1)
(define-enum OP_SCALAR 2)
(define-enum OP_PUSHMARK 3)
(define-enum OP_WANTARRAY 4)
(define-enum OP_CONST 5)
(define-enum OP_GVSV 6)
(define-enum OP_GV 7)
(define-enum OP_GELEM 8)
(define-enum OP_PADSV 9)
(define-enum OP_PADAV 10)
(define-enum OP_PADHV 11)
(define-enum OP_PADANY 12)
(define-enum OP_PUSHRE 13)
(define-enum OP_RV2GV 14)
(define-enum OP_RV2SV 15)
(define-enum OP_AV2ARYLEN 16)
(define-enum OP_RV2CV 17)
(define-enum OP_ANONCODE 18)
(define-enum OP_PROTOTYPE 19)
(define-enum OP_REFGEN 20)
(define-enum OP_SREFGEN 21)
(define-enum OP_REF 22)
(define-enum OP_BLESS 23)
(define-enum OP_BACKTICK 24)
(define-enum OP_GLOB 25)
(define-enum OP_READLINE 26)
(define-enum OP_RCATLINE 27)
(define-enum OP_REGCMAYBE 28)
(define-enum OP_REGCRESET 29)
(define-enum OP_REGCOMP 30)
(define-enum OP_MATCH 31)
(define-enum OP_QR 32)
(define-enum OP_SUBST 33)
(define-enum OP_SUBSTCONT 34)
(define-enum OP_TRANS 35)
(define-enum OP_SASSIGN 36)
(define-enum OP_AASSIGN 37)
(define-enum OP_CHOP 38)
(define-enum OP_SCHOP 39)
(define-enum OP_CHOMP 40)
(define-enum OP_SCHOMP 41)
(define-enum OP_DEFINED 42)
(define-enum OP_UNDEF 43)
(define-enum OP_STUDY 44)
(define-enum OP_POS 45)
(define-enum OP_PREINC 46)
(define-enum OP_I_PREINC 47)
(define-enum OP_PREDEC 48)
(define-enum OP_I_PREDEC 49)
(define-enum OP_POSTINC 50)
(define-enum OP_I_POSTINC 51)
(define-enum OP_POSTDEC 52)
(define-enum OP_I_POSTDEC 53)
(define-enum OP_POW 54)
(define-enum OP_MULTIPLY 55)
(define-enum OP_I_MULTIPLY 56)
(define-enum OP_DIVIDE 57)
(define-enum OP_I_DIVIDE 58)
(define-enum OP_MODULO 59)
(define-enum OP_I_MODULO 60)
(define-enum OP_REPEAT 61)
(define-enum OP_ADD 62)
(define-enum OP_I_ADD 63)
(define-enum OP_SUBTRACT 64)
(define-enum OP_I_SUBTRACT 65)
(define-enum OP_CONCAT 66)
(define-enum OP_STRINGIFY 67)
(define-enum OP_LEFT_SHIFT 68)
(define-enum OP_RIGHT_SHIFT 69)
(define-enum OP_LT 70)
(define-enum OP_I_LT 71)
(define-enum OP_GT 72)
(define-enum OP_I_GT 73)
(define-enum OP_LE 74)
(define-enum OP_I_LE 75)
(define-enum OP_GE 76)
(define-enum OP_I_GE 77)
(define-enum OP_EQ 78)
(define-enum OP_I_EQ 79)
(define-enum OP_NE 80)
(define-enum OP_I_NE 81)
(define-enum OP_NCMP 82)
(define-enum OP_I_NCMP 83)
(define-enum OP_SLT 84)
(define-enum OP_SGT 85)
(define-enum OP_SLE 86)
(define-enum OP_SGE 87)
(define-enum OP_SEQ 88)
(define-enum OP_SNE 89)
(define-enum OP_SCMP 90)
(define-enum OP_BIT_AND 91)
(define-enum OP_BIT_XOR 92)
(define-enum OP_BIT_OR 93)
(define-enum OP_NEGATE 94)
(define-enum OP_I_NEGATE 95)
(define-enum OP_NOT 96)
(define-enum OP_COMPLEMENT 97)
(define-enum OP_ATAN2 98)
(define-enum OP_SIN 99)
(define-enum OP_COS 100)
(define-enum OP_RAND 101)
(define-enum OP_SRAND 102)
(define-enum OP_EXP 103)
(define-enum OP_LOG 104)
(define-enum OP_SQRT 105)
(define-enum OP_INT 106)
(define-enum OP_HEX 107)
(define-enum OP_OCT 108)
(define-enum OP_ABS 109)
(define-enum OP_LENGTH 110)
(define-enum OP_SUBSTR 111)
(define-enum OP_VEC 112)
(define-enum OP_INDEX 113)
(define-enum OP_RINDEX 114)
(define-enum OP_SPRINTF 115)
(define-enum OP_FORMLINE 116)
(define-enum OP_ORD 117)
(define-enum OP_CHR 118)
(define-enum OP_CRYPT 119)
(define-enum OP_UCFIRST 120)
(define-enum OP_LCFIRST 121)
(define-enum OP_UC 122)
(define-enum OP_LC 123)
(define-enum OP_QUOTEMETA 124)
(define-enum OP_RV2AV 125)
(define-enum OP_AELEMFAST 126)
(define-enum OP_AELEM 127)
(define-enum OP_ASLICE 128)
(define-enum OP_EACH 129)
(define-enum OP_VALUES 130)
(define-enum OP_KEYS 131)
(define-enum OP_DELETE 132)
(define-enum OP_EXISTS 133)
(define-enum OP_RV2HV 134)
(define-enum OP_HELEM 135)
(define-enum OP_HSLICE 136)
(define-enum OP_UNPACK 137)
(define-enum OP_PACK 138)
(define-enum OP_SPLIT 139)
(define-enum OP_JOIN 140)
(define-enum OP_LIST 141)
(define-enum OP_LSLICE 142)
(define-enum OP_ANONLIST 143)
(define-enum OP_ANONHASH 144)
(define-enum OP_SPLICE 145)
(define-enum OP_PUSH 146)
(define-enum OP_POP 147)
(define-enum OP_SHIFT 148)
(define-enum OP_UNSHIFT 149)
(define-enum OP_SORT 150)
(define-enum OP_REVERSE 151)
(define-enum OP_GREPSTART 152)
(define-enum OP_GREPWHILE 153)
(define-enum OP_MAPSTART 154)
(define-enum OP_MAPWHILE 155)
(define-enum OP_RANGE 156)
(define-enum OP_FLIP 157)
(define-enum OP_FLOP 158)
(define-enum OP_AND 159)
(define-enum OP_OR 160)
(define-enum OP_XOR 161)
(define-enum OP_COND_EXPR 162)
(define-enum OP_ANDASSIGN 163)
(define-enum OP_ORASSIGN 164)
(define-enum OP_METHOD 165)
(define-enum OP_ENTERSUB 166)
(define-enum OP_LEAVESUB 167)
(define-enum OP_LEAVESUBLV 168)
(define-enum OP_CALLER 169)
(define-enum OP_WARN 170)
(define-enum OP_DIE 171)
(define-enum OP_RESET 172)
(define-enum OP_LINESEQ 173)
(define-enum OP_NEXTSTATE 174)
(define-enum OP_DBSTATE 175)
(define-enum OP_UNSTACK 176)
(define-enum OP_ENTER 177)
(define-enum OP_LEAVE 178)
(define-enum OP_SCOPE 179)
(define-enum OP_ENTERITER 180)
(define-enum OP_ITER 181)
(define-enum OP_ENTERLOOP 182)
(define-enum OP_LEAVELOOP 183)
(define-enum OP_RETURN 184)
(define-enum OP_LAST 185)
(define-enum OP_NEXT 186)
(define-enum OP_REDO 187)
(define-enum OP_DUMP 188)
(define-enum OP_GOTO 189)
(define-enum OP_EXIT 190)
(define-enum OP_OPEN 191)
(define-enum OP_CLOSE 192)
(define-enum OP_PIPE_OP 193)
(define-enum OP_FILENO 194)
(define-enum OP_UMASK 195)
(define-enum OP_BINMODE 196)
(define-enum OP_TIE 197)
(define-enum OP_UNTIE 198)
(define-enum OP_TIED 199)
(define-enum OP_DBMOPEN 200)
(define-enum OP_DBMCLOSE 201)
(define-enum OP_SSELECT 202)
(define-enum OP_SELECT 203)
(define-enum OP_GETC 204)
(define-enum OP_READ 205)
(define-enum OP_ENTERWRITE 206)
(define-enum OP_LEAVEWRITE 207)
(define-enum OP_PRTF 208)
(define-enum OP_PRINT 209)
(define-enum OP_SYSOPEN 210)
(define-enum OP_SYSSEEK 211)
(define-enum OP_SYSREAD 212)
(define-enum OP_SYSWRITE 213)
(define-enum OP_SEND 214)
(define-enum OP_RECV 215)
(define-enum OP_EOF 216)
(define-enum OP_TELL 217)
(define-enum OP_SEEK 218)
(define-enum OP_TRUNCATE 219)
(define-enum OP_FCNTL 220)
(define-enum OP_IOCTL 221)
(define-enum OP_FLOCK 222)
(define-enum OP_SOCKET 223)
(define-enum OP_SOCKPAIR 224)
(define-enum OP_BIND 225)
(define-enum OP_CONNECT 226)
(define-enum OP_LISTEN 227)
(define-enum OP_ACCEPT 228)
(define-enum OP_SHUTDOWN 229)
(define-enum OP_GSOCKOPT 230)
(define-enum OP_SSOCKOPT 231)
(define-enum OP_GETSOCKNAME 232)
(define-enum OP_GETPEERNAME 233)
(define-enum OP_LSTAT 234)
(define-enum OP_STAT 235)
(define-enum OP_FTRREAD 236)
(define-enum OP_FTRWRITE 237)
(define-enum OP_FTREXEC 238)
(define-enum OP_FTEREAD 239)
(define-enum OP_FTEWRITE 240)
(define-enum OP_FTEEXEC 241)
(define-enum OP_FTIS 242)
(define-enum OP_FTEOWNED 243)
(define-enum OP_FTROWNED 244)
(define-enum OP_FTZERO 245)
(define-enum OP_FTSIZE 246)
(define-enum OP_FTMTIME 247)
(define-enum OP_FTATIME 248)
(define-enum OP_FTCTIME 249)
(define-enum OP_FTSOCK 250)
(define-enum OP_FTCHR 251)
(define-enum OP_FTBLK 252)
(define-enum OP_FTFILE 253)
(define-enum OP_FTDIR 254)
(define-enum OP_FTPIPE 255)
(define-enum OP_FTLINK 256)
(define-enum OP_FTSUID 257)
(define-enum OP_FTSGID 258)
(define-enum OP_FTSVTX 259)
(define-enum OP_FTTTY 260)
(define-enum OP_FTTEXT 261)
(define-enum OP_FTBINARY 262)
(define-enum OP_CHDIR 263)
(define-enum OP_CHOWN 264)
(define-enum OP_CHROOT 265)
(define-enum OP_UNLINK 266)
(define-enum OP_CHMOD 267)
(define-enum OP_UTIME 268)
(define-enum OP_RENAME 269)
(define-enum OP_LINK 270)
(define-enum OP_SYMLINK 271)
(define-enum OP_READLINK 272)
(define-enum OP_MKDIR 273)
(define-enum OP_RMDIR 274)
(define-enum OP_OPEN_DIR 275)
(define-enum OP_READDIR 276)
(define-enum OP_TELLDIR 277)
(define-enum OP_SEEKDIR 278)
(define-enum OP_REWINDDIR 279)
(define-enum OP_CLOSEDIR 280)
(define-enum OP_FORK 281)
(define-enum OP_WAIT 282)
(define-enum OP_WAITPID 283)
(define-enum OP_SYSTEM 284)
(define-enum OP_EXEC 285)
(define-enum OP_KILL 286)
(define-enum OP_GETPPID 287)
(define-enum OP_GETPGRP 288)
(define-enum OP_SETPGRP 289)
(define-enum OP_GETPRIORITY 290)
(define-enum OP_SETPRIORITY 291)
(define-enum OP_TIME 292)
(define-enum OP_TMS 293)
(define-enum OP_LOCALTIME 294)
(define-enum OP_GMTIME 295)
(define-enum OP_ALARM 296)
(define-enum OP_SLEEP 297)
(define-enum OP_SHMGET 298)
(define-enum OP_SHMCTL 299)
(define-enum OP_SHMREAD 300)
(define-enum OP_SHMWRITE 301)
(define-enum OP_MSGGET 302)
(define-enum OP_MSGCTL 303)
(define-enum OP_MSGSND 304)
(define-enum OP_MSGRCV 305)
(define-enum OP_SEMGET 306)
(define-enum OP_SEMCTL 307)
(define-enum OP_SEMOP 308)
(define-enum OP_REQUIRE 309)
(define-enum OP_DOFILE 310)
(define-enum OP_ENTEREVAL 311)
(define-enum OP_LEAVEEVAL 312)
(define-enum OP_ENTERTRY 313)
(define-enum OP_LEAVETRY 314)
(define-enum OP_GHBYNAME 315)
(define-enum OP_GHBYADDR 316)
(define-enum OP_GHOSTENT 317)
(define-enum OP_GNBYNAME 318)
(define-enum OP_GNBYADDR 319)
(define-enum OP_GNETENT 320)
(define-enum OP_GPBYNAME 321)
(define-enum OP_GPBYNUMBER 322)
(define-enum OP_GPROTOENT 323)
(define-enum OP_GSBYNAME 324)
(define-enum OP_GSBYPORT 325)
(define-enum OP_GSERVENT 326)
(define-enum OP_SHOSTENT 327)
(define-enum OP_SNETENT 328)
(define-enum OP_SPROTOENT 329)
(define-enum OP_SSERVENT 330)
(define-enum OP_EHOSTENT 331)
(define-enum OP_ENETENT 332)
(define-enum OP_EPROTOENT 333)
(define-enum OP_ESERVENT 334)
(define-enum OP_GPWNAM 335)
(define-enum OP_GPWUID 336)
(define-enum OP_GPWENT 337)
(define-enum OP_SPWENT 338)
(define-enum OP_EPWENT 339)
(define-enum OP_GGRNAM 340)
(define-enum OP_GGRGID 341)
(define-enum OP_GGRENT 342)
(define-enum OP_SGRENT 343)
(define-enum OP_EGRENT 344)
(define-enum OP_GETLOGIN 345)
(define-enum OP_SYSCALL 346)
(define-enum OP_LOCK 347)
(define-enum OP_THREADSV 348)
(define-enum OP_SETSTATE 349)
(define-enum OP_METHOD_NAMED 350)
(define-enum OP_CUSTOM 351)
(define-enum OP_max 352)
(define-ctype opcode <c-int>)
(init-c-struct! (c-struct 'op) (list (cons 'op_next (ptr <OP>)) (cons 'op_sibling (ptr <OP>)) (cons 'op_ppaddr (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>))))) (cons 'op_targ <PADOFFSET>) (cons 'op_type <U16>) (cons 'op_seq <U16>) (cons 'op_flags <U8>) (cons 'op_private <U8>)))
(init-c-struct! (c-struct 'unop) (list (cons 'op_next (ptr <OP>)) (cons 'op_sibling (ptr <OP>)) (cons 'op_ppaddr (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>))))) (cons 'op_targ <PADOFFSET>) (cons 'op_type <U16>) (cons 'op_seq <U16>) (cons 'op_flags <U8>) (cons 'op_private <U8>) (cons 'op_first (ptr <OP>))))
(init-c-struct! (c-struct 'binop) (list (cons 'op_next (ptr <OP>)) (cons 'op_sibling (ptr <OP>)) (cons 'op_ppaddr (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>))))) (cons 'op_targ <PADOFFSET>) (cons 'op_type <U16>) (cons 'op_seq <U16>) (cons 'op_flags <U8>) (cons 'op_private <U8>) (cons 'op_first (ptr <OP>)) (cons 'op_last (ptr <OP>))))
(init-c-struct! (c-struct 'logop) (list (cons 'op_next (ptr <OP>)) (cons 'op_sibling (ptr <OP>)) (cons 'op_ppaddr (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>))))) (cons 'op_targ <PADOFFSET>) (cons 'op_type <U16>) (cons 'op_seq <U16>) (cons 'op_flags <U8>) (cons 'op_private <U8>) (cons 'op_first (ptr <OP>)) (cons 'op_other (ptr <OP>))))
(init-c-struct! (c-struct 'listop) (list (cons 'op_next (ptr <OP>)) (cons 'op_sibling (ptr <OP>)) (cons 'op_ppaddr (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>))))) (cons 'op_targ <PADOFFSET>) (cons 'op_type <U16>) (cons 'op_seq <U16>) (cons 'op_flags <U8>) (cons 'op_private <U8>) (cons 'op_first (ptr <OP>)) (cons 'op_last (ptr <OP>))))
(init-c-struct! (c-struct 'pmop) (list (cons 'op_next (ptr <OP>)) (cons 'op_sibling (ptr <OP>)) (cons 'op_ppaddr (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>))))) (cons 'op_targ <PADOFFSET>) (cons 'op_type <U16>) (cons 'op_seq <U16>) (cons 'op_flags <U8>) (cons 'op_private <U8>) (cons 'op_first (ptr <OP>)) (cons 'op_last (ptr <OP>)) (cons 'op_pmreplroot (ptr <OP>)) (cons 'op_pmreplstart (ptr <OP>)) (cons 'op_pmnext (ptr <PMOP>)) (cons 'op_pmoffset <IV>) (cons 'op_pmflags <U32>) (cons 'op_pmpermflags <U32>) (cons 'op_pmdynflags <U8>) (cons 'op_pmstashpv (ptr <c-char>))))
(init-c-struct! (c-struct 'svop) (list (cons 'op_next (ptr <OP>)) (cons 'op_sibling (ptr <OP>)) (cons 'op_ppaddr (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>))))) (cons 'op_targ <PADOFFSET>) (cons 'op_type <U16>) (cons 'op_seq <U16>) (cons 'op_flags <U8>) (cons 'op_private <U8>) (cons 'op_sv (ptr <SV>))))
(init-c-struct! (c-struct 'padop) (list (cons 'op_next (ptr <OP>)) (cons 'op_sibling (ptr <OP>)) (cons 'op_ppaddr (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>))))) (cons 'op_targ <PADOFFSET>) (cons 'op_type <U16>) (cons 'op_seq <U16>) (cons 'op_flags <U8>) (cons 'op_private <U8>) (cons 'op_padix <PADOFFSET>)))
(init-c-struct! (c-struct 'pvop) (list (cons 'op_next (ptr <OP>)) (cons 'op_sibling (ptr <OP>)) (cons 'op_ppaddr (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>))))) (cons 'op_targ <PADOFFSET>) (cons 'op_type <U16>) (cons 'op_seq <U16>) (cons 'op_flags <U8>) (cons 'op_private <U8>) (cons 'op_pv (ptr <c-char>))))
(init-c-struct! (c-struct 'loop) (list (cons 'op_next (ptr <OP>)) (cons 'op_sibling (ptr <OP>)) (cons 'op_ppaddr (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>))))) (cons 'op_targ <PADOFFSET>) (cons 'op_type <U16>) (cons 'op_seq <U16>) (cons 'op_flags <U8>) (cons 'op_private <U8>) (cons 'op_first (ptr <OP>)) (cons 'op_last (ptr <OP>)) (cons 'op_redoop (ptr <OP>)) (cons 'op_nextop (ptr <OP>)) (cons 'op_lastop (ptr <OP>))))
(define-c-struct passwd)
(init-c-struct! (c-struct 'passwd) (list (cons 'pw_name (ptr <c-char>)) (cons 'pw_passwd (ptr <c-char>)) (cons 'pw_uid <uid_t>) (cons 'pw_gid <gid_t>) (cons 'pw_change <__darwin_time_t>) (cons 'pw_class (ptr <c-char>)) (cons 'pw_gecos (ptr <c-char>)) (cons 'pw_dir (ptr <c-char>)) (cons 'pw_shell (ptr <c-char>)) (cons 'pw_expire <__darwin_time_t>)))
(define-extern getpwuid (make-c-func 'getpwuid (ptr (c-struct 'passwd)) (list <uid_t>)))
(define-extern getpwnam (make-c-func 'getpwnam (ptr (c-struct 'passwd)) (list (ptr <c-char>))))
(define-extern getpwuid_r (make-c-func 'getpwuid_r <c-int> (list <uid_t> (ptr (c-struct 'passwd)) (ptr <c-char>) <size_t> (ptr (ptr (c-struct 'passwd))))))
(define-extern getpwnam_r (make-c-func 'getpwnam_r <c-int> (list (ptr <c-char>) (ptr (c-struct 'passwd)) (ptr <c-char>) <size_t> (ptr (ptr (c-struct 'passwd))))))
(define-extern getpwent (make-c-func 'getpwent (ptr (c-struct 'passwd)) (list <c-void>)))
(define-extern setpassent (make-c-func 'setpassent <c-int> (list <c-int>)))
(define-extern user_from_uid (make-c-func 'user_from_uid (ptr <c-char>) (list <uid_t> <c-int>)))
(define-extern setpwent (make-c-func 'setpwent <c-int> (list <c-void>)))
(define-extern endpwent (make-c-func 'endpwent <c-void> (list <c-void>)))
(define-c-struct group)
(init-c-struct! (c-struct 'group) (list (cons 'gr_name (ptr <c-char>)) (cons 'gr_passwd (ptr <c-char>)) (cons 'gr_gid <gid_t>) (cons 'gr_mem (ptr (ptr <c-char>)))))
(define-extern getgrgid (make-c-func 'getgrgid (ptr (c-struct 'group)) (list <gid_t>)))
(define-extern getgrnam (make-c-func 'getgrnam (ptr (c-struct 'group)) (list (ptr <c-char>))))
(define-extern getgrgid_r (make-c-func 'getgrgid_r <c-int> (list <gid_t> (ptr (c-struct 'group)) (ptr <c-char>) <size_t> (ptr (ptr (c-struct 'group))))))
(define-extern getgrnam_r (make-c-func 'getgrnam_r <c-int> (list (ptr <c-char>) (ptr (c-struct 'group)) (ptr <c-char>) <size_t> (ptr (ptr (c-struct 'group))))))
(define-extern getgrent (make-c-func 'getgrent (ptr (c-struct 'group)) (list <c-void>)))
(define-extern setgrent (make-c-func 'setgrent <c-int> (list <c-void>)))
(define-extern endgrent (make-c-func 'endgrent <c-void> (list <c-void>)))
(define-extern group_from_gid (make-c-func 'group_from_gid (ptr <c-char>) (list <gid_t> <c-int>)))
(define-extern setgroupent (make-c-func 'setgroupent <c-int> (list <c-int>)))
(define-c-struct G412)
(init-c-struct! (c-struct 'G412) (list (cons '_asctime_buffer (ptr <c-char>)) (cons '_asctime_size <size_t>) (cons '_ctime_buffer (ptr <c-char>)) (cons '_ctime_size <size_t>) (cons '_grent_struct (c-struct 'group)) (cons '_grent_buffer (ptr <c-char>)) (cons '_grent_size <size_t>) (cons '_grent_ptr (ptr (c-struct 'group))) (cons '_getlogin_buffer (ptr <c-char>)) (cons '_getlogin_size <size_t>) (cons '_pwent_struct (c-struct 'passwd)) (cons '_pwent_buffer (ptr <c-char>)) (cons '_pwent_size <size_t>) (cons '_pwent_ptr (ptr (c-struct 'passwd))) (cons '_gmtime_struct (c-struct 'tm)) (cons '_localtime_struct (c-struct 'tm)) (cons '_readdir_struct (ptr (c-struct 'dirent))) (cons '_readdir_size <size_t>) (cons '_readdir_ptr (ptr (c-struct 'dirent))) (cons '_strerror_buffer (ptr <c-char>)) (cons '_strerror_size <size_t>) (cons 'dummy <c-int>)))
(define-ctype REENTR (c-struct 'G412))
(init-c-struct! (c-struct 'cop) (list (cons 'op_next (ptr <OP>)) (cons 'op_sibling (ptr <OP>)) (cons 'op_ppaddr (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>))))) (cons 'op_targ <PADOFFSET>) (cons 'op_type <U16>) (cons 'op_seq <U16>) (cons 'op_flags <U8>) (cons 'op_private <U8>) (cons 'cop_label (ptr <c-char>)) (cons 'cop_stashpv (ptr <c-char>)) (cons 'cop_file (ptr <c-char>)) (cons 'cop_seq <U32>) (cons 'cop_arybase <I32>) (cons 'cop_line <line_t>) (cons 'cop_warnings (ptr <SV>)) (cons 'cop_io (ptr <SV>))))
(define-c-struct block_sub)
(init-c-struct! (c-struct 'block_sub) (list (cons 'cv (ptr <CV>)) (cons 'gv (ptr <GV>)) (cons 'dfoutgv (ptr <GV>)) (cons 'savearray (ptr <AV>)) (cons 'argarray (ptr <AV>)) (cons 'olddepth <c-long>) (cons 'hasargs <U8>) (cons 'lval <U8>) (cons 'oldcomppad (ptr <PAD>))))
(define-c-struct block_eval)
(init-c-struct! (c-struct 'block_eval) (list (cons 'old_in_eval <I32>) (cons 'old_op_type <I32>) (cons 'old_namesv (ptr <SV>)) (cons 'old_eval_root (ptr <OP>)) (cons 'cur_text (ptr <SV>)) (cons 'cv (ptr <CV>))))
(define-c-struct block_loop)
(init-c-struct! (c-struct 'block_loop) (list (cons 'label (ptr <c-char>)) (cons 'resetsp <I32>) (cons 'redo_op (ptr <OP>)) (cons 'next_op (ptr <OP>)) (cons 'last_op (ptr <OP>)) (cons 'iterdata (ptr <c-void>)) (cons 'oldcomppad (ptr <PAD>)) (cons 'itersave (ptr <SV>)) (cons 'iterlval (ptr <SV>)) (cons 'iterary (ptr <AV>)) (cons 'iterix <IV>) (cons 'itermax <IV>)))
(define-c-union G413)
(init-c-union! (c-union 'G413) (list (cons 'blku_sub (c-struct 'block_sub)) (cons 'blku_eval (c-struct 'block_eval)) (cons 'blku_loop (c-struct 'block_loop))))
(init-c-struct! (c-struct 'block) (list (cons 'blku_oldsp <I32>) (cons 'blku_oldcop (ptr <COP>)) (cons 'blku_oldretsp <I32>) (cons 'blku_oldmarksp <I32>) (cons 'blku_oldscopesp <I32>) (cons 'blku_oldpm (ptr <PMOP>)) (cons 'blku_gimme <U8>) (cons 'blk_u (c-union 'G413))))
(define-c-struct subst)
(init-c-struct! (c-struct 'subst) (list (cons 'sbu_iters <I32>) (cons 'sbu_maxiters <I32>) (cons 'sbu_rflags <I32>) (cons 'sbu_oldsave <I32>) (cons 'sbu_once <c-char>) (cons 'sbu_rxtainted <c-char>) (cons 'sbu_orig (ptr <c-char>)) (cons 'sbu_dstr (ptr <SV>)) (cons 'sbu_targ (ptr <SV>)) (cons 'sbu_s (ptr <c-char>)) (cons 'sbu_m (ptr <c-char>)) (cons 'sbu_strend (ptr <c-char>)) (cons 'sbu_rxres (ptr <c-void>)) (cons 'sbu_rx (ptr <REGEXP>))))
(define-c-union G414)
(init-c-union! (c-union 'G414) (list (cons 'cx_blk (c-struct 'block)) (cons 'cx_subst (c-struct 'subst))))
(init-c-struct! (c-struct 'context) (list (cons 'cx_type <U32>) (cons 'cx_u (c-union 'G414))))
(define-c-struct stackinfo)
(init-c-struct! (c-struct 'stackinfo) (list (cons 'si_stack (ptr <AV>)) (cons 'si_cxstack (ptr <PERL_CONTEXT>)) (cons 'si_cxix <I32>) (cons 'si_cxmax <I32>) (cons 'si_type <I32>) (cons 'si_prev (ptr (c-struct 'stackinfo))) (cons 'si_next (ptr (c-struct 'stackinfo))) (cons 'si_markoff <I32>)))
(define-ctype PERL_SI (c-struct 'stackinfo))
(init-c-struct! (c-struct 'xpvav) (list (cons 'xav_array (ptr <c-char>)) (cons 'xav_fill <ssize_t>) (cons 'xav_max <ssize_t>) (cons 'xof_off <IV>) (cons 'xnv_nv <NV>) (cons 'xmg_magic (ptr <MAGIC>)) (cons 'xmg_stash (ptr <HV>)) (cons 'xav_alloc (ptr (ptr <SV>))) (cons 'xav_arylen (ptr <SV>)) (cons 'xav_flags <U8>)))
(define-c-struct he)
(define-ctype HE (c-struct 'he))
(define-c-struct hek)
(define-ctype HEK (c-struct 'hek))
(init-c-struct! (c-struct 'he) (list (cons 'hent_next (ptr <HE>)) (cons 'hent_hek (ptr <HEK>)) (cons 'hent_val (ptr <SV>))))
(init-c-struct! (c-struct 'hek) (list (cons 'hek_hash <U32>) (cons 'hek_len <I32>) (cons 'hek_key (make-c-array <c-char> 1))))
(init-c-struct! (c-struct 'xpvhv) (list (cons 'xhv_array (ptr <c-char>)) (cons 'xhv_fill <STRLEN>) (cons 'xhv_max <STRLEN>) (cons 'xhv_keys <IV>) (cons 'xnv_nv <NV>) (cons 'xmg_magic (ptr <MAGIC>)) (cons 'xmg_stash (ptr <HV>)) (cons 'xhv_riter <I32>) (cons 'xhv_eiter (ptr <HE>)) (cons 'xhv_pmroot (ptr <PMOP>)) (cons 'xhv_name (ptr <c-char>))))
(init-c-struct! (c-struct 'mgvtbl) (list (cons 'svt_get (make-c-func-ptr <c-int> (list (list 'my_perl (ptr <PerlInterpreter>)) (list 'sv (ptr <SV>)) (list 'mg (ptr <MAGIC>))))) (cons 'svt_set (make-c-func-ptr <c-int> (list (list 'my_perl (ptr <PerlInterpreter>)) (list 'sv (ptr <SV>)) (list 'mg (ptr <MAGIC>))))) (cons 'svt_len (make-c-func-ptr <U32> (list (list 'my_perl (ptr <PerlInterpreter>)) (list 'sv (ptr <SV>)) (list 'mg (ptr <MAGIC>))))) (cons 'svt_clear (make-c-func-ptr <c-int> (list (list 'my_perl (ptr <PerlInterpreter>)) (list 'sv (ptr <SV>)) (list 'mg (ptr <MAGIC>))))) (cons 'svt_free (make-c-func-ptr <c-int> (list (list 'my_perl (ptr <PerlInterpreter>)) (list 'sv (ptr <SV>)) (list 'mg (ptr <MAGIC>))))) (cons 'svt_copy (make-c-func-ptr <c-int> (list (list 'my_perl (ptr <PerlInterpreter>)) (list 'sv (ptr <SV>)) (list 'mg (ptr <MAGIC>)) (list 'nsv (ptr <SV>)) (list 'name (ptr <c-char>)) (list 'namlen <c-int>)))) (cons 'svt_dup (make-c-func-ptr <c-int> (list (list 'my_perl (ptr <PerlInterpreter>)) (list 'mg (ptr <MAGIC>)) (list 'param (ptr <CLONE_PARAMS>)))))))
(init-c-struct! (c-struct 'magic) (list (cons 'mg_moremagic (ptr <MAGIC>)) (cons 'mg_virtual (ptr <MGVTBL>)) (cons 'mg_private <U16>) (cons 'mg_type <c-char>) (cons 'mg_flags <U8>) (cons 'mg_obj (ptr <SV>)) (cons 'mg_ptr (ptr <c-char>)) (cons 'mg_len <I32>)))
(define-c-struct jmpenv)
(init-c-struct! (c-struct 'jmpenv) (list (cons 'je_prev (ptr (c-struct 'jmpenv))) (cons 'je_buf <sigjmp_buf>) (cons 'je_ret <c-int>) (cons 'je_mustcatch <c-char>)))
(define-ctype JMPENV (c-struct 'jmpenv))
(define-extern PL_utf8skip (deref (cast (ptr (make-c-array <c-uchar> #f)) (c-lookup-symbol 'PL_utf8skip))))
(define-c-struct curcur)
(define-ctype CURCUR (c-struct 'curcur))
(init-c-struct! (c-struct 'curcur) (list (cons 'parenfloor <c-int>) (cons 'cur <c-int>) (cons 'min <c-int>) (cons 'max <c-int>) (cons 'minmod <c-int>) (cons 'scan (ptr <regnode>)) (cons 'next (ptr <regnode>)) (cons 'lastloc (ptr <c-char>)) (cons 'oldcc (ptr <CURCUR>))))
(define-c-struct _sublex_info)
(define-ctype SUBLEXINFO (c-struct '_sublex_info))
(init-c-struct! (c-struct '_sublex_info) (list (cons 'super_state <I32>) (cons 'sub_inwhat <I32>) (cons 'sub_op (ptr <OP>)) (cons 'super_bufptr (ptr <c-char>)) (cons 'super_bufend (ptr <c-char>))))
(define-c-struct magic_state)
(define-ctype MGS (c-struct 'magic_state))
(define-c-struct scan_data_t)
(define-c-struct regnode_charclass_class)
(define-ctype CHECKPOINT <I32>)
(init-c-struct! (c-struct 'ptr_tbl_ent) (list (cons 'next (ptr (c-struct 'ptr_tbl_ent))) (cons 'oldval (ptr <c-void>)) (cons 'newval (ptr <c-void>))))
(init-c-struct! (c-struct 'ptr_tbl) (list (cons 'tbl_ary (ptr (ptr (c-struct 'ptr_tbl_ent)))) (cons 'tbl_max <UV>) (cons 'tbl_items <UV>)))
(define-extern getuid (make-c-func 'getuid <uid_t> (list <c-void>)))
(define-extern geteuid (make-c-func 'geteuid <uid_t> (list <c-void>)))
(define-extern getgid (make-c-func 'getgid <gid_t> (list <c-void>)))
(define-extern getegid (make-c-func 'getegid <gid_t> (list <c-void>)))
(define-c-struct ufuncs)
(init-c-struct! (c-struct 'ufuncs) (list (cons 'uf_val (make-c-func-ptr <I32> (list (list 'my_perl (ptr <PerlInterpreter>)) (list '#f <IV>) (list '#f (ptr <SV>))))) (cons 'uf_set (make-c-func-ptr <I32> (list (list 'my_perl (ptr <PerlInterpreter>)) (list '#f <IV>) (list '#f (ptr <SV>))))) (cons 'uf_index <IV>)))
(define-extern mktemp (make-c-func 'mktemp (ptr <c-char>) (list (ptr <c-char>))))
(define-extern atof (make-c-func 'atof <c-double> (list (ptr <c-char>))))
(define-extern crypt (make-c-func 'crypt (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define-extern getenv (make-c-func 'getenv (ptr <c-char>) (list (ptr <c-char>))))
(define-extern getlogin (make-c-func 'getlogin (ptr <c-char>) (list <c-void>)))
(define-ctype Sigsave_t (c-struct 'sigaction))
(define-ctype runops_proc_t (make-c-func-ptr <c-int> (list (ptr <PerlInterpreter>))))
(define-ctype share_proc_t (make-c-func-ptr <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-ctype thrhook_proc_t (make-c-func-ptr <c-int> (list (ptr <PerlInterpreter>))))
(define-ctype PPADDR_t (make-c-array (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>)))) #f))
(define-extern environ (deref (cast (ptr (ptr (ptr <c-char>))) (c-lookup-symbol 'environ))))
(define-extern PL_warn_uninit (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_warn_uninit))))
(define-extern PL_warn_nosemi (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_warn_nosemi))))
(define-extern PL_warn_reserved (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_warn_reserved))))
(define-extern PL_warn_nl (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_warn_nl))))
(define-extern PL_no_wrongref (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_wrongref))))
(define-extern PL_no_symref (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_symref))))
(define-extern PL_no_usym (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_usym))))
(define-extern PL_no_aelem (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_aelem))))
(define-extern PL_no_helem (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_helem))))
(define-extern PL_no_modify (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_modify))))
(define-extern PL_no_mem (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_mem))))
(define-extern PL_no_security (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_security))))
(define-extern PL_no_sock_func (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_sock_func))))
(define-extern PL_no_dir_func (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_dir_func))))
(define-extern PL_no_func (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_func))))
(define-extern PL_no_myglob (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_myglob))))
(define-extern PL_no_localize_ref (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_no_localize_ref))))
(define-extern PL_memory_wrap (deref (cast (ptr (make-c-array <c-char> #f)) (c-lookup-symbol 'PL_memory_wrap))))
(define-extern PL_uuemap (deref (cast (ptr (make-c-array <c-char> 65)) (c-lookup-symbol 'PL_uuemap))))
(define-extern PL_sig_name (deref (cast (ptr (make-c-array (ptr <c-char>) #f)) (c-lookup-symbol 'PL_sig_name))))
(define-extern PL_sig_num (deref (cast (ptr (make-c-array <c-int> #f)) (c-lookup-symbol 'PL_sig_num))))
(define-extern PL_fold (deref (cast (ptr (make-c-array <c-uchar> #f)) (c-lookup-symbol 'PL_fold))))
(define-extern PL_fold_locale (deref (cast (ptr (make-c-array <c-uchar> #f)) (c-lookup-symbol 'PL_fold_locale))))
(define-extern PL_freq (deref (cast (ptr (make-c-array <c-uchar> #f)) (c-lookup-symbol 'PL_freq))))
(define-c-union G415)
(init-c-union! (c-union 'G415) (list (cons 'ival <I32>) (cons 'pval (ptr <c-char>)) (cons 'opval (ptr <OP>)) (cons 'gvval (ptr <GV>))))
(define-ctype YYSTYPE (c-union 'G415))
(define-enum XOPERATOR 0)
(define-enum XTERM 1)
(define-enum XREF 2)
(define-enum XSTATE 3)
(define-enum XBLOCK 4)
(define-enum XATTRBLOCK 5)
(define-enum XATTRTERM 6)
(define-enum XTERMBLOCK 7)
(define-ctype expectation <c-int>)
(define-enum want_vtbl_sv 0)
(define-enum want_vtbl_env 1)
(define-enum want_vtbl_envelem 2)
(define-enum want_vtbl_sig 3)
(define-enum want_vtbl_sigelem 4)
(define-enum want_vtbl_pack 5)
(define-enum want_vtbl_packelem 6)
(define-enum want_vtbl_dbline 7)
(define-enum want_vtbl_isa 8)
(define-enum want_vtbl_isaelem 9)
(define-enum want_vtbl_arylen 10)
(define-enum want_vtbl_glob 11)
(define-enum want_vtbl_mglob 12)
(define-enum want_vtbl_nkeys 13)
(define-enum want_vtbl_taint 14)
(define-enum want_vtbl_substr 15)
(define-enum want_vtbl_vec 16)
(define-enum want_vtbl_pos 17)
(define-enum want_vtbl_bm 18)
(define-enum want_vtbl_fm 19)
(define-enum want_vtbl_uvar 20)
(define-enum want_vtbl_defelem 21)
(define-enum want_vtbl_regexp 22)
(define-enum want_vtbl_collxfrm 23)
(define-enum want_vtbl_amagic 24)
(define-enum want_vtbl_amagicelem 25)
(define-enum want_vtbl_regdata 26)
(define-enum want_vtbl_regdatum 27)
(define-enum want_vtbl_backref 28)
(define-enum want_vtbl_utf8 29)
(define-c-struct perl_debug_pad)
(init-c-struct! (c-struct 'perl_debug_pad) (list (cons 'pad (make-c-array <SV> 3))))
(define-ctype peep_t (make-c-func-ptr <c-void> (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-ctype regcomp_t (make-c-func-ptr (ptr <regexp>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) (ptr <PMOP>))))
(define-ctype regexec_t (make-c-func-ptr <I32> (list (ptr <PerlInterpreter>) (ptr <regexp>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) <I32> (ptr <SV>) (ptr <c-void>) <U32>)))
(define-ctype re_intuit_start_t (make-c-func-ptr (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <regexp>) (ptr <SV>) (ptr <c-char>) (ptr <c-char>) <U32> (ptr (c-struct 're_scream_pos_data_s)))))
(define-ctype re_intuit_string_t (make-c-func-ptr (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <regexp>))))
(define-ctype regfree_t (make-c-func-ptr <c-void> (list (ptr <PerlInterpreter>) (ptr (c-struct 'regexp)))))
(define-ctype DESTRUCTORFUNC_NOCONTEXT_t (make-c-func-ptr <c-void> (list (ptr <c-void>))))
(define-ctype DESTRUCTORFUNC_t (make-c-func-ptr <c-void> (list (ptr <PerlInterpreter>) (ptr <c-void>))))
(define-ctype SVFUNC_t (make-c-func-ptr <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-ctype SVCOMPARE_t (make-c-func-ptr <I32> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>))))
(define-ctype XSINIT_t (make-c-func-ptr <c-void> (list (ptr <PerlInterpreter>))))
(define-ctype ATEXIT_t (make-c-func-ptr <c-void> (list (ptr <PerlInterpreter>) (ptr <c-void>))))
(define-ctype XSUBADDR_t (make-c-func-ptr <c-void> (list (ptr <PerlInterpreter>) (ptr <CV>))))
(define-c-struct exitlistentry)
(init-c-struct! (c-struct 'exitlistentry) (list (cons 'fn (make-c-func-ptr <c-void> (list (list 'my_perl (ptr <PerlInterpreter>)) (list '#f (ptr <c-void>))))) (cons 'ptr (ptr <c-void>))))
(define-ctype PerlExitListEntry (c-struct 'exitlistentry))
(define-c-struct re_cc_state)
(init-c-struct! (c-struct 'interpreter) (list (cons 'Tstack_sp (ptr (ptr <SV>))) (cons 'Top (ptr <OP>)) (cons 'Tcurpad (ptr (ptr <SV>))) (cons 'Tstack_base (ptr (ptr <SV>))) (cons 'Tstack_max (ptr (ptr <SV>))) (cons 'Tscopestack (ptr <I32>)) (cons 'Tscopestack_ix <I32>) (cons 'Tscopestack_max <I32>) (cons 'Tsavestack (ptr <ANY>)) (cons 'Tsavestack_ix <I32>) (cons 'Tsavestack_max <I32>) (cons 'Ttmps_stack (ptr (ptr <SV>))) (cons 'Ttmps_ix <I32>) (cons 'Ttmps_floor <I32>) (cons 'Ttmps_max <I32>) (cons 'Tmarkstack (ptr <I32>)) (cons 'Tmarkstack_ptr (ptr <I32>)) (cons 'Tmarkstack_max (ptr <I32>)) (cons 'Tretstack (ptr (ptr <OP>))) (cons 'Tretstack_ix <I32>) (cons 'Tretstack_max <I32>) (cons 'TSv (ptr <SV>)) (cons 'TXpv (ptr <XPV>)) (cons 'Tna <STRLEN>) (cons 'Tstatbuf (c-struct 'stat)) (cons 'Tstatcache (c-struct 'stat)) (cons 'Tstatgv (ptr <GV>)) (cons 'Tstatname (ptr <SV>)) (cons 'Ttimesbuf (c-struct 'tms)) (cons 'Ttainted <c-char>) (cons 'Tcurpm (ptr <PMOP>)) (cons 'Tnrs (ptr <SV>)) (cons 'Trs (ptr <SV>)) (cons 'Tlast_in_gv (ptr <GV>)) (cons 'Tofs_sv (ptr <SV>)) (cons 'Tdefoutgv (ptr <GV>)) (cons 'Tchopset (ptr <c-char>)) (cons 'Tformtarget (ptr <SV>)) (cons 'Tbodytarget (ptr <SV>)) (cons 'Ttoptarget (ptr <SV>)) (cons 'Tdefstash (ptr <HV>)) (cons 'Tcurstash (ptr <HV>)) (cons 'Trestartop (ptr <OP>)) (cons 'Tcurcop (ptr <COP>)) (cons 'Tin_eval <c-int>) (cons 'Tdelaymagic <c-int>) (cons 'Tdirty <c-char>) (cons 'Tlocalizing <c-int>) (cons 'Tcurstack (ptr <AV>)) (cons 'Tcurstackinfo (ptr <PERL_SI>)) (cons 'Tmainstack (ptr <AV>)) (cons 'Ttop_env (ptr <JMPENV>)) (cons 'Tstart_env <JMPENV>) (cons 'Terrors (ptr <SV>)) (cons 'Tav_fetch_sv (ptr <SV>)) (cons 'Thv_fetch_sv (ptr <SV>)) (cons 'Thv_fetch_ent_mh (ptr <HE>)) (cons 'Tmodcount <I32>) (cons 'Tlastgotoprobe (ptr <OP>)) (cons 'Tdumpindent <I32>) (cons 'Tsortcop (ptr <OP>)) (cons 'Tsortstash (ptr <HV>)) (cons 'Tfirstgv (ptr <GV>)) (cons 'Tsecondgv (ptr <GV>)) (cons 'Tsortcxix <I32>) (cons 'Tefloatbuf (ptr <c-char>)) (cons 'Tefloatsize <STRLEN>) (cons 'Tscreamfirst (ptr <I32>)) (cons 'Tscreamnext (ptr <I32>)) (cons 'Tmaxscream <I32>) (cons 'Tlastscream (ptr <SV>)) (cons 'Tregdummy <regnode>) (cons 'Tregcomp_parse (ptr <c-char>)) (cons 'Tregxend (ptr <c-char>)) (cons 'Tregcode (ptr <regnode>)) (cons 'Tregnaughty <I32>) (cons 'Tregsawback <I32>) (cons 'Tregprecomp (ptr <c-char>)) (cons 'Tregnpar <I32>) (cons 'Tregsize <I32>) (cons 'Tregflags <U32>) (cons 'Tregseen <U32>) (cons 'Tseen_zerolen <I32>) (cons 'Tseen_evals <I32>) (cons 'Tregcomp_rx (ptr <regexp>)) (cons 'Textralen <I32>) (cons 'Tcolorset <c-int>) (cons 'Tcolors (make-c-array (ptr <c-char>) 6)) (cons 'Treg_whilem_seen <I32>) (cons 'Treginput (ptr <c-char>)) (cons 'Tregbol (ptr <c-char>)) (cons 'Tregeol (ptr <c-char>)) (cons 'Tregstartp (ptr <I32>)) (cons 'Tregendp (ptr <I32>)) (cons 'Treglastparen (ptr <U32>)) (cons 'Treglastcloseparen (ptr <U32>)) (cons 'Tregtill (ptr <c-char>)) (cons 'Tregcompat1 <c-char>) (cons 'Treg_start_tmp (ptr (ptr <c-char>))) (cons 'Treg_start_tmpl <U32>) (cons 'Tregdata (ptr (c-struct 'reg_data))) (cons 'Tbostr (ptr <c-char>)) (cons 'Treg_flags <U32>) (cons 'Treg_eval_set <I32>) (cons 'Tregnarrate <I32>) (cons 'Tregprogram (ptr <regnode>)) (cons 'Tregindent <c-int>) (cons 'Tregcc (ptr <CURCUR>)) (cons 'Treg_call_cc (ptr (c-struct 're_cc_state))) (cons 'Treg_re (ptr <regexp>)) (cons 'Treg_ganch (ptr <c-char>)) (cons 'Treg_sv (ptr <SV>)) (cons 'Treg_magic (ptr <MAGIC>)) (cons 'Treg_oldpos <I32>) (cons 'Treg_oldcurpm (ptr <PMOP>)) (cons 'Treg_curpm (ptr <PMOP>)) (cons 'Treg_oldsaved (ptr <c-char>)) (cons 'Treg_oldsavedlen <STRLEN>) (cons 'Treg_maxiter <I32>) (cons 'Treg_leftiter <I32>) (cons 'Treg_poscache (ptr <c-char>)) (cons 'Treg_poscache_size <STRLEN>) (cons 'Tpeepp <peep_t>) (cons 'Tregcompp <regcomp_t>) (cons 'Tregexecp <regexec_t>) (cons 'Tregint_start <re_intuit_start_t>) (cons 'Tregint_string <re_intuit_string_t>) (cons 'Tregfree <regfree_t>) (cons 'Treginterp_cnt <c-int>) (cons 'Treg_starttry (ptr <c-char>)) (cons 'Twatchaddr (ptr (ptr <c-char>))) (cons 'Twatchok (ptr <c-char>)) (cons 'Treg_match_utf8 <c-char>) (cons 'Tcomppad (ptr <AV>)) (cons 'Iorigargc <c-int>) (cons 'Iorigargv (ptr (ptr <c-char>))) (cons 'Ienvgv (ptr <GV>)) (cons 'Iincgv (ptr <GV>)) (cons 'Ihintgv (ptr <GV>)) (cons 'Iorigfilename (ptr <c-char>)) (cons 'Idiehook (ptr <SV>)) (cons 'Iwarnhook (ptr <SV>)) (cons 'Iminus_c <c-char>) (cons 'Ipatchlevel (ptr <SV>)) (cons 'Ilocalpatches (ptr (ptr <c-char>))) (cons 'Isplitstr (ptr <c-char>)) (cons 'Ipreprocess <c-char>) (cons 'Iminus_n <c-char>) (cons 'Iminus_p <c-char>) (cons 'Iminus_l <c-char>) (cons 'Iminus_a <c-char>) (cons 'Iminus_F <c-char>) (cons 'Idoswitches <c-char>) (cons 'Idowarn <U8>) (cons 'Iwidesyscalls <c-char>) (cons 'Idoextract <c-char>) (cons 'Isawampersand <c-char>) (cons 'Iunsafe <c-char>) (cons 'Iinplace (ptr <c-char>)) (cons 'Ie_script (ptr <SV>)) (cons 'Iperldb <U32>) (cons 'Iperl_destruct_level <c-int>) (cons 'Ibasetime <time_t>) (cons 'Iformfeed (ptr <SV>)) (cons 'Imaxsysfd <I32>) (cons 'Imultiline <c-int>) (cons 'Istatusvalue <I32>) (cons 'Iexit_flags <U8>) (cons 'Istdingv (ptr <GV>)) (cons 'Istderrgv (ptr <GV>)) (cons 'Idefgv (ptr <GV>)) (cons 'Iargvgv (ptr <GV>)) (cons 'Iargvoutgv (ptr <GV>)) (cons 'Iargvout_stack (ptr <AV>)) (cons 'Ireplgv (ptr <GV>)) (cons 'Ierrgv (ptr <GV>)) (cons 'IDBgv (ptr <GV>)) (cons 'IDBline (ptr <GV>)) (cons 'IDBsub (ptr <GV>)) (cons 'IDBsingle (ptr <SV>)) (cons 'IDBtrace (ptr <SV>)) (cons 'IDBsignal (ptr <SV>)) (cons 'Ilineary (ptr <AV>)) (cons 'Idbargs (ptr <AV>)) (cons 'Idebstash (ptr <HV>)) (cons 'Iglobalstash (ptr <HV>)) (cons 'Icurstname (ptr <SV>)) (cons 'Ibeginav (ptr <AV>)) (cons 'Iendav (ptr <AV>)) (cons 'Icheckav (ptr <AV>)) (cons 'Iinitav (ptr <AV>)) (cons 'Istrtab (ptr <HV>)) (cons 'Isub_generation <U32>) (cons 'Isv_count <I32>) (cons 'Isv_objcount <I32>) (cons 'Isv_root (ptr <SV>)) (cons 'Isv_arenaroot (ptr <SV>)) (cons 'Iforkprocess <c-int>) (cons 'Ifdpid (ptr <AV>)) (cons 'Itainting <c-char>) (cons 'Iop_mask (ptr <c-char>)) (cons 'Imain_cv (ptr <CV>)) (cons 'Imain_root (ptr <OP>)) (cons 'Imain_start (ptr <OP>)) (cons 'Ieval_root (ptr <OP>)) (cons 'Ieval_start (ptr <OP>)) (cons 'Icurcopdb (ptr <COP>)) (cons 'Icopline <line_t>) (cons 'Ifilemode <c-int>) (cons 'Ilastfd <c-int>) (cons 'Ioldname (ptr <c-char>)) (cons 'IArgv (ptr (ptr <c-char>))) (cons 'ICmd (ptr <c-char>)) (cons 'Igensym <I32>) (cons 'Ipreambled <c-char>) (cons 'Ipreambleav (ptr <AV>)) (cons 'Ilaststatval <c-int>) (cons 'Ilaststype <I32>) (cons 'Imess_sv (ptr <SV>)) (cons 'Iors_sv (ptr <SV>)) (cons 'Iofmt (ptr <c-char>)) (cons 'Iexitlist (ptr <PerlExitListEntry>)) (cons 'Iexitlistlen <I32>) (cons 'Imodglobal (ptr <HV>)) (cons 'Iprofiledata (ptr <U32>)) (cons 'Irsfp (ptr <PerlIO>)) (cons 'Irsfp_filters (ptr <AV>)) (cons 'Icompiling <COP>) (cons 'Icompcv (ptr <CV>)) (cons 'IBINCOMPAT0 (ptr <AV>)) (cons 'Icomppad_name (ptr <AV>)) (cons 'Icomppad_name_fill <I32>) (cons 'Icomppad_name_floor <I32>) (cons 'Igeneration <c-int>) (cons 'IDBcv (ptr <CV>)) (cons 'Iin_clean_objs <c-char>) (cons 'Iin_clean_all <c-char>) (cons 'Ilinestart (ptr <c-char>)) (cons 'Ipending_ident <c-char>) (cons 'Isublex_info <SUBLEXINFO>) (cons 'Iuid <uid_t>) (cons 'Ieuid <uid_t>) (cons 'Igid <gid_t>) (cons 'Iegid <gid_t>) (cons 'Inomemok <c-char>) (cons 'Ian <U32>) (cons 'Icop_seqmax <U32>) (cons 'Iop_seqmax <U16>) (cons 'Ievalseq <U32>) (cons 'Iorigenviron (ptr (ptr <c-char>))) (cons 'Iorigalen <U32>) (cons 'Ipidstatus (ptr <HV>)) (cons 'Imaxo <c-int>) (cons 'Iosname (ptr <c-char>)) (cons 'Ish_path_compat (ptr <c-char>)) (cons 'Isighandlerp <Sighandler_t>) (cons 'Ixiv_arenaroot (ptr <XPV>)) (cons 'Ixiv_root (ptr <IV>)) (cons 'Ixnv_root (ptr <NV>)) (cons 'Ixrv_root (ptr <XRV>)) (cons 'Ixpv_root (ptr <XPV>)) (cons 'Ixpviv_root (ptr <XPVIV>)) (cons 'Ixpvnv_root (ptr <XPVNV>)) (cons 'Ixpvcv_root (ptr <XPVCV>)) (cons 'Ixpvav_root (ptr <XPVAV>)) (cons 'Ixpvhv_root (ptr <XPVHV>)) (cons 'Ixpvmg_root (ptr <XPVMG>)) (cons 'Ixpvlv_root (ptr <XPVLV>)) (cons 'Ixpvbm_root (ptr <XPVBM>)) (cons 'Ihe_root (ptr <HE>)) (cons 'Inice_chunk (ptr <c-char>)) (cons 'Inice_chunk_size <U32>) (cons 'Irunops <runops_proc_t>) (cons 'Itokenbuf (make-c-array <c-char> 256)) (cons 'Isv_undef <SV>) (cons 'Isv_no <SV>) (cons 'Isv_yes <SV>) (cons 'Icshname (ptr <c-char>)) (cons 'Icshlen <I32>) (cons 'Ilex_state <U32>) (cons 'Ilex_defer <U32>) (cons 'Ilex_expect <c-int>) (cons 'Ilex_brackets <I32>) (cons 'Ilex_formbrack <I32>) (cons 'Ilex_casemods <I32>) (cons 'Ilex_dojoin <I32>) (cons 'Ilex_starts <I32>) (cons 'Ilex_stuff (ptr <SV>)) (cons 'Ilex_repl (ptr <SV>)) (cons 'Ilex_op (ptr <OP>)) (cons 'Ilex_inpat (ptr <OP>)) (cons 'Ilex_inwhat <I32>) (cons 'Ilex_brackstack (ptr <c-char>)) (cons 'Ilex_casestack (ptr <c-char>)) (cons 'Inextval (make-c-array <YYSTYPE> 5)) (cons 'Inexttype (make-c-array <I32> 5)) (cons 'Inexttoke <I32>) (cons 'Ilinestr (ptr <SV>)) (cons 'Ibufptr (ptr <c-char>)) (cons 'Ioldbufptr (ptr <c-char>)) (cons 'Ioldoldbufptr (ptr <c-char>)) (cons 'Ibufend (ptr <c-char>)) (cons 'Iexpect <c-int>) (cons 'Imulti_start <I32>) (cons 'Imulti_end <I32>) (cons 'Imulti_open <I32>) (cons 'Imulti_close <I32>) (cons 'Ierror_count <I32>) (cons 'Isubline <I32>) (cons 'Isubname (ptr <SV>)) (cons 'Imin_intro_pending <I32>) (cons 'Imax_intro_pending <I32>) (cons 'Ipadix <I32>) (cons 'Ipadix_floor <I32>) (cons 'Ipad_reset_pending <I32>) (cons 'Ilast_uni (ptr <c-char>)) (cons 'Ilast_lop (ptr <c-char>)) (cons 'Ilast_lop_op <U16>) (cons 'Iin_my <I32>) (cons 'Iin_my_stash (ptr <HV>)) (cons 'Ihints <U32>) (cons 'Idebug <U32>) (cons 'Iamagic_generation <c-long>) (cons 'Icollation_ix <U32>) (cons 'Icollation_name (ptr <c-char>)) (cons 'Icollation_standard <c-char>) (cons 'Icollxfrm_base <size_t>) (cons 'Icollxfrm_mult <size_t>) (cons 'Inumeric_name (ptr <c-char>)) (cons 'Inumeric_standard <c-char>) (cons 'Inumeric_local <c-char>) (cons 'Inumeric_compat1 <c-char>) (cons 'Iutf8_alnum (ptr <SV>)) (cons 'Iutf8_alnumc (ptr <SV>)) (cons 'Iutf8_ascii (ptr <SV>)) (cons 'Iutf8_alpha (ptr <SV>)) (cons 'Iutf8_space (ptr <SV>)) (cons 'Iutf8_cntrl (ptr <SV>)) (cons 'Iutf8_graph (ptr <SV>)) (cons 'Iutf8_digit (ptr <SV>)) (cons 'Iutf8_upper (ptr <SV>)) (cons 'Iutf8_lower (ptr <SV>)) (cons 'Iutf8_print (ptr <SV>)) (cons 'Iutf8_punct (ptr <SV>)) (cons 'Iutf8_xdigit (ptr <SV>)) (cons 'Iutf8_mark (ptr <SV>)) (cons 'Iutf8_toupper (ptr <SV>)) (cons 'Iutf8_totitle (ptr <SV>)) (cons 'Iutf8_tolower (ptr <SV>)) (cons 'Iutf8_tofold (ptr <SV>)) (cons 'Ilast_swash_hv (ptr <HV>)) (cons 'Ilast_swash_klen <U32>) (cons 'Ilast_swash_key (make-c-array <U8> 10)) (cons 'Ilast_swash_tmps (ptr <U8>)) (cons 'Ilast_swash_slen <STRLEN>) (cons 'Iyydebug <c-int>) (cons 'Iyynerrs <c-int>) (cons 'Iyyerrflag <c-int>) (cons 'Iyychar <c-int>) (cons 'Iyyval <YYSTYPE>) (cons 'Iyylval <YYSTYPE>) (cons 'Iglob_index <c-int>) (cons 'Isrand_called <c-char>) (cons 'Iuudmap (make-c-array <c-char> 256)) (cons 'Ibitcount (ptr <c-char>)) (cons 'Ipsig_ptr (ptr (ptr <SV>))) (cons 'Ipsig_name (ptr (ptr <SV>))) (cons 'Iptr_table (ptr <PTR_TBL_t>)) (cons 'Ibeginav_save (ptr <AV>)) (cons 'Inullstash (ptr <HV>)) (cons 'Ixnv_arenaroot (ptr <XPV>)) (cons 'Ixrv_arenaroot (ptr <XPV>)) (cons 'Ixpv_arenaroot (ptr <XPV>)) (cons 'Ixpviv_arenaroot (ptr <XPVIV>)) (cons 'Ixpvnv_arenaroot (ptr <XPVNV>)) (cons 'Ixpvcv_arenaroot (ptr <XPVCV>)) (cons 'Ixpvav_arenaroot (ptr <XPVAV>)) (cons 'Ixpvhv_arenaroot (ptr <XPVHV>)) (cons 'Ixpvmg_arenaroot (ptr <XPVMG>)) (cons 'Ixpvlv_arenaroot (ptr <XPVLV>)) (cons 'Ixpvbm_arenaroot (ptr <XPVBM>)) (cons 'Ihe_arenaroot (ptr <XPV>)) (cons 'Ipsig_pend (ptr <c-int>)) (cons 'Isig_pending <c-int>) (cons 'Inumeric_radix_sv (ptr <SV>)) (cons 'Iregex_pad (ptr (ptr <SV>))) (cons 'Iregex_padav (ptr <AV>)) (cons 'Ireentrant_buffer (ptr <REENTR>)) (cons 'Isavebegin <c-char>) (cons 'Icustom_op_names (ptr <HV>)) (cons 'Icustom_op_descs (ptr <HV>)) (cons 'Iperlio (ptr <PerlIO>)) (cons 'Iknown_layers (ptr <PerlIO_list_t>)) (cons 'Idef_layerlist (ptr <PerlIO_list_t>)) (cons 'Iencoding (ptr <SV>)) (cons 'Idebug_pad (c-struct 'perl_debug_pad)) (cons 'Itaint_warn <c-char>) (cons 'Iutf8locale <c-char>) (cons 'Iutf8_idstart (ptr <SV>)) (cons 'Iutf8_idcont (ptr <SV>)) (cons 'Isort_RealCmp <SVCOMPARE_t>) (cons 'Icheckav_save (ptr <AV>)) (cons 'Iclocktick <c-long>) (cons 'Iin_load_module <c-int>) (cons 'Iunicode <U32>) (cons 'Isignals <U32>) (cons 'Istashcache (ptr <HV>)) (cons 'Ireentrant_retint <c-int>) (cons 'Isharehook <share_proc_t>) (cons 'Ilockhook <share_proc_t>) (cons 'Iunlockhook <share_proc_t>) (cons 'Ithreadhook <thrhook_proc_t>) (cons 'Irunops_std <runops_proc_t>) (cons 'Irunops_dbg <runops_proc_t>) (cons 'Ihash_seed <UV>) (cons 'Ihash_seed_set <c-char>) (cons 'Irehash_seed <UV>) (cons 'Irehash_seed_set <c-char>) (cons 'Ifdscript <c-int>) (cons 'Isuidscript <c-int>) (cons 'object_compatibility (make-c-array <c-char> 30))))
(define-ctype Thread (ptr <c-void>))
(define-enum e_no_len 0)
(define-enum e_number 1)
(define-enum e_star 2)
(define-ctype howlen_t <c-int>)
(define-c-struct G416)
(init-c-struct! (c-struct 'G416) (list (cons 'patptr (ptr <c-char>)) (cons 'patend (ptr <c-char>)) (cons 'grpbeg (ptr <c-char>)) (cons 'grpend (ptr <c-char>)) (cons 'code <I32>) (cons 'length <I32>) (cons 'howlen <howlen_t>) (cons 'level <c-int>) (cons 'flags <U32>)))
(define-ctype tempsym_t (c-struct 'G416))
(define-extern perl_alloc (make-c-func 'perl_alloc (ptr <PerlInterpreter>) (list <c-void>)))
(define-extern perl_construct (make-c-func 'perl_construct <c-void> (list (ptr <PerlInterpreter>))))
(define-extern perl_destruct (make-c-func 'perl_destruct <c-int> (list (ptr <PerlInterpreter>))))
(define-extern perl_free (make-c-func 'perl_free <c-void> (list (ptr <PerlInterpreter>))))
(define-extern perl_run (make-c-func 'perl_run <c-int> (list (ptr <PerlInterpreter>))))
(define-extern perl_parse (make-c-func 'perl_parse <c-int> (list (ptr <PerlInterpreter>) <XSINIT_t> <c-int> (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define-extern Perl_doing_taint (make-c-func 'Perl_doing_taint <c-char> (list <c-int> (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define-extern perl_clone (make-c-func 'perl_clone (ptr <PerlInterpreter>) (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_malloc (make-c-func 'Perl_malloc (ptr <c-void>) (list <size_t>)))
(define-extern Perl_calloc (make-c-func 'Perl_calloc (ptr <c-void>) (list <size_t> <size_t>)))
(define-extern Perl_realloc (make-c-func 'Perl_realloc (ptr <c-void>) (list (ptr <c-void>) <size_t>)))
(define-extern Perl_mfree (make-c-func 'Perl_mfree <c-void> (list (ptr <c-void>))))
(define-extern Perl_get_context (make-c-func 'Perl_get_context (ptr <c-void>) (list <c-void>)))
(define-extern Perl_set_context (make-c-func 'Perl_set_context <c-void> (list (ptr <c-void>))))
(define-extern Perl_ck_anoncode (make-c-func 'Perl_ck_anoncode (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_bitop (make-c-func 'Perl_ck_bitop (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_concat (make-c-func 'Perl_ck_concat (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_defined (make-c-func 'Perl_ck_defined (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_delete (make-c-func 'Perl_ck_delete (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_die (make-c-func 'Perl_ck_die (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_eof (make-c-func 'Perl_ck_eof (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_eval (make-c-func 'Perl_ck_eval (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_exec (make-c-func 'Perl_ck_exec (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_exists (make-c-func 'Perl_ck_exists (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_exit (make-c-func 'Perl_ck_exit (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_ftst (make-c-func 'Perl_ck_ftst (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_fun (make-c-func 'Perl_ck_fun (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_glob (make-c-func 'Perl_ck_glob (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_grep (make-c-func 'Perl_ck_grep (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_index (make-c-func 'Perl_ck_index (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_join (make-c-func 'Perl_ck_join (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_lengthconst (make-c-func 'Perl_ck_lengthconst (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_lfun (make-c-func 'Perl_ck_lfun (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_listiob (make-c-func 'Perl_ck_listiob (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_match (make-c-func 'Perl_ck_match (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_method (make-c-func 'Perl_ck_method (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_null (make-c-func 'Perl_ck_null (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_open (make-c-func 'Perl_ck_open (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_repeat (make-c-func 'Perl_ck_repeat (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_require (make-c-func 'Perl_ck_require (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_return (make-c-func 'Perl_ck_return (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_rfun (make-c-func 'Perl_ck_rfun (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_rvconst (make-c-func 'Perl_ck_rvconst (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_sassign (make-c-func 'Perl_ck_sassign (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_select (make-c-func 'Perl_ck_select (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_shift (make-c-func 'Perl_ck_shift (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_sort (make-c-func 'Perl_ck_sort (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_spair (make-c-func 'Perl_ck_spair (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_split (make-c-func 'Perl_ck_split (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_subr (make-c-func 'Perl_ck_subr (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_substr (make-c-func 'Perl_ck_substr (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_svconst (make-c-func 'Perl_ck_svconst (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_ck_trunc (make-c-func 'Perl_ck_trunc (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_pp_null (make-c-func 'Perl_pp_null (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_stub (make-c-func 'Perl_pp_stub (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_scalar (make-c-func 'Perl_pp_scalar (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_pushmark (make-c-func 'Perl_pp_pushmark (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_wantarray (make-c-func 'Perl_pp_wantarray (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_const (make-c-func 'Perl_pp_const (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gvsv (make-c-func 'Perl_pp_gvsv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gv (make-c-func 'Perl_pp_gv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gelem (make-c-func 'Perl_pp_gelem (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_padsv (make-c-func 'Perl_pp_padsv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_padav (make-c-func 'Perl_pp_padav (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_padhv (make-c-func 'Perl_pp_padhv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_padany (make-c-func 'Perl_pp_padany (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_pushre (make-c-func 'Perl_pp_pushre (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_rv2gv (make-c-func 'Perl_pp_rv2gv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_rv2sv (make-c-func 'Perl_pp_rv2sv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_av2arylen (make-c-func 'Perl_pp_av2arylen (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_rv2cv (make-c-func 'Perl_pp_rv2cv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_anoncode (make-c-func 'Perl_pp_anoncode (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_prototype (make-c-func 'Perl_pp_prototype (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_refgen (make-c-func 'Perl_pp_refgen (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_srefgen (make-c-func 'Perl_pp_srefgen (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ref (make-c-func 'Perl_pp_ref (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_bless (make-c-func 'Perl_pp_bless (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_backtick (make-c-func 'Perl_pp_backtick (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_glob (make-c-func 'Perl_pp_glob (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_readline (make-c-func 'Perl_pp_readline (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_rcatline (make-c-func 'Perl_pp_rcatline (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_regcmaybe (make-c-func 'Perl_pp_regcmaybe (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_regcreset (make-c-func 'Perl_pp_regcreset (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_regcomp (make-c-func 'Perl_pp_regcomp (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_match (make-c-func 'Perl_pp_match (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_qr (make-c-func 'Perl_pp_qr (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_subst (make-c-func 'Perl_pp_subst (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_substcont (make-c-func 'Perl_pp_substcont (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_trans (make-c-func 'Perl_pp_trans (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sassign (make-c-func 'Perl_pp_sassign (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_aassign (make-c-func 'Perl_pp_aassign (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_chop (make-c-func 'Perl_pp_chop (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_schop (make-c-func 'Perl_pp_schop (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_chomp (make-c-func 'Perl_pp_chomp (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_schomp (make-c-func 'Perl_pp_schomp (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_defined (make-c-func 'Perl_pp_defined (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_undef (make-c-func 'Perl_pp_undef (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_study (make-c-func 'Perl_pp_study (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_pos (make-c-func 'Perl_pp_pos (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_preinc (make-c-func 'Perl_pp_preinc (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_predec (make-c-func 'Perl_pp_predec (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_postinc (make-c-func 'Perl_pp_postinc (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_postdec (make-c-func 'Perl_pp_postdec (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_pow (make-c-func 'Perl_pp_pow (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_multiply (make-c-func 'Perl_pp_multiply (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_multiply (make-c-func 'Perl_pp_i_multiply (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_divide (make-c-func 'Perl_pp_divide (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_divide (make-c-func 'Perl_pp_i_divide (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_modulo (make-c-func 'Perl_pp_modulo (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_modulo (make-c-func 'Perl_pp_i_modulo (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_repeat (make-c-func 'Perl_pp_repeat (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_add (make-c-func 'Perl_pp_add (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_add (make-c-func 'Perl_pp_i_add (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_subtract (make-c-func 'Perl_pp_subtract (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_subtract (make-c-func 'Perl_pp_i_subtract (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_concat (make-c-func 'Perl_pp_concat (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_stringify (make-c-func 'Perl_pp_stringify (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_left_shift (make-c-func 'Perl_pp_left_shift (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_right_shift (make-c-func 'Perl_pp_right_shift (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_lt (make-c-func 'Perl_pp_lt (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_lt (make-c-func 'Perl_pp_i_lt (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gt (make-c-func 'Perl_pp_gt (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_gt (make-c-func 'Perl_pp_i_gt (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_le (make-c-func 'Perl_pp_le (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_le (make-c-func 'Perl_pp_i_le (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ge (make-c-func 'Perl_pp_ge (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_ge (make-c-func 'Perl_pp_i_ge (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_eq (make-c-func 'Perl_pp_eq (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_eq (make-c-func 'Perl_pp_i_eq (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ne (make-c-func 'Perl_pp_ne (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_ne (make-c-func 'Perl_pp_i_ne (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ncmp (make-c-func 'Perl_pp_ncmp (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_ncmp (make-c-func 'Perl_pp_i_ncmp (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_slt (make-c-func 'Perl_pp_slt (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sgt (make-c-func 'Perl_pp_sgt (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sle (make-c-func 'Perl_pp_sle (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sge (make-c-func 'Perl_pp_sge (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_seq (make-c-func 'Perl_pp_seq (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sne (make-c-func 'Perl_pp_sne (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_scmp (make-c-func 'Perl_pp_scmp (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_bit_and (make-c-func 'Perl_pp_bit_and (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_bit_xor (make-c-func 'Perl_pp_bit_xor (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_bit_or (make-c-func 'Perl_pp_bit_or (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_negate (make-c-func 'Perl_pp_negate (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_i_negate (make-c-func 'Perl_pp_i_negate (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_not (make-c-func 'Perl_pp_not (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_complement (make-c-func 'Perl_pp_complement (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_atan2 (make-c-func 'Perl_pp_atan2 (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sin (make-c-func 'Perl_pp_sin (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_cos (make-c-func 'Perl_pp_cos (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_rand (make-c-func 'Perl_pp_rand (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_srand (make-c-func 'Perl_pp_srand (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_exp (make-c-func 'Perl_pp_exp (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_log (make-c-func 'Perl_pp_log (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sqrt (make-c-func 'Perl_pp_sqrt (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_int (make-c-func 'Perl_pp_int (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_hex (make-c-func 'Perl_pp_hex (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_oct (make-c-func 'Perl_pp_oct (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_abs (make-c-func 'Perl_pp_abs (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_length (make-c-func 'Perl_pp_length (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_substr (make-c-func 'Perl_pp_substr (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_vec (make-c-func 'Perl_pp_vec (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_index (make-c-func 'Perl_pp_index (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_rindex (make-c-func 'Perl_pp_rindex (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sprintf (make-c-func 'Perl_pp_sprintf (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_formline (make-c-func 'Perl_pp_formline (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ord (make-c-func 'Perl_pp_ord (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_chr (make-c-func 'Perl_pp_chr (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_crypt (make-c-func 'Perl_pp_crypt (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ucfirst (make-c-func 'Perl_pp_ucfirst (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_lcfirst (make-c-func 'Perl_pp_lcfirst (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_uc (make-c-func 'Perl_pp_uc (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_lc (make-c-func 'Perl_pp_lc (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_quotemeta (make-c-func 'Perl_pp_quotemeta (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_rv2av (make-c-func 'Perl_pp_rv2av (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_aelemfast (make-c-func 'Perl_pp_aelemfast (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_aelem (make-c-func 'Perl_pp_aelem (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_aslice (make-c-func 'Perl_pp_aslice (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_each (make-c-func 'Perl_pp_each (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_values (make-c-func 'Perl_pp_values (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_keys (make-c-func 'Perl_pp_keys (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_delete (make-c-func 'Perl_pp_delete (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_exists (make-c-func 'Perl_pp_exists (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_rv2hv (make-c-func 'Perl_pp_rv2hv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_helem (make-c-func 'Perl_pp_helem (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_hslice (make-c-func 'Perl_pp_hslice (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_unpack (make-c-func 'Perl_pp_unpack (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_pack (make-c-func 'Perl_pp_pack (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_split (make-c-func 'Perl_pp_split (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_join (make-c-func 'Perl_pp_join (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_list (make-c-func 'Perl_pp_list (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_lslice (make-c-func 'Perl_pp_lslice (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_anonlist (make-c-func 'Perl_pp_anonlist (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_anonhash (make-c-func 'Perl_pp_anonhash (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_splice (make-c-func 'Perl_pp_splice (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_push (make-c-func 'Perl_pp_push (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_pop (make-c-func 'Perl_pp_pop (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_shift (make-c-func 'Perl_pp_shift (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_unshift (make-c-func 'Perl_pp_unshift (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sort (make-c-func 'Perl_pp_sort (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_reverse (make-c-func 'Perl_pp_reverse (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_grepstart (make-c-func 'Perl_pp_grepstart (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_grepwhile (make-c-func 'Perl_pp_grepwhile (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_mapstart (make-c-func 'Perl_pp_mapstart (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_mapwhile (make-c-func 'Perl_pp_mapwhile (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_range (make-c-func 'Perl_pp_range (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_flip (make-c-func 'Perl_pp_flip (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_flop (make-c-func 'Perl_pp_flop (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_and (make-c-func 'Perl_pp_and (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_or (make-c-func 'Perl_pp_or (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_xor (make-c-func 'Perl_pp_xor (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_cond_expr (make-c-func 'Perl_pp_cond_expr (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_andassign (make-c-func 'Perl_pp_andassign (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_orassign (make-c-func 'Perl_pp_orassign (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_method (make-c-func 'Perl_pp_method (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_entersub (make-c-func 'Perl_pp_entersub (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_leavesub (make-c-func 'Perl_pp_leavesub (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_leavesublv (make-c-func 'Perl_pp_leavesublv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_caller (make-c-func 'Perl_pp_caller (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_warn (make-c-func 'Perl_pp_warn (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_die (make-c-func 'Perl_pp_die (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_reset (make-c-func 'Perl_pp_reset (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_lineseq (make-c-func 'Perl_pp_lineseq (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_nextstate (make-c-func 'Perl_pp_nextstate (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_dbstate (make-c-func 'Perl_pp_dbstate (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_unstack (make-c-func 'Perl_pp_unstack (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_enter (make-c-func 'Perl_pp_enter (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_leave (make-c-func 'Perl_pp_leave (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_scope (make-c-func 'Perl_pp_scope (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_enteriter (make-c-func 'Perl_pp_enteriter (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_iter (make-c-func 'Perl_pp_iter (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_enterloop (make-c-func 'Perl_pp_enterloop (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_leaveloop (make-c-func 'Perl_pp_leaveloop (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_return (make-c-func 'Perl_pp_return (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_last (make-c-func 'Perl_pp_last (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_next (make-c-func 'Perl_pp_next (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_redo (make-c-func 'Perl_pp_redo (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_dump (make-c-func 'Perl_pp_dump (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_goto (make-c-func 'Perl_pp_goto (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_exit (make-c-func 'Perl_pp_exit (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_open (make-c-func 'Perl_pp_open (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_close (make-c-func 'Perl_pp_close (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_pipe_op (make-c-func 'Perl_pp_pipe_op (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_fileno (make-c-func 'Perl_pp_fileno (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_umask (make-c-func 'Perl_pp_umask (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_binmode (make-c-func 'Perl_pp_binmode (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_tie (make-c-func 'Perl_pp_tie (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_untie (make-c-func 'Perl_pp_untie (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_tied (make-c-func 'Perl_pp_tied (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_dbmopen (make-c-func 'Perl_pp_dbmopen (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_dbmclose (make-c-func 'Perl_pp_dbmclose (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sselect (make-c-func 'Perl_pp_sselect (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_select (make-c-func 'Perl_pp_select (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_getc (make-c-func 'Perl_pp_getc (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_read (make-c-func 'Perl_pp_read (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_enterwrite (make-c-func 'Perl_pp_enterwrite (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_leavewrite (make-c-func 'Perl_pp_leavewrite (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_prtf (make-c-func 'Perl_pp_prtf (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_print (make-c-func 'Perl_pp_print (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sysopen (make-c-func 'Perl_pp_sysopen (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sysseek (make-c-func 'Perl_pp_sysseek (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sysread (make-c-func 'Perl_pp_sysread (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_syswrite (make-c-func 'Perl_pp_syswrite (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_send (make-c-func 'Perl_pp_send (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_recv (make-c-func 'Perl_pp_recv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_eof (make-c-func 'Perl_pp_eof (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_tell (make-c-func 'Perl_pp_tell (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_seek (make-c-func 'Perl_pp_seek (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_truncate (make-c-func 'Perl_pp_truncate (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_fcntl (make-c-func 'Perl_pp_fcntl (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ioctl (make-c-func 'Perl_pp_ioctl (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_flock (make-c-func 'Perl_pp_flock (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_socket (make-c-func 'Perl_pp_socket (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sockpair (make-c-func 'Perl_pp_sockpair (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_bind (make-c-func 'Perl_pp_bind (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_connect (make-c-func 'Perl_pp_connect (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_listen (make-c-func 'Perl_pp_listen (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_accept (make-c-func 'Perl_pp_accept (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_shutdown (make-c-func 'Perl_pp_shutdown (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gsockopt (make-c-func 'Perl_pp_gsockopt (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ssockopt (make-c-func 'Perl_pp_ssockopt (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_getsockname (make-c-func 'Perl_pp_getsockname (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_getpeername (make-c-func 'Perl_pp_getpeername (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_lstat (make-c-func 'Perl_pp_lstat (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_stat (make-c-func 'Perl_pp_stat (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftrread (make-c-func 'Perl_pp_ftrread (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftrwrite (make-c-func 'Perl_pp_ftrwrite (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftrexec (make-c-func 'Perl_pp_ftrexec (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_fteread (make-c-func 'Perl_pp_fteread (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftewrite (make-c-func 'Perl_pp_ftewrite (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_fteexec (make-c-func 'Perl_pp_fteexec (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftis (make-c-func 'Perl_pp_ftis (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_fteowned (make-c-func 'Perl_pp_fteowned (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftrowned (make-c-func 'Perl_pp_ftrowned (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftzero (make-c-func 'Perl_pp_ftzero (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftsize (make-c-func 'Perl_pp_ftsize (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftmtime (make-c-func 'Perl_pp_ftmtime (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftatime (make-c-func 'Perl_pp_ftatime (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftctime (make-c-func 'Perl_pp_ftctime (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftsock (make-c-func 'Perl_pp_ftsock (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftchr (make-c-func 'Perl_pp_ftchr (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftblk (make-c-func 'Perl_pp_ftblk (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftfile (make-c-func 'Perl_pp_ftfile (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftdir (make-c-func 'Perl_pp_ftdir (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftpipe (make-c-func 'Perl_pp_ftpipe (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftlink (make-c-func 'Perl_pp_ftlink (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftsuid (make-c-func 'Perl_pp_ftsuid (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftsgid (make-c-func 'Perl_pp_ftsgid (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftsvtx (make-c-func 'Perl_pp_ftsvtx (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_fttty (make-c-func 'Perl_pp_fttty (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_fttext (make-c-func 'Perl_pp_fttext (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ftbinary (make-c-func 'Perl_pp_ftbinary (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_chdir (make-c-func 'Perl_pp_chdir (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_chown (make-c-func 'Perl_pp_chown (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_chroot (make-c-func 'Perl_pp_chroot (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_unlink (make-c-func 'Perl_pp_unlink (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_chmod (make-c-func 'Perl_pp_chmod (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_utime (make-c-func 'Perl_pp_utime (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_rename (make-c-func 'Perl_pp_rename (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_link (make-c-func 'Perl_pp_link (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_symlink (make-c-func 'Perl_pp_symlink (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_readlink (make-c-func 'Perl_pp_readlink (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_mkdir (make-c-func 'Perl_pp_mkdir (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_rmdir (make-c-func 'Perl_pp_rmdir (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_open_dir (make-c-func 'Perl_pp_open_dir (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_readdir (make-c-func 'Perl_pp_readdir (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_telldir (make-c-func 'Perl_pp_telldir (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_seekdir (make-c-func 'Perl_pp_seekdir (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_rewinddir (make-c-func 'Perl_pp_rewinddir (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_closedir (make-c-func 'Perl_pp_closedir (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_fork (make-c-func 'Perl_pp_fork (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_wait (make-c-func 'Perl_pp_wait (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_waitpid (make-c-func 'Perl_pp_waitpid (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_system (make-c-func 'Perl_pp_system (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_exec (make-c-func 'Perl_pp_exec (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_kill (make-c-func 'Perl_pp_kill (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_getppid (make-c-func 'Perl_pp_getppid (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_getpgrp (make-c-func 'Perl_pp_getpgrp (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_setpgrp (make-c-func 'Perl_pp_setpgrp (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_getpriority (make-c-func 'Perl_pp_getpriority (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_setpriority (make-c-func 'Perl_pp_setpriority (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_time (make-c-func 'Perl_pp_time (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_tms (make-c-func 'Perl_pp_tms (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_localtime (make-c-func 'Perl_pp_localtime (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gmtime (make-c-func 'Perl_pp_gmtime (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_alarm (make-c-func 'Perl_pp_alarm (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sleep (make-c-func 'Perl_pp_sleep (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_shmget (make-c-func 'Perl_pp_shmget (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_shmctl (make-c-func 'Perl_pp_shmctl (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_shmread (make-c-func 'Perl_pp_shmread (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_shmwrite (make-c-func 'Perl_pp_shmwrite (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_msgget (make-c-func 'Perl_pp_msgget (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_msgctl (make-c-func 'Perl_pp_msgctl (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_msgsnd (make-c-func 'Perl_pp_msgsnd (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_msgrcv (make-c-func 'Perl_pp_msgrcv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_semget (make-c-func 'Perl_pp_semget (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_semctl (make-c-func 'Perl_pp_semctl (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_semop (make-c-func 'Perl_pp_semop (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_require (make-c-func 'Perl_pp_require (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_dofile (make-c-func 'Perl_pp_dofile (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_entereval (make-c-func 'Perl_pp_entereval (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_leaveeval (make-c-func 'Perl_pp_leaveeval (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_entertry (make-c-func 'Perl_pp_entertry (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_leavetry (make-c-func 'Perl_pp_leavetry (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ghbyname (make-c-func 'Perl_pp_ghbyname (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ghbyaddr (make-c-func 'Perl_pp_ghbyaddr (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ghostent (make-c-func 'Perl_pp_ghostent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gnbyname (make-c-func 'Perl_pp_gnbyname (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gnbyaddr (make-c-func 'Perl_pp_gnbyaddr (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gnetent (make-c-func 'Perl_pp_gnetent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gpbyname (make-c-func 'Perl_pp_gpbyname (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gpbynumber (make-c-func 'Perl_pp_gpbynumber (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gprotoent (make-c-func 'Perl_pp_gprotoent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gsbyname (make-c-func 'Perl_pp_gsbyname (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gsbyport (make-c-func 'Perl_pp_gsbyport (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gservent (make-c-func 'Perl_pp_gservent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_shostent (make-c-func 'Perl_pp_shostent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_snetent (make-c-func 'Perl_pp_snetent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sprotoent (make-c-func 'Perl_pp_sprotoent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sservent (make-c-func 'Perl_pp_sservent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ehostent (make-c-func 'Perl_pp_ehostent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_enetent (make-c-func 'Perl_pp_enetent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_eprotoent (make-c-func 'Perl_pp_eprotoent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_eservent (make-c-func 'Perl_pp_eservent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gpwnam (make-c-func 'Perl_pp_gpwnam (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gpwuid (make-c-func 'Perl_pp_gpwuid (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_gpwent (make-c-func 'Perl_pp_gpwent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_spwent (make-c-func 'Perl_pp_spwent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_epwent (make-c-func 'Perl_pp_epwent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ggrnam (make-c-func 'Perl_pp_ggrnam (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ggrgid (make-c-func 'Perl_pp_ggrgid (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_ggrent (make-c-func 'Perl_pp_ggrent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_sgrent (make-c-func 'Perl_pp_sgrent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_egrent (make-c-func 'Perl_pp_egrent (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_getlogin (make-c-func 'Perl_pp_getlogin (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_syscall (make-c-func 'Perl_pp_syscall (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_lock (make-c-func 'Perl_pp_lock (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_threadsv (make-c-func 'Perl_pp_threadsv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_setstate (make-c-func 'Perl_pp_setstate (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pp_method_named (make-c-func 'Perl_pp_method_named (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_amagic_call (make-c-func 'Perl_amagic_call (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>) <c-int> <c-int>)))
(define-extern Perl_Gv_AMupdate (make-c-func 'Perl_Gv_AMupdate <c-char> (list (ptr <PerlInterpreter>) (ptr <HV>))))
(define-extern Perl_gv_handler (make-c-func 'Perl_gv_handler (ptr <CV>) (list (ptr <PerlInterpreter>) (ptr <HV>) <I32>)))
(define-extern Perl_append_elem (make-c-func 'Perl_append_elem (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>))))
(define-extern Perl_append_list (make-c-func 'Perl_append_list (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <LISTOP>) (ptr <LISTOP>))))
(define-extern Perl_apply (make-c-func 'Perl_apply <I32> (list (ptr <PerlInterpreter>) <I32> (ptr (ptr <SV>)) (ptr (ptr <SV>)))))
(define-extern Perl_apply_attrs_string (make-c-func 'Perl_apply_attrs_string <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <CV>) (ptr <c-char>) <STRLEN>)))
(define-extern Perl_avhv_delete_ent (make-c-func 'Perl_avhv_delete_ent (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <AV>) (ptr <SV>) <I32> <U32>)))
(define-extern Perl_avhv_exists_ent (make-c-func 'Perl_avhv_exists_ent <c-char> (list (ptr <PerlInterpreter>) (ptr <AV>) (ptr <SV>) <U32>)))
(define-extern Perl_avhv_fetch_ent (make-c-func 'Perl_avhv_fetch_ent (ptr (ptr <SV>)) (list (ptr <PerlInterpreter>) (ptr <AV>) (ptr <SV>) <I32> <U32>)))
(define-extern Perl_avhv_store_ent (make-c-func 'Perl_avhv_store_ent (ptr (ptr <SV>)) (list (ptr <PerlInterpreter>) (ptr <AV>) (ptr <SV>) (ptr <SV>) <U32>)))
(define-extern Perl_avhv_iternext (make-c-func 'Perl_avhv_iternext (ptr <HE>) (list (ptr <PerlInterpreter>) (ptr <AV>))))
(define-extern Perl_avhv_iterval (make-c-func 'Perl_avhv_iterval (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <AV>) (ptr <HE>))))
(define-extern Perl_avhv_keys (make-c-func 'Perl_avhv_keys (ptr <HV>) (list (ptr <PerlInterpreter>) (ptr <AV>))))
(define-extern Perl_av_clear (make-c-func 'Perl_av_clear <c-void> (list (ptr <PerlInterpreter>) (ptr <AV>))))
(define-extern Perl_av_delete (make-c-func 'Perl_av_delete (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <AV>) <I32> <I32>)))
(define-extern Perl_av_exists (make-c-func 'Perl_av_exists <c-char> (list (ptr <PerlInterpreter>) (ptr <AV>) <I32>)))
(define-extern Perl_av_extend (make-c-func 'Perl_av_extend <c-void> (list (ptr <PerlInterpreter>) (ptr <AV>) <I32>)))
(define-extern Perl_av_fake (make-c-func 'Perl_av_fake (ptr <AV>) (list (ptr <PerlInterpreter>) <I32> (ptr (ptr <SV>)))))
(define-extern Perl_av_fetch (make-c-func 'Perl_av_fetch (ptr (ptr <SV>)) (list (ptr <PerlInterpreter>) (ptr <AV>) <I32> <I32>)))
(define-extern Perl_av_fill (make-c-func 'Perl_av_fill <c-void> (list (ptr <PerlInterpreter>) (ptr <AV>) <I32>)))
(define-extern Perl_av_len (make-c-func 'Perl_av_len <I32> (list (ptr <PerlInterpreter>) (ptr <AV>))))
(define-extern Perl_av_make (make-c-func 'Perl_av_make (ptr <AV>) (list (ptr <PerlInterpreter>) <I32> (ptr (ptr <SV>)))))
(define-extern Perl_av_pop (make-c-func 'Perl_av_pop (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <AV>))))
(define-extern Perl_av_push (make-c-func 'Perl_av_push <c-void> (list (ptr <PerlInterpreter>) (ptr <AV>) (ptr <SV>))))
(define-extern Perl_av_reify (make-c-func 'Perl_av_reify <c-void> (list (ptr <PerlInterpreter>) (ptr <AV>))))
(define-extern Perl_av_shift (make-c-func 'Perl_av_shift (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <AV>))))
(define-extern Perl_av_store (make-c-func 'Perl_av_store (ptr (ptr <SV>)) (list (ptr <PerlInterpreter>) (ptr <AV>) <I32> (ptr <SV>))))
(define-extern Perl_av_undef (make-c-func 'Perl_av_undef <c-void> (list (ptr <PerlInterpreter>) (ptr <AV>))))
(define-extern Perl_av_unshift (make-c-func 'Perl_av_unshift <c-void> (list (ptr <PerlInterpreter>) (ptr <AV>) <I32>)))
(define-extern Perl_bind_match (make-c-func 'Perl_bind_match (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>))))
(define-extern Perl_block_end (make-c-func 'Perl_block_end (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>))))
(define-extern Perl_block_gimme (make-c-func 'Perl_block_gimme <I32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_block_start (make-c-func 'Perl_block_start <c-int> (list (ptr <PerlInterpreter>) <c-int>)))
(define-extern Perl_boot_core_UNIVERSAL (make-c-func 'Perl_boot_core_UNIVERSAL <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_boot_core_PerlIO (make-c-func 'Perl_boot_core_PerlIO <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_call_list (make-c-func 'Perl_call_list <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <AV>))))
(define-extern Perl_cando (make-c-func 'Perl_cando <c-char> (list (ptr <PerlInterpreter>) <mode_t> <uid_t> (ptr (c-struct 'stat)))))
(define-extern Perl_cast_ulong (make-c-func 'Perl_cast_ulong <U32> (list (ptr <PerlInterpreter>) <NV>)))
(define-extern Perl_cast_i32 (make-c-func 'Perl_cast_i32 <I32> (list (ptr <PerlInterpreter>) <NV>)))
(define-extern Perl_cast_iv (make-c-func 'Perl_cast_iv <IV> (list (ptr <PerlInterpreter>) <NV>)))
(define-extern Perl_cast_uv (make-c-func 'Perl_cast_uv <UV> (list (ptr <PerlInterpreter>) <NV>)))
(define-extern Perl_convert (make-c-func 'Perl_convert (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32> (ptr <OP>))))
(define-extern Perl_croak (make-c-func-vaargs 'Perl_croak <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_vcroak (make-c-func 'Perl_vcroak <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_croak_nocontext (make-c-func-vaargs 'Perl_croak_nocontext <c-void> (list (ptr <c-char>))))
(define-extern Perl_die_nocontext (make-c-func-vaargs 'Perl_die_nocontext (ptr <OP>) (list (ptr <c-char>))))
(define-extern Perl_deb_nocontext (make-c-func-vaargs 'Perl_deb_nocontext <c-void> (list (ptr <c-char>))))
(define-extern Perl_form_nocontext (make-c-func-vaargs 'Perl_form_nocontext (ptr <c-char>) (list (ptr <c-char>))))
(define-extern Perl_load_module_nocontext (make-c-func-vaargs 'Perl_load_module_nocontext <c-void> (list <U32> (ptr <SV>) (ptr <SV>))))
(define-extern Perl_mess_nocontext (make-c-func-vaargs 'Perl_mess_nocontext (ptr <SV>) (list (ptr <c-char>))))
(define-extern Perl_warn_nocontext (make-c-func-vaargs 'Perl_warn_nocontext <c-void> (list (ptr <c-char>))))
(define-extern Perl_warner_nocontext (make-c-func-vaargs 'Perl_warner_nocontext <c-void> (list <U32> (ptr <c-char>))))
(define-extern Perl_newSVpvf_nocontext (make-c-func-vaargs 'Perl_newSVpvf_nocontext (ptr <SV>) (list (ptr <c-char>))))
(define-extern Perl_sv_catpvf_nocontext (make-c-func-vaargs 'Perl_sv_catpvf_nocontext <c-void> (list (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_setpvf_nocontext (make-c-func-vaargs 'Perl_sv_setpvf_nocontext <c-void> (list (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_catpvf_mg_nocontext (make-c-func-vaargs 'Perl_sv_catpvf_mg_nocontext <c-void> (list (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_setpvf_mg_nocontext (make-c-func-vaargs 'Perl_sv_setpvf_mg_nocontext <c-void> (list (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_fprintf_nocontext (make-c-func-vaargs 'Perl_fprintf_nocontext <c-int> (list (ptr <PerlIO>) (ptr <c-char>))))
(define-extern Perl_printf_nocontext (make-c-func-vaargs 'Perl_printf_nocontext <c-int> (list (ptr <c-char>))))
(define-extern Perl_cv_ckproto (make-c-func 'Perl_cv_ckproto <c-void> (list (ptr <PerlInterpreter>) (ptr <CV>) (ptr <GV>) (ptr <c-char>))))
(define-extern Perl_cv_clone (make-c-func 'Perl_cv_clone (ptr <CV>) (list (ptr <PerlInterpreter>) (ptr <CV>))))
(define-extern Perl_cv_const_sv (make-c-func 'Perl_cv_const_sv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <CV>))))
(define-extern Perl_op_const_sv (make-c-func 'Perl_op_const_sv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <OP>) (ptr <CV>))))
(define-extern Perl_cv_undef (make-c-func 'Perl_cv_undef <c-void> (list (ptr <PerlInterpreter>) (ptr <CV>))))
(define-extern Perl_cx_dump (make-c-func 'Perl_cx_dump <c-void> (list (ptr <PerlInterpreter>) (ptr <PERL_CONTEXT>))))
(define-extern Perl_filter_add (make-c-func 'Perl_filter_add (ptr <SV>) (list (ptr <PerlInterpreter>) <filter_t> (ptr <SV>))))
(define-extern Perl_filter_del (make-c-func 'Perl_filter_del <c-void> (list (ptr <PerlInterpreter>) <filter_t>)))
(define-extern Perl_filter_read (make-c-func 'Perl_filter_read <I32> (list (ptr <PerlInterpreter>) <c-int> (ptr <SV>) <c-int>)))
(define-extern Perl_get_op_descs (make-c-func 'Perl_get_op_descs (ptr (ptr <c-char>)) (list (ptr <PerlInterpreter>))))
(define-extern Perl_get_op_names (make-c-func 'Perl_get_op_names (ptr (ptr <c-char>)) (list (ptr <PerlInterpreter>))))
(define-extern Perl_get_no_modify (make-c-func 'Perl_get_no_modify (ptr <c-char>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_get_opargs (make-c-func 'Perl_get_opargs (ptr <U32>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_get_ppaddr (make-c-func 'Perl_get_ppaddr (ptr <PPADDR_t>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_cxinc (make-c-func 'Perl_cxinc <I32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_deb (make-c-func-vaargs 'Perl_deb <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_vdeb (make-c-func 'Perl_vdeb <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_debprofdump (make-c-func 'Perl_debprofdump <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_debop (make-c-func 'Perl_debop <I32> (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_debstack (make-c-func 'Perl_debstack <I32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_debstackptrs (make-c-func 'Perl_debstackptrs <I32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_delimcpy (make-c-func 'Perl_delimcpy (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) <c-int> (ptr <I32>))))
(define-extern Perl_deprecate (make-c-func 'Perl_deprecate <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_deprecate_old (make-c-func 'Perl_deprecate_old <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_die (make-c-func-vaargs 'Perl_die (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_vdie (make-c-func 'Perl_vdie (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_die_where (make-c-func 'Perl_die_where (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <STRLEN>)))
(define-extern Perl_dounwind (make-c-func 'Perl_dounwind <c-void> (list (ptr <PerlInterpreter>) <I32>)))
(define-extern Perl_do_aexec (make-c-func 'Perl_do_aexec <c-char> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr (ptr <SV>)) (ptr (ptr <SV>)))))
(define-extern Perl_do_aexec5 (make-c-func 'Perl_do_aexec5 <c-char> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr (ptr <SV>)) (ptr (ptr <SV>)) <c-int> <c-int>)))
(define-extern Perl_do_binmode (make-c-func 'Perl_do_binmode <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>) <c-int> <c-int>)))
(define-extern Perl_do_chop (make-c-func 'Perl_do_chop <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>))))
(define-extern Perl_do_close (make-c-func 'Perl_do_close <c-char> (list (ptr <PerlInterpreter>) (ptr <GV>) <c-char>)))
(define-extern Perl_do_eof (make-c-func 'Perl_do_eof <c-char> (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_do_exec (make-c-func 'Perl_do_exec <c-char> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_do_exec3 (make-c-func 'Perl_do_exec3 <c-char> (list (ptr <PerlInterpreter>) (ptr <c-char>) <c-int> <c-int>)))
(define-extern Perl_do_execfree (make-c-func 'Perl_do_execfree <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_do_ipcctl (make-c-func 'Perl_do_ipcctl <I32> (list (ptr <PerlInterpreter>) <I32> (ptr (ptr <SV>)) (ptr (ptr <SV>)))))
(define-extern Perl_do_ipcget (make-c-func 'Perl_do_ipcget <I32> (list (ptr <PerlInterpreter>) <I32> (ptr (ptr <SV>)) (ptr (ptr <SV>)))))
(define-extern Perl_do_msgrcv (make-c-func 'Perl_do_msgrcv <I32> (list (ptr <PerlInterpreter>) (ptr (ptr <SV>)) (ptr (ptr <SV>)))))
(define-extern Perl_do_msgsnd (make-c-func 'Perl_do_msgsnd <I32> (list (ptr <PerlInterpreter>) (ptr (ptr <SV>)) (ptr (ptr <SV>)))))
(define-extern Perl_do_semop (make-c-func 'Perl_do_semop <I32> (list (ptr <PerlInterpreter>) (ptr (ptr <SV>)) (ptr (ptr <SV>)))))
(define-extern Perl_do_shmio (make-c-func 'Perl_do_shmio <I32> (list (ptr <PerlInterpreter>) <I32> (ptr (ptr <SV>)) (ptr (ptr <SV>)))))
(define-extern Perl_do_join (make-c-func 'Perl_do_join <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>) (ptr (ptr <SV>)) (ptr (ptr <SV>)))))
(define-extern Perl_do_kv (make-c-func 'Perl_do_kv (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_do_open (make-c-func 'Perl_do_open <c-char> (list (ptr <PerlInterpreter>) (ptr <GV>) (ptr <c-char>) <I32> <c-int> <c-int> <c-int> (ptr <PerlIO>))))
(define-extern Perl_do_open9 (make-c-func 'Perl_do_open9 <c-char> (list (ptr <PerlInterpreter>) (ptr <GV>) (ptr <c-char>) <I32> <c-int> <c-int> <c-int> (ptr <PerlIO>) (ptr <SV>) <I32>)))
(define-extern Perl_do_openn (make-c-func 'Perl_do_openn <c-char> (list (ptr <PerlInterpreter>) (ptr <GV>) (ptr <c-char>) <I32> <c-int> <c-int> <c-int> (ptr <PerlIO>) (ptr (ptr <SV>)) <I32>)))
(define-extern Perl_do_pipe (make-c-func 'Perl_do_pipe <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <GV>) (ptr <GV>))))
(define-extern Perl_do_print (make-c-func 'Perl_do_print <c-char> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <PerlIO>))))
(define-extern Perl_do_readline (make-c-func 'Perl_do_readline (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_do_chomp (make-c-func 'Perl_do_chomp <I32> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_do_seek (make-c-func 'Perl_do_seek <c-char> (list (ptr <PerlInterpreter>) (ptr <GV>) <off_t> <c-int>)))
(define-extern Perl_do_sprintf (make-c-func 'Perl_do_sprintf <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <I32> (ptr (ptr <SV>)))))
(define-extern Perl_do_sysseek (make-c-func 'Perl_do_sysseek <off_t> (list (ptr <PerlInterpreter>) (ptr <GV>) <off_t> <c-int>)))
(define-extern Perl_do_tell (make-c-func 'Perl_do_tell <off_t> (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_do_trans (make-c-func 'Perl_do_trans <I32> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_do_vecget (make-c-func 'Perl_do_vecget <UV> (list (ptr <PerlInterpreter>) (ptr <SV>) <I32> <I32>)))
(define-extern Perl_do_vecset (make-c-func 'Perl_do_vecset <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_do_vop (make-c-func 'Perl_do_vop <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <SV>) (ptr <SV>) (ptr <SV>))))
(define-extern Perl_dofile (make-c-func 'Perl_dofile (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_dowantarray (make-c-func 'Perl_dowantarray <I32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_dump_all (make-c-func 'Perl_dump_all <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_dump_eval (make-c-func 'Perl_dump_eval <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_dump_form (make-c-func 'Perl_dump_form <c-void> (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_gv_dump (make-c-func 'Perl_gv_dump <c-void> (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_op_dump (make-c-func 'Perl_op_dump <c-void> (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_pmop_dump (make-c-func 'Perl_pmop_dump <c-void> (list (ptr <PerlInterpreter>) (ptr <PMOP>))))
(define-extern Perl_dump_packsubs (make-c-func 'Perl_dump_packsubs <c-void> (list (ptr <PerlInterpreter>) (ptr <HV>))))
(define-extern Perl_dump_sub (make-c-func 'Perl_dump_sub <c-void> (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_fbm_compile (make-c-func 'Perl_fbm_compile <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <U32>)))
(define-extern Perl_fbm_instr (make-c-func 'Perl_fbm_instr (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-uchar>) (ptr <c-uchar>) (ptr <SV>) <U32>)))
(define-extern Perl_find_script (make-c-func 'Perl_find_script (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <c-char> (ptr (ptr <c-char>)) <I32>)))
(define-extern Perl_force_list (make-c-func 'Perl_force_list (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_fold_constants (make-c-func 'Perl_fold_constants (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_form (make-c-func-vaargs 'Perl_form (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_vform (make-c-func 'Perl_vform (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_free_tmps (make-c-func 'Perl_free_tmps <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_gen_constant_list (make-c-func 'Perl_gen_constant_list (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_getenv_len (make-c-func 'Perl_getenv_len (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-ulong>))))
(define-extern Perl_gp_free (make-c-func 'Perl_gp_free <c-void> (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_gp_ref (make-c-func 'Perl_gp_ref (ptr <GP>) (list (ptr <PerlInterpreter>) (ptr <GP>))))
(define-extern Perl_gv_AVadd (make-c-func 'Perl_gv_AVadd (ptr <GV>) (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_gv_HVadd (make-c-func 'Perl_gv_HVadd (ptr <GV>) (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_gv_IOadd (make-c-func 'Perl_gv_IOadd (ptr <GV>) (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_gv_autoload4 (make-c-func 'Perl_gv_autoload4 (ptr <GV>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>) <STRLEN> <I32>)))
(define-extern Perl_gv_check (make-c-func 'Perl_gv_check <c-void> (list (ptr <PerlInterpreter>) (ptr <HV>))))
(define-extern Perl_gv_efullname (make-c-func 'Perl_gv_efullname <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <GV>))))
(define-extern Perl_gv_efullname3 (make-c-func 'Perl_gv_efullname3 <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <GV>) (ptr <c-char>))))
(define-extern Perl_gv_efullname4 (make-c-func 'Perl_gv_efullname4 <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <GV>) (ptr <c-char>) <c-char>)))
(define-extern Perl_gv_fetchfile (make-c-func 'Perl_gv_fetchfile (ptr <GV>) (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_gv_fetchmeth (make-c-func 'Perl_gv_fetchmeth (ptr <GV>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>) <STRLEN> <I32>)))
(define-extern Perl_gv_fetchmeth_autoload (make-c-func 'Perl_gv_fetchmeth_autoload (ptr <GV>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>) <STRLEN> <I32>)))
(define-extern Perl_gv_fetchmethod (make-c-func 'Perl_gv_fetchmethod (ptr <GV>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>))))
(define-extern Perl_gv_fetchmethod_autoload (make-c-func 'Perl_gv_fetchmethod_autoload (ptr <GV>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>) <I32>)))
(define-extern Perl_gv_fetchpv (make-c-func 'Perl_gv_fetchpv (ptr <GV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32> <I32>)))
(define-extern Perl_gv_fullname (make-c-func 'Perl_gv_fullname <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <GV>))))
(define-extern Perl_gv_fullname3 (make-c-func 'Perl_gv_fullname3 <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <GV>) (ptr <c-char>))))
(define-extern Perl_gv_fullname4 (make-c-func 'Perl_gv_fullname4 <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <GV>) (ptr <c-char>) <c-char>)))
(define-extern Perl_gv_init (make-c-func 'Perl_gv_init <c-void> (list (ptr <PerlInterpreter>) (ptr <GV>) (ptr <HV>) (ptr <c-char>) <STRLEN> <c-int>)))
(define-extern Perl_gv_stashpv (make-c-func 'Perl_gv_stashpv (ptr <HV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32>)))
(define-extern Perl_gv_stashpvn (make-c-func 'Perl_gv_stashpvn (ptr <HV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <U32> <I32>)))
(define-extern Perl_gv_stashsv (make-c-func 'Perl_gv_stashsv (ptr <HV>) (list (ptr <PerlInterpreter>) (ptr <SV>) <I32>)))
(define-extern Perl_hv_clear (make-c-func 'Perl_hv_clear <c-void> (list (ptr <PerlInterpreter>) (ptr <HV>))))
(define-extern Perl_hv_delayfree_ent (make-c-func 'Perl_hv_delayfree_ent <c-void> (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <HE>))))
(define-extern Perl_hv_delete (make-c-func 'Perl_hv_delete (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>) <I32> <I32>)))
(define-extern Perl_hv_delete_ent (make-c-func 'Perl_hv_delete_ent (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <SV>) <I32> <U32>)))
(define-extern Perl_hv_exists (make-c-func 'Perl_hv_exists <c-char> (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>) <I32>)))
(define-extern Perl_hv_exists_ent (make-c-func 'Perl_hv_exists_ent <c-char> (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <SV>) <U32>)))
(define-extern Perl_hv_fetch (make-c-func 'Perl_hv_fetch (ptr (ptr <SV>)) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>) <I32> <I32>)))
(define-extern Perl_hv_fetch_ent (make-c-func 'Perl_hv_fetch_ent (ptr <HE>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <SV>) <I32> <U32>)))
(define-extern Perl_hv_free_ent (make-c-func 'Perl_hv_free_ent <c-void> (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <HE>))))
(define-extern Perl_hv_iterinit (make-c-func 'Perl_hv_iterinit <I32> (list (ptr <PerlInterpreter>) (ptr <HV>))))
(define-extern Perl_hv_iterkey (make-c-func 'Perl_hv_iterkey (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <HE>) (ptr <I32>))))
(define-extern Perl_hv_iterkeysv (make-c-func 'Perl_hv_iterkeysv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <HE>))))
(define-extern Perl_hv_iternext (make-c-func 'Perl_hv_iternext (ptr <HE>) (list (ptr <PerlInterpreter>) (ptr <HV>))))
(define-extern Perl_hv_iternextsv (make-c-func 'Perl_hv_iternextsv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr (ptr <c-char>)) (ptr <I32>))))
(define-extern Perl_hv_iternext_flags (make-c-func 'Perl_hv_iternext_flags (ptr <HE>) (list (ptr <PerlInterpreter>) (ptr <HV>) <I32>)))
(define-extern Perl_hv_iterval (make-c-func 'Perl_hv_iterval (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <HE>))))
(define-extern Perl_hv_ksplit (make-c-func 'Perl_hv_ksplit <c-void> (list (ptr <PerlInterpreter>) (ptr <HV>) <IV>)))
(define-extern Perl_hv_magic (make-c-func 'Perl_hv_magic <c-void> (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <GV>) <c-int>)))
(define-extern Perl_hv_store (make-c-func 'Perl_hv_store (ptr (ptr <SV>)) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>) <I32> (ptr <SV>) <U32>)))
(define-extern Perl_hv_store_ent (make-c-func 'Perl_hv_store_ent (ptr <HE>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <SV>) (ptr <SV>) <U32>)))
(define-extern Perl_hv_store_flags (make-c-func 'Perl_hv_store_flags (ptr (ptr <SV>)) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>) <I32> (ptr <SV>) <U32> <c-int>)))
(define-extern Perl_hv_undef (make-c-func 'Perl_hv_undef <c-void> (list (ptr <PerlInterpreter>) (ptr <HV>))))
(define-extern Perl_ibcmp (make-c-func 'Perl_ibcmp <I32> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) <I32>)))
(define-extern Perl_ibcmp_locale (make-c-func 'Perl_ibcmp_locale <I32> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) <I32>)))
(define-extern Perl_ibcmp_utf8 (make-c-func 'Perl_ibcmp_utf8 <I32> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr (ptr <c-char>)) <UV> <c-char> (ptr <c-char>) (ptr (ptr <c-char>)) <UV> <c-char>)))
(define-extern Perl_ingroup (make-c-func 'Perl_ingroup <c-char> (list (ptr <PerlInterpreter>) <gid_t> <uid_t>)))
(define-extern Perl_init_argv_symbols (make-c-func 'Perl_init_argv_symbols <c-void> (list (ptr <PerlInterpreter>) <c-int> (ptr (ptr <c-char>)))))
(define-extern Perl_init_debugger (make-c-func 'Perl_init_debugger <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_init_stacks (make-c-func 'Perl_init_stacks <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_init_tm (make-c-func 'Perl_init_tm <c-void> (list (ptr <PerlInterpreter>) (ptr (c-struct 'tm)))))
(define-extern Perl_intro_my (make-c-func 'Perl_intro_my <U32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_instr (make-c-func 'Perl_instr (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>))))
(define-extern Perl_io_close (make-c-func 'Perl_io_close <c-char> (list (ptr <PerlInterpreter>) (ptr <IO>) <c-char>)))
(define-extern Perl_invert (make-c-func 'Perl_invert (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_is_gv_magical (make-c-func 'Perl_is_gv_magical <c-char> (list (ptr <PerlInterpreter>) (ptr <c-char>) <STRLEN> <U32>)))
(define-extern Perl_is_lvalue_sub (make-c-func 'Perl_is_lvalue_sub <I32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_to_uni_upper_lc (make-c-func 'Perl_to_uni_upper_lc <U32> (list (ptr <PerlInterpreter>) <U32>)))
(define-extern Perl_to_uni_title_lc (make-c-func 'Perl_to_uni_title_lc <U32> (list (ptr <PerlInterpreter>) <U32>)))
(define-extern Perl_to_uni_lower_lc (make-c-func 'Perl_to_uni_lower_lc <U32> (list (ptr <PerlInterpreter>) <U32>)))
(define-extern Perl_is_uni_alnum (make-c-func 'Perl_is_uni_alnum <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_alnumc (make-c-func 'Perl_is_uni_alnumc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_idfirst (make-c-func 'Perl_is_uni_idfirst <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_alpha (make-c-func 'Perl_is_uni_alpha <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_ascii (make-c-func 'Perl_is_uni_ascii <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_space (make-c-func 'Perl_is_uni_space <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_cntrl (make-c-func 'Perl_is_uni_cntrl <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_graph (make-c-func 'Perl_is_uni_graph <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_digit (make-c-func 'Perl_is_uni_digit <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_upper (make-c-func 'Perl_is_uni_upper <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_lower (make-c-func 'Perl_is_uni_lower <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_print (make-c-func 'Perl_is_uni_print <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_punct (make-c-func 'Perl_is_uni_punct <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_xdigit (make-c-func 'Perl_is_uni_xdigit <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_to_uni_upper (make-c-func 'Perl_to_uni_upper <UV> (list (ptr <PerlInterpreter>) <UV> (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_to_uni_title (make-c-func 'Perl_to_uni_title <UV> (list (ptr <PerlInterpreter>) <UV> (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_to_uni_lower (make-c-func 'Perl_to_uni_lower <UV> (list (ptr <PerlInterpreter>) <UV> (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_to_uni_fold (make-c-func 'Perl_to_uni_fold <UV> (list (ptr <PerlInterpreter>) <UV> (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_is_uni_alnum_lc (make-c-func 'Perl_is_uni_alnum_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_alnumc_lc (make-c-func 'Perl_is_uni_alnumc_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_idfirst_lc (make-c-func 'Perl_is_uni_idfirst_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_alpha_lc (make-c-func 'Perl_is_uni_alpha_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_ascii_lc (make-c-func 'Perl_is_uni_ascii_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_space_lc (make-c-func 'Perl_is_uni_space_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_cntrl_lc (make-c-func 'Perl_is_uni_cntrl_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_graph_lc (make-c-func 'Perl_is_uni_graph_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_digit_lc (make-c-func 'Perl_is_uni_digit_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_upper_lc (make-c-func 'Perl_is_uni_upper_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_lower_lc (make-c-func 'Perl_is_uni_lower_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_print_lc (make-c-func 'Perl_is_uni_print_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_punct_lc (make-c-func 'Perl_is_uni_punct_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_uni_xdigit_lc (make-c-func 'Perl_is_uni_xdigit_lc <c-char> (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_is_utf8_char (make-c-func 'Perl_is_utf8_char <STRLEN> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_string (make-c-func 'Perl_is_utf8_string <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>) <STRLEN>)))
(define-extern Perl_is_utf8_string_loc (make-c-func 'Perl_is_utf8_string_loc <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>) <STRLEN> (ptr (ptr <U8>)))))
(define-extern Perl_is_utf8_alnum (make-c-func 'Perl_is_utf8_alnum <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_alnumc (make-c-func 'Perl_is_utf8_alnumc <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_idfirst (make-c-func 'Perl_is_utf8_idfirst <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_idcont (make-c-func 'Perl_is_utf8_idcont <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_alpha (make-c-func 'Perl_is_utf8_alpha <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_ascii (make-c-func 'Perl_is_utf8_ascii <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_space (make-c-func 'Perl_is_utf8_space <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_cntrl (make-c-func 'Perl_is_utf8_cntrl <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_digit (make-c-func 'Perl_is_utf8_digit <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_graph (make-c-func 'Perl_is_utf8_graph <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_upper (make-c-func 'Perl_is_utf8_upper <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_lower (make-c-func 'Perl_is_utf8_lower <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_print (make-c-func 'Perl_is_utf8_print <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_punct (make-c-func 'Perl_is_utf8_punct <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_xdigit (make-c-func 'Perl_is_utf8_xdigit <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_is_utf8_mark (make-c-func 'Perl_is_utf8_mark <c-char> (list (ptr <PerlInterpreter>) (ptr <U8>))))
(define-extern Perl_jmaybe (make-c-func 'Perl_jmaybe (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_keyword (make-c-func 'Perl_keyword <I32> (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32>)))
(define-extern Perl_leave_scope (make-c-func 'Perl_leave_scope <c-void> (list (ptr <PerlInterpreter>) <I32>)))
(define-extern Perl_lex_end (make-c-func 'Perl_lex_end <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_lex_start (make-c-func 'Perl_lex_start <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_op_null (make-c-func 'Perl_op_null <c-void> (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_op_clear (make-c-func 'Perl_op_clear <c-void> (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_linklist (make-c-func 'Perl_linklist (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_list (make-c-func 'Perl_list (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_listkids (make-c-func 'Perl_listkids (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_load_module (make-c-func-vaargs 'Perl_load_module <c-void> (list (ptr <PerlInterpreter>) <U32> (ptr <SV>) (ptr <SV>))))
(define-extern Perl_vload_module (make-c-func 'Perl_vload_module <c-void> (list (ptr <PerlInterpreter>) <U32> (ptr <SV>) (ptr <SV>) (ptr <va_list>))))
(define-extern Perl_localize (make-c-func 'Perl_localize (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>) <I32>)))
(define-extern Perl_looks_like_number (make-c-func 'Perl_looks_like_number <I32> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_grok_bin (make-c-func 'Perl_grok_bin <UV> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <STRLEN>) (ptr <I32>) (ptr <NV>))))
(define-extern Perl_grok_hex (make-c-func 'Perl_grok_hex <UV> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <STRLEN>) (ptr <I32>) (ptr <NV>))))
(define-extern Perl_grok_number (make-c-func 'Perl_grok_number <c-int> (list (ptr <PerlInterpreter>) (ptr <c-char>) <STRLEN> (ptr <UV>))))
(define-extern Perl_grok_numeric_radix (make-c-func 'Perl_grok_numeric_radix <c-char> (list (ptr <PerlInterpreter>) (ptr (ptr <c-char>)) (ptr <c-char>))))
(define-extern Perl_grok_oct (make-c-func 'Perl_grok_oct <UV> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <STRLEN>) (ptr <I32>) (ptr <NV>))))
(define-extern Perl_magic_clearenv (make-c-func 'Perl_magic_clearenv <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_clear_all_env (make-c-func 'Perl_magic_clear_all_env <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_clearpack (make-c-func 'Perl_magic_clearpack <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_clearsig (make-c-func 'Perl_magic_clearsig <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_existspack (make-c-func 'Perl_magic_existspack <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_freeregexp (make-c-func 'Perl_magic_freeregexp <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_freeovrld (make-c-func 'Perl_magic_freeovrld <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_get (make-c-func 'Perl_magic_get <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_getarylen (make-c-func 'Perl_magic_getarylen <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_getdefelem (make-c-func 'Perl_magic_getdefelem <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_getglob (make-c-func 'Perl_magic_getglob <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_getnkeys (make-c-func 'Perl_magic_getnkeys <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_getpack (make-c-func 'Perl_magic_getpack <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_getpos (make-c-func 'Perl_magic_getpos <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_getsig (make-c-func 'Perl_magic_getsig <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_getsubstr (make-c-func 'Perl_magic_getsubstr <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_gettaint (make-c-func 'Perl_magic_gettaint <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_getuvar (make-c-func 'Perl_magic_getuvar <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_getvec (make-c-func 'Perl_magic_getvec <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_len (make-c-func 'Perl_magic_len <U32> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_nextpack (make-c-func 'Perl_magic_nextpack <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>) (ptr <SV>))))
(define-extern Perl_magic_regdata_cnt (make-c-func 'Perl_magic_regdata_cnt <U32> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_regdatum_get (make-c-func 'Perl_magic_regdatum_get <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_regdatum_set (make-c-func 'Perl_magic_regdatum_set <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_set (make-c-func 'Perl_magic_set <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setamagic (make-c-func 'Perl_magic_setamagic <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setarylen (make-c-func 'Perl_magic_setarylen <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setbm (make-c-func 'Perl_magic_setbm <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setdbline (make-c-func 'Perl_magic_setdbline <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setcollxfrm (make-c-func 'Perl_magic_setcollxfrm <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setdefelem (make-c-func 'Perl_magic_setdefelem <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setenv (make-c-func 'Perl_magic_setenv <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setfm (make-c-func 'Perl_magic_setfm <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setisa (make-c-func 'Perl_magic_setisa <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setglob (make-c-func 'Perl_magic_setglob <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setmglob (make-c-func 'Perl_magic_setmglob <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setnkeys (make-c-func 'Perl_magic_setnkeys <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setpack (make-c-func 'Perl_magic_setpack <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setpos (make-c-func 'Perl_magic_setpos <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setregexp (make-c-func 'Perl_magic_setregexp <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setsig (make-c-func 'Perl_magic_setsig <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setsubstr (make-c-func 'Perl_magic_setsubstr <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_settaint (make-c-func 'Perl_magic_settaint <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setuvar (make-c-func 'Perl_magic_setuvar <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setvec (make-c-func 'Perl_magic_setvec <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_setutf8 (make-c-func 'Perl_magic_setutf8 <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_set_all_env (make-c-func 'Perl_magic_set_all_env <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_sizepack (make-c-func 'Perl_magic_sizepack <U32> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magic_wipepack (make-c-func 'Perl_magic_wipepack <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_magicname (make-c-func 'Perl_magicname <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) <I32>)))
(define-extern Perl_markstack_grow (make-c-func 'Perl_markstack_grow <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_mem_collxfrm (make-c-func 'Perl_mem_collxfrm (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <STRLEN> (ptr <STRLEN>))))
(define-extern Perl_mess (make-c-func-vaargs 'Perl_mess (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_vmess (make-c-func 'Perl_vmess (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_qerror (make-c-func 'Perl_qerror <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sortsv (make-c-func 'Perl_sortsv <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <SV>)) <size_t> <SVCOMPARE_t>)))
(define-extern Perl_mg_clear (make-c-func 'Perl_mg_clear <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_mg_copy (make-c-func 'Perl_mg_copy <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>) (ptr <c-char>) <I32>)))
(define-extern Perl_mg_find (make-c-func 'Perl_mg_find (ptr <MAGIC>) (list (ptr <PerlInterpreter>) (ptr <SV>) <c-int>)))
(define-extern Perl_mg_free (make-c-func 'Perl_mg_free <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_mg_get (make-c-func 'Perl_mg_get <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_mg_length (make-c-func 'Perl_mg_length <U32> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_mg_magical (make-c-func 'Perl_mg_magical <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_mg_set (make-c-func 'Perl_mg_set <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_mg_size (make-c-func 'Perl_mg_size <I32> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_mini_mktime (make-c-func 'Perl_mini_mktime <c-void> (list (ptr <PerlInterpreter>) (ptr (c-struct 'tm)))))
(define-extern Perl_mod (make-c-func 'Perl_mod (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>) <I32>)))
(define-extern Perl_mode_from_discipline (make-c-func 'Perl_mode_from_discipline <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_moreswitches (make-c-func 'Perl_moreswitches (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_my (make-c-func 'Perl_my (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_my_atof (make-c-func 'Perl_my_atof <NV> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_my_exit (make-c-func 'Perl_my_exit <c-void> (list (ptr <PerlInterpreter>) <U32>)))
(define-extern Perl_my_failure_exit (make-c-func 'Perl_my_failure_exit <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_my_fflush_all (make-c-func 'Perl_my_fflush_all <I32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_my_fork (make-c-func 'Perl_my_fork <pid_t> (list <c-void>)))
(define-extern Perl_atfork_lock (make-c-func 'Perl_atfork_lock <c-void> (list <c-void>)))
(define-extern Perl_atfork_unlock (make-c-func 'Perl_atfork_unlock <c-void> (list <c-void>)))
(define-extern Perl_my_lstat (make-c-func 'Perl_my_lstat <I32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_my_pclose (make-c-func 'Perl_my_pclose <I32> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_my_popen (make-c-func 'Perl_my_popen (ptr <PerlIO>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>))))
(define-extern Perl_my_popen_list (make-c-func 'Perl_my_popen_list (ptr <PerlIO>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <c-int> (ptr (ptr <SV>)))))
(define-extern Perl_my_setenv (make-c-func 'Perl_my_setenv <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>))))
(define-extern Perl_my_stat (make-c-func 'Perl_my_stat <I32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_my_strftime (make-c-func 'Perl_my_strftime (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <c-int> <c-int> <c-int> <c-int> <c-int> <c-int> <c-int> <c-int> <c-int>)))
(define-extern Perl_my_unexec (make-c-func 'Perl_my_unexec <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_newANONLIST (make-c-func 'Perl_newANONLIST (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_newANONHASH (make-c-func 'Perl_newANONHASH (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_newANONSUB (make-c-func 'Perl_newANONSUB (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newASSIGNOP (make-c-func 'Perl_newASSIGNOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) <I32> (ptr <OP>))))
(define-extern Perl_newCONDOP (make-c-func 'Perl_newCONDOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newCONSTSUB (make-c-func 'Perl_newCONSTSUB (ptr <CV>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>) (ptr <SV>))))
(define-extern Perl_newFORM (make-c-func 'Perl_newFORM <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newFOROP (make-c-func 'Perl_newFOROP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <c-char>) <line_t> (ptr <OP>) (ptr <OP>) (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newLOGOP (make-c-func 'Perl_newLOGOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32> (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newLOOPEX (make-c-func 'Perl_newLOOPEX (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>))))
(define-extern Perl_newLOOPOP (make-c-func 'Perl_newLOOPOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32> (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newNULLLIST (make-c-func 'Perl_newNULLLIST (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_newOP (make-c-func 'Perl_newOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32>)))
(define-extern Perl_newPROG (make-c-func 'Perl_newPROG <c-void> (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_newRANGE (make-c-func 'Perl_newRANGE (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newSLICEOP (make-c-func 'Perl_newSLICEOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newSTATEOP (make-c-func 'Perl_newSTATEOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <c-char>) (ptr <OP>))))
(define-extern Perl_newSUB (make-c-func 'Perl_newSUB (ptr <CV>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newXS (make-c-func 'Perl_newXS (ptr <CV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <XSUBADDR_t> (ptr <c-char>))))
(define-extern Perl_newAV (make-c-func 'Perl_newAV (ptr <AV>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_newAVREF (make-c-func 'Perl_newAVREF (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_newBINOP (make-c-func 'Perl_newBINOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32> (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newCVREF (make-c-func 'Perl_newCVREF (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>))))
(define-extern Perl_newGVOP (make-c-func 'Perl_newGVOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32> (ptr <GV>))))
(define-extern Perl_newGVgen (make-c-func 'Perl_newGVgen (ptr <GV>) (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_newGVREF (make-c-func 'Perl_newGVREF (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>))))
(define-extern Perl_newHVREF (make-c-func 'Perl_newHVREF (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_newHV (make-c-func 'Perl_newHV (ptr <HV>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_newHVhv (make-c-func 'Perl_newHVhv (ptr <HV>) (list (ptr <PerlInterpreter>) (ptr <HV>))))
(define-extern Perl_newIO (make-c-func 'Perl_newIO (ptr <IO>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_newLISTOP (make-c-func 'Perl_newLISTOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32> (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newPADOP (make-c-func 'Perl_newPADOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32> (ptr <SV>))))
(define-extern Perl_newPMOP (make-c-func 'Perl_newPMOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32>)))
(define-extern Perl_newPVOP (make-c-func 'Perl_newPVOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32> (ptr <c-char>))))
(define-extern Perl_newRV (make-c-func 'Perl_newRV (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_newRV_noinc (make-c-func 'Perl_newRV_noinc (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_newSV (make-c-func 'Perl_newSV (ptr <SV>) (list (ptr <PerlInterpreter>) <STRLEN>)))
(define-extern Perl_newSVREF (make-c-func 'Perl_newSVREF (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_newSVOP (make-c-func 'Perl_newSVOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32> (ptr <SV>))))
(define-extern Perl_newSViv (make-c-func 'Perl_newSViv (ptr <SV>) (list (ptr <PerlInterpreter>) <IV>)))
(define-extern Perl_newSVuv (make-c-func 'Perl_newSVuv (ptr <SV>) (list (ptr <PerlInterpreter>) <UV>)))
(define-extern Perl_newSVnv (make-c-func 'Perl_newSVnv (ptr <SV>) (list (ptr <PerlInterpreter>) <NV>)))
(define-extern Perl_newSVpv (make-c-func 'Perl_newSVpv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <STRLEN>)))
(define-extern Perl_newSVpvn (make-c-func 'Perl_newSVpvn (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <STRLEN>)))
(define-extern Perl_newSVpvn_share (make-c-func 'Perl_newSVpvn_share (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32> <U32>)))
(define-extern Perl_newSVpvf (make-c-func-vaargs 'Perl_newSVpvf (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_vnewSVpvf (make-c-func 'Perl_vnewSVpvf (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_newSVrv (make-c-func 'Perl_newSVrv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_newSVsv (make-c-func 'Perl_newSVsv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_newUNOP (make-c-func 'Perl_newUNOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32> (ptr <OP>))))
(define-extern Perl_newWHILEOP (make-c-func 'Perl_newWHILEOP (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> <I32> (ptr <LOOP>) <I32> (ptr <OP>) (ptr <OP>) (ptr <OP>))))
(define-extern Perl_new_stackinfo (make-c-func 'Perl_new_stackinfo (ptr <PERL_SI>) (list (ptr <PerlInterpreter>) <I32> <I32>)))
(define-extern Perl_scan_vstring (make-c-func 'Perl_scan_vstring (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <SV>))))
(define-extern Perl_nextargv (make-c-func 'Perl_nextargv (ptr <PerlIO>) (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_ninstr (make-c-func 'Perl_ninstr (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>))))
(define-extern Perl_oopsCV (make-c-func 'Perl_oopsCV (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_op_free (make-c-func 'Perl_op_free <c-void> (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_package (make-c-func 'Perl_package <c-void> (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_pad_alloc (make-c-func 'Perl_pad_alloc <PADOFFSET> (list (ptr <PerlInterpreter>) <I32> <U32>)))
(define-extern Perl_allocmy (make-c-func 'Perl_allocmy <PADOFFSET> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_pad_findmy (make-c-func 'Perl_pad_findmy <PADOFFSET> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_oopsAV (make-c-func 'Perl_oopsAV (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_oopsHV (make-c-func 'Perl_oopsHV (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_pad_leavemy (make-c-func 'Perl_pad_leavemy <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_pad_sv (make-c-func 'Perl_pad_sv (ptr <SV>) (list (ptr <PerlInterpreter>) <PADOFFSET>)))
(define-extern Perl_pad_free (make-c-func 'Perl_pad_free <c-void> (list (ptr <PerlInterpreter>) <PADOFFSET>)))
(define-extern Perl_pad_reset (make-c-func 'Perl_pad_reset <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_pad_swipe (make-c-func 'Perl_pad_swipe <c-void> (list (ptr <PerlInterpreter>) <PADOFFSET> <c-char>)))
(define-extern Perl_peep (make-c-func 'Perl_peep <c-void> (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_start_glob (make-c-func 'Perl_start_glob (ptr <PerlIO>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <IO>))))
(define-extern Perl_reentrant_size (make-c-func 'Perl_reentrant_size <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_reentrant_init (make-c-func 'Perl_reentrant_init <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_reentrant_free (make-c-func 'Perl_reentrant_free <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_reentrant_retry (make-c-func-vaargs 'Perl_reentrant_retry (ptr <c-void>) (list (ptr <c-char>))))
(define-extern Perl_call_atexit (make-c-func 'Perl_call_atexit <c-void> (list (ptr <PerlInterpreter>) <ATEXIT_t> (ptr <c-void>))))
(define-extern Perl_call_argv (make-c-func 'Perl_call_argv <I32> (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32> (ptr (ptr <c-char>)))))
(define-extern Perl_call_method (make-c-func 'Perl_call_method <I32> (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32>)))
(define-extern Perl_call_pv (make-c-func 'Perl_call_pv <I32> (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32>)))
(define-extern Perl_call_sv (make-c-func 'Perl_call_sv <I32> (list (ptr <PerlInterpreter>) (ptr <SV>) <I32>)))
(define-extern Perl_despatch_signals (make-c-func 'Perl_despatch_signals <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_eval_pv (make-c-func 'Perl_eval_pv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32>)))
(define-extern Perl_eval_sv (make-c-func 'Perl_eval_sv <I32> (list (ptr <PerlInterpreter>) (ptr <SV>) <I32>)))
(define-extern Perl_get_sv (make-c-func 'Perl_get_sv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32>)))
(define-extern Perl_get_av (make-c-func 'Perl_get_av (ptr <AV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32>)))
(define-extern Perl_get_hv (make-c-func 'Perl_get_hv (ptr <HV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32>)))
(define-extern Perl_get_cv (make-c-func 'Perl_get_cv (ptr <CV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32>)))
(define-extern Perl_init_i18nl10n (make-c-func 'Perl_init_i18nl10n <c-int> (list (ptr <PerlInterpreter>) <c-int>)))
(define-extern Perl_init_i18nl14n (make-c-func 'Perl_init_i18nl14n <c-int> (list (ptr <PerlInterpreter>) <c-int>)))
(define-extern Perl_new_collate (make-c-func 'Perl_new_collate <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_new_ctype (make-c-func 'Perl_new_ctype <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_new_numeric (make-c-func 'Perl_new_numeric <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_set_numeric_local (make-c-func 'Perl_set_numeric_local <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_set_numeric_radix (make-c-func 'Perl_set_numeric_radix <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_set_numeric_standard (make-c-func 'Perl_set_numeric_standard <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_require_pv (make-c-func 'Perl_require_pv <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_pack_cat (make-c-func 'Perl_pack_cat <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) (ptr <c-char>) (ptr (ptr <SV>)) (ptr (ptr <SV>)) (ptr (ptr (ptr <SV>))) <U32>)))
(define-extern Perl_packlist (make-c-func 'Perl_packlist <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) (ptr <c-char>) (ptr (ptr <SV>)) (ptr (ptr <SV>)))))
(define-extern Perl_pidgone (make-c-func 'Perl_pidgone <c-void> (list (ptr <PerlInterpreter>) <pid_t> <c-int>)))
(define-extern Perl_pmflag (make-c-func 'Perl_pmflag <c-void> (list (ptr <PerlInterpreter>) (ptr <U32>) <c-int>)))
(define-extern Perl_pmruntime (make-c-func 'Perl_pmruntime (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>) (ptr <OP>) (ptr <OP>))))
(define-extern Perl_pmtrans (make-c-func 'Perl_pmtrans (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>) (ptr <OP>) (ptr <OP>))))
(define-extern Perl_pop_return (make-c-func 'Perl_pop_return (ptr <OP>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_pop_scope (make-c-func 'Perl_pop_scope <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_prepend_elem (make-c-func 'Perl_prepend_elem (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>))))
(define-extern Perl_push_return (make-c-func 'Perl_push_return <c-void> (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_push_scope (make-c-func 'Perl_push_scope <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_ref (make-c-func 'Perl_ref (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>) <I32>)))
(define-extern Perl_refkids (make-c-func 'Perl_refkids (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>) <I32>)))
(define-extern Perl_regdump (make-c-func 'Perl_regdump <c-void> (list (ptr <PerlInterpreter>) (ptr <regexp>))))
(define-extern Perl_regclass_swash (make-c-func 'Perl_regclass_swash (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr (c-struct 'regnode)) <c-char> (ptr (ptr <SV>)) (ptr (ptr <SV>)))))
(define-extern Perl_pregexec (make-c-func 'Perl_pregexec <I32> (list (ptr <PerlInterpreter>) (ptr <regexp>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) <I32> (ptr <SV>) <U32>)))
(define-extern Perl_pregfree (make-c-func 'Perl_pregfree <c-void> (list (ptr <PerlInterpreter>) (ptr (c-struct 'regexp)))))
(define-extern Perl_pregcomp (make-c-func 'Perl_pregcomp (ptr <regexp>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) (ptr <PMOP>))))
(define-extern Perl_re_intuit_start (make-c-func 'Perl_re_intuit_start (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <regexp>) (ptr <SV>) (ptr <c-char>) (ptr <c-char>) <U32> (ptr (c-struct 're_scream_pos_data_s)))))
(define-extern Perl_re_intuit_string (make-c-func 'Perl_re_intuit_string (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <regexp>))))
(define-extern Perl_regexec_flags (make-c-func 'Perl_regexec_flags <I32> (list (ptr <PerlInterpreter>) (ptr <regexp>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) <I32> (ptr <SV>) (ptr <c-void>) <U32>)))
(define-extern Perl_regnext (make-c-func 'Perl_regnext (ptr <regnode>) (list (ptr <PerlInterpreter>) (ptr <regnode>))))
(define-extern Perl_regprop (make-c-func 'Perl_regprop <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <regnode>))))
(define-extern Perl_repeatcpy (make-c-func 'Perl_repeatcpy <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) <I32> <I32>)))
(define-extern Perl_rninstr (make-c-func 'Perl_rninstr (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>))))
(define-extern Perl_rsignal (make-c-func 'Perl_rsignal <Sighandler_t> (list (ptr <PerlInterpreter>) <c-int> <Sighandler_t>)))
(define-extern Perl_rsignal_restore (make-c-func 'Perl_rsignal_restore <c-int> (list (ptr <PerlInterpreter>) <c-int> (ptr <Sigsave_t>))))
(define-extern Perl_rsignal_save (make-c-func 'Perl_rsignal_save <c-int> (list (ptr <PerlInterpreter>) <c-int> <Sighandler_t> (ptr <Sigsave_t>))))
(define-extern Perl_rsignal_state (make-c-func 'Perl_rsignal_state <Sighandler_t> (list (ptr <PerlInterpreter>) <c-int>)))
(define-extern Perl_rxres_free (make-c-func 'Perl_rxres_free <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <c-void>)))))
(define-extern Perl_rxres_restore (make-c-func 'Perl_rxres_restore <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <c-void>)) (ptr <REGEXP>))))
(define-extern Perl_rxres_save (make-c-func 'Perl_rxres_save <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <c-void>)) (ptr <REGEXP>))))
(define-extern Perl_savepv (make-c-func 'Perl_savepv (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_savesharedpv (make-c-func 'Perl_savesharedpv (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_savepvn (make-c-func 'Perl_savepvn (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32>)))
(define-extern Perl_savestack_grow (make-c-func 'Perl_savestack_grow <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_savestack_grow_cnt (make-c-func 'Perl_savestack_grow_cnt <c-void> (list (ptr <PerlInterpreter>) <I32>)))
(define-extern Perl_save_aelem (make-c-func 'Perl_save_aelem <c-void> (list (ptr <PerlInterpreter>) (ptr <AV>) <I32> (ptr (ptr <SV>)))))
(define-extern Perl_save_alloc (make-c-func 'Perl_save_alloc <I32> (list (ptr <PerlInterpreter>) <I32> <I32>)))
(define-extern Perl_save_aptr (make-c-func 'Perl_save_aptr <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <AV>)))))
(define-extern Perl_save_ary (make-c-func 'Perl_save_ary (ptr <AV>) (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_save_bool (make-c-func 'Perl_save_bool <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_save_clearsv (make-c-func 'Perl_save_clearsv <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <SV>)))))
(define-extern Perl_save_delete (make-c-func 'Perl_save_delete <c-void> (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <c-char>) <I32>)))
(define-extern Perl_save_destructor (make-c-func 'Perl_save_destructor <c-void> (list (ptr <PerlInterpreter>) <DESTRUCTORFUNC_NOCONTEXT_t> (ptr <c-void>))))
(define-extern Perl_save_destructor_x (make-c-func 'Perl_save_destructor_x <c-void> (list (ptr <PerlInterpreter>) <DESTRUCTORFUNC_t> (ptr <c-void>))))
(define-extern Perl_save_freesv (make-c-func 'Perl_save_freesv <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_save_freeop (make-c-func 'Perl_save_freeop <c-void> (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_save_freepv (make-c-func 'Perl_save_freepv <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_save_generic_svref (make-c-func 'Perl_save_generic_svref <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <SV>)))))
(define-extern Perl_save_generic_pvref (make-c-func 'Perl_save_generic_pvref <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <c-char>)))))
(define-extern Perl_save_shared_pvref (make-c-func 'Perl_save_shared_pvref <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <c-char>)))))
(define-extern Perl_save_gp (make-c-func 'Perl_save_gp <c-void> (list (ptr <PerlInterpreter>) (ptr <GV>) <I32>)))
(define-extern Perl_save_hash (make-c-func 'Perl_save_hash (ptr <HV>) (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_save_helem (make-c-func 'Perl_save_helem <c-void> (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <SV>) (ptr (ptr <SV>)))))
(define-extern Perl_save_hints (make-c-func 'Perl_save_hints <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_save_hptr (make-c-func 'Perl_save_hptr <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <HV>)))))
(define-extern Perl_save_I16 (make-c-func 'Perl_save_I16 <c-void> (list (ptr <PerlInterpreter>) (ptr <I16>))))
(define-extern Perl_save_I32 (make-c-func 'Perl_save_I32 <c-void> (list (ptr <PerlInterpreter>) (ptr <I32>))))
(define-extern Perl_save_I8 (make-c-func 'Perl_save_I8 <c-void> (list (ptr <PerlInterpreter>) (ptr <I8>))))
(define-extern Perl_save_int (make-c-func 'Perl_save_int <c-void> (list (ptr <PerlInterpreter>) (ptr <c-int>))))
(define-extern Perl_save_item (make-c-func 'Perl_save_item <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_save_iv (make-c-func 'Perl_save_iv <c-void> (list (ptr <PerlInterpreter>) (ptr <IV>))))
(define-extern Perl_save_list (make-c-func 'Perl_save_list <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <SV>)) <I32>)))
(define-extern Perl_save_long (make-c-func 'Perl_save_long <c-void> (list (ptr <PerlInterpreter>) (ptr <c-long>))))
(define-extern Perl_save_mortalizesv (make-c-func 'Perl_save_mortalizesv <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_save_nogv (make-c-func 'Perl_save_nogv <c-void> (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_save_op (make-c-func 'Perl_save_op <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_save_scalar (make-c-func 'Perl_save_scalar (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_save_pptr (make-c-func 'Perl_save_pptr <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <c-char>)))))
(define-extern Perl_save_vptr (make-c-func 'Perl_save_vptr <c-void> (list (ptr <PerlInterpreter>) (ptr <c-void>))))
(define-extern Perl_save_re_context (make-c-func 'Perl_save_re_context <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_save_padsv (make-c-func 'Perl_save_padsv <c-void> (list (ptr <PerlInterpreter>) <PADOFFSET>)))
(define-extern Perl_save_sptr (make-c-func 'Perl_save_sptr <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <SV>)))))
(define-extern Perl_save_svref (make-c-func 'Perl_save_svref (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr (ptr <SV>)))))
(define-extern Perl_save_threadsv (make-c-func 'Perl_save_threadsv (ptr (ptr <SV>)) (list (ptr <PerlInterpreter>) <PADOFFSET>)))
(define-extern Perl_sawparens (make-c-func 'Perl_sawparens (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_scalar (make-c-func 'Perl_scalar (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_scalarkids (make-c-func 'Perl_scalarkids (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_scalarseq (make-c-func 'Perl_scalarseq (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_scalarvoid (make-c-func 'Perl_scalarvoid (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_scan_bin (make-c-func 'Perl_scan_bin <NV> (list (ptr <PerlInterpreter>) (ptr <c-char>) <STRLEN> (ptr <STRLEN>))))
(define-extern Perl_scan_hex (make-c-func 'Perl_scan_hex <NV> (list (ptr <PerlInterpreter>) (ptr <c-char>) <STRLEN> (ptr <STRLEN>))))
(define-extern Perl_scan_num (make-c-func 'Perl_scan_num (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <YYSTYPE>))))
(define-extern Perl_scan_oct (make-c-func 'Perl_scan_oct <NV> (list (ptr <PerlInterpreter>) (ptr <c-char>) <STRLEN> (ptr <STRLEN>))))
(define-extern Perl_scope (make-c-func 'Perl_scope (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_screaminstr (make-c-func 'Perl_screaminstr (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>) <I32> <I32> (ptr <I32>) <I32>)))
(define-extern Perl_setenv_getix (make-c-func 'Perl_setenv_getix <I32> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_setdefout (make-c-func 'Perl_setdefout <c-void> (list (ptr <PerlInterpreter>) (ptr <GV>))))
(define-extern Perl_share_hek (make-c-func 'Perl_share_hek (ptr <HEK>) (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32> <U32>)))
(define-extern Perl_sighandler (make-c-func 'Perl_sighandler <c-void> (list <c-int>)))
(define-extern Perl_csighandler (make-c-func 'Perl_csighandler <c-void> (list <c-int>)))
(define-extern Perl_stack_grow (make-c-func 'Perl_stack_grow (ptr (ptr <SV>)) (list (ptr <PerlInterpreter>) (ptr (ptr <SV>)) (ptr (ptr <SV>)) <c-int>)))
(define-extern Perl_start_subparse (make-c-func 'Perl_start_subparse <I32> (list (ptr <PerlInterpreter>) <I32> <U32>)))
(define-extern Perl_sub_crush_depth (make-c-func 'Perl_sub_crush_depth <c-void> (list (ptr <PerlInterpreter>) (ptr <CV>))))
(define-extern Perl_sv_2bool (make-c-func 'Perl_sv_2bool <c-char> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_2cv (make-c-func 'Perl_sv_2cv (ptr <CV>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr (ptr <HV>)) (ptr (ptr <GV>)) <I32>)))
(define-extern Perl_sv_2io (make-c-func 'Perl_sv_2io (ptr <IO>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_2iv (make-c-func 'Perl_sv_2iv <IV> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_2mortal (make-c-func 'Perl_sv_2mortal (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_2nv (make-c-func 'Perl_sv_2nv <NV> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_2pvutf8 (make-c-func 'Perl_sv_2pvutf8 (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <STRLEN>))))
(define-extern Perl_sv_2pvbyte (make-c-func 'Perl_sv_2pvbyte (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <STRLEN>))))
(define-extern Perl_sv_pvn_nomg (make-c-func 'Perl_sv_pvn_nomg (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <STRLEN>))))
(define-extern Perl_sv_2uv (make-c-func 'Perl_sv_2uv <UV> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_iv (make-c-func 'Perl_sv_iv <IV> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_uv (make-c-func 'Perl_sv_uv <UV> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_nv (make-c-func 'Perl_sv_nv <NV> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_pvn (make-c-func 'Perl_sv_pvn (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <STRLEN>))))
(define-extern Perl_sv_pvutf8n (make-c-func 'Perl_sv_pvutf8n (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <STRLEN>))))
(define-extern Perl_sv_pvbyten (make-c-func 'Perl_sv_pvbyten (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <STRLEN>))))
(define-extern Perl_sv_true (make-c-func 'Perl_sv_true <I32> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_add_arena (make-c-func 'Perl_sv_add_arena <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) <U32> <U32>)))
(define-extern Perl_sv_backoff (make-c-func 'Perl_sv_backoff <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_bless (make-c-func 'Perl_sv_bless (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <HV>))))
(define-extern Perl_sv_catpvf (make-c-func-vaargs 'Perl_sv_catpvf <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_vcatpvf (make-c-func 'Perl_sv_vcatpvf <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_sv_catpv (make-c-func 'Perl_sv_catpv <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_chop (make-c-func 'Perl_sv_chop <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_clean_all (make-c-func 'Perl_sv_clean_all <I32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_sv_clean_objs (make-c-func 'Perl_sv_clean_objs <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_sv_clear (make-c-func 'Perl_sv_clear <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_cmp (make-c-func 'Perl_sv_cmp <I32> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>))))
(define-extern Perl_sv_cmp_locale (make-c-func 'Perl_sv_cmp_locale <I32> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>))))
(define-extern Perl_sv_collxfrm (make-c-func 'Perl_sv_collxfrm (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <STRLEN>))))
(define-extern Perl_sv_compile_2op (make-c-func 'Perl_sv_compile_2op (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr (ptr <OP>)) (ptr <c-char>) (ptr (ptr <PAD>)))))
(define-extern Perl_getcwd_sv (make-c-func 'Perl_getcwd_sv <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_dec (make-c-func 'Perl_sv_dec <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_dump (make-c-func 'Perl_sv_dump <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_derived_from (make-c-func 'Perl_sv_derived_from <c-char> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_eq (make-c-func 'Perl_sv_eq <I32> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>))))
(define-extern Perl_sv_free (make-c-func 'Perl_sv_free <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_free_arenas (make-c-func 'Perl_sv_free_arenas <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_sv_gets (make-c-func 'Perl_sv_gets (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <PerlIO>) <I32>)))
(define-extern Perl_sv_grow (make-c-func 'Perl_sv_grow (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) <STRLEN>)))
(define-extern Perl_sv_inc (make-c-func 'Perl_sv_inc <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_insert (make-c-func 'Perl_sv_insert <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <STRLEN> <STRLEN> (ptr <c-char>) <STRLEN>)))
(define-extern Perl_sv_isa (make-c-func 'Perl_sv_isa <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_isobject (make-c-func 'Perl_sv_isobject <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_len (make-c-func 'Perl_sv_len <STRLEN> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_len_utf8 (make-c-func 'Perl_sv_len_utf8 <STRLEN> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_magic (make-c-func 'Perl_sv_magic <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>) <c-int> (ptr <c-char>) <I32>)))
(define-extern Perl_sv_magicext (make-c-func 'Perl_sv_magicext (ptr <MAGIC>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>) <c-int> (ptr <MGVTBL>) (ptr <c-char>) <I32>)))
(define-extern Perl_sv_mortalcopy (make-c-func 'Perl_sv_mortalcopy (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_newmortal (make-c-func 'Perl_sv_newmortal (ptr <SV>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_sv_newref (make-c-func 'Perl_sv_newref (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_peek (make-c-func 'Perl_sv_peek (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_pos_u2b (make-c-func 'Perl_sv_pos_u2b <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <I32>) (ptr <I32>))))
(define-extern Perl_sv_pos_b2u (make-c-func 'Perl_sv_pos_b2u <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <I32>))))
(define-extern Perl_sv_pvutf8n_force (make-c-func 'Perl_sv_pvutf8n_force (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <STRLEN>))))
(define-extern Perl_sv_pvbyten_force (make-c-func 'Perl_sv_pvbyten_force (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <STRLEN>))))
(define-extern Perl_sv_recode_to_utf8 (make-c-func 'Perl_sv_recode_to_utf8 (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>))))
(define-extern Perl_sv_cat_decode (make-c-func 'Perl_sv_cat_decode <c-char> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>) (ptr <SV>) (ptr <c-int>) (ptr <c-char>) <c-int>)))
(define-extern Perl_sv_reftype (make-c-func 'Perl_sv_reftype (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) <c-int>)))
(define-extern Perl_sv_replace (make-c-func 'Perl_sv_replace <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>))))
(define-extern Perl_sv_report_used (make-c-func 'Perl_sv_report_used <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_sv_reset (make-c-func 'Perl_sv_reset <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <HV>))))
(define-extern Perl_sv_setpvf (make-c-func-vaargs 'Perl_sv_setpvf <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_vsetpvf (make-c-func 'Perl_sv_vsetpvf <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_sv_setiv (make-c-func 'Perl_sv_setiv <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <IV>)))
(define-extern Perl_sv_setpviv (make-c-func 'Perl_sv_setpviv <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <IV>)))
(define-extern Perl_sv_setuv (make-c-func 'Perl_sv_setuv <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <UV>)))
(define-extern Perl_sv_setnv (make-c-func 'Perl_sv_setnv <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <NV>)))
(define-extern Perl_sv_setref_iv (make-c-func 'Perl_sv_setref_iv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <IV>)))
(define-extern Perl_sv_setref_uv (make-c-func 'Perl_sv_setref_uv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <UV>)))
(define-extern Perl_sv_setref_nv (make-c-func 'Perl_sv_setref_nv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <NV>)))
(define-extern Perl_sv_setref_pv (make-c-func 'Perl_sv_setref_pv (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) (ptr <c-void>))))
(define-extern Perl_sv_setref_pvn (make-c-func 'Perl_sv_setref_pvn (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) (ptr <c-char>) <STRLEN>)))
(define-extern Perl_sv_setpv (make-c-func 'Perl_sv_setpv <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_setpvn (make-c-func 'Perl_sv_setpvn <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <STRLEN>)))
(define-extern Perl_sv_taint (make-c-func 'Perl_sv_taint <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_tainted (make-c-func 'Perl_sv_tainted <c-char> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_unmagic (make-c-func 'Perl_sv_unmagic <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) <c-int>)))
(define-extern Perl_sv_unref (make-c-func 'Perl_sv_unref <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_unref_flags (make-c-func 'Perl_sv_unref_flags <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <U32>)))
(define-extern Perl_sv_untaint (make-c-func 'Perl_sv_untaint <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_upgrade (make-c-func 'Perl_sv_upgrade <c-char> (list (ptr <PerlInterpreter>) (ptr <SV>) <U32>)))
(define-extern Perl_sv_usepvn (make-c-func 'Perl_sv_usepvn <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <STRLEN>)))
(define-extern Perl_sv_vcatpvfn (make-c-func 'Perl_sv_vcatpvfn <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <STRLEN> (ptr <va_list>) (ptr (ptr <SV>)) <I32> (ptr <c-char>))))
(define-extern Perl_sv_vsetpvfn (make-c-func 'Perl_sv_vsetpvfn <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <STRLEN> (ptr <va_list>) (ptr (ptr <SV>)) <I32> (ptr <c-char>))))
(define-extern Perl_str_to_version (make-c-func 'Perl_str_to_version <NV> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_swash_init (make-c-func 'Perl_swash_init (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) (ptr <SV>) <I32> <I32>)))
(define-extern Perl_swash_fetch (make-c-func 'Perl_swash_fetch <UV> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <U8>) <c-char>)))
(define-extern Perl_taint_env (make-c-func 'Perl_taint_env <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_taint_proper (make-c-func 'Perl_taint_proper <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>))))
(define-extern Perl_to_utf8_case (make-c-func 'Perl_to_utf8_case <UV> (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <U8>) (ptr <STRLEN>) (ptr (ptr <SV>)) (ptr <c-char>) (ptr <c-char>))))
(define-extern Perl_to_utf8_lower (make-c-func 'Perl_to_utf8_lower <UV> (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_to_utf8_upper (make-c-func 'Perl_to_utf8_upper <UV> (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_to_utf8_title (make-c-func 'Perl_to_utf8_title <UV> (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_to_utf8_fold (make-c-func 'Perl_to_utf8_fold <UV> (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_unpack_str (make-c-func 'Perl_unpack_str <I32> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) (ptr (ptr <c-char>)) <I32> <U32>)))
(define-extern Perl_unpackstring (make-c-func 'Perl_unpackstring <I32> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) <U32>)))
(define-extern Perl_unsharepvn (make-c-func 'Perl_unsharepvn <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) <I32> <U32>)))
(define-extern Perl_unshare_hek (make-c-func 'Perl_unshare_hek <c-void> (list (ptr <PerlInterpreter>) (ptr <HEK>))))
(define-extern Perl_utilize (make-c-func 'Perl_utilize <c-void> (list (ptr <PerlInterpreter>) <c-int> <I32> (ptr <OP>) (ptr <OP>) (ptr <OP>))))
(define-extern Perl_utf16_to_utf8 (make-c-func 'Perl_utf16_to_utf8 (ptr <U8>) (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <U8>) <I32> (ptr <I32>))))
(define-extern Perl_utf16_to_utf8_reversed (make-c-func 'Perl_utf16_to_utf8_reversed (ptr <U8>) (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <U8>) <I32> (ptr <I32>))))
(define-extern Perl_utf8_length (make-c-func 'Perl_utf8_length <STRLEN> (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <U8>))))
(define-extern Perl_utf8_distance (make-c-func 'Perl_utf8_distance <IV> (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <U8>))))
(define-extern Perl_utf8_hop (make-c-func 'Perl_utf8_hop (ptr <U8>) (list (ptr <PerlInterpreter>) (ptr <U8>) <I32>)))
(define-extern Perl_utf8_to_bytes (make-c-func 'Perl_utf8_to_bytes (ptr <U8>) (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_bytes_from_utf8 (make-c-func 'Perl_bytes_from_utf8 (ptr <U8>) (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <STRLEN>) (ptr <c-char>))))
(define-extern Perl_bytes_to_utf8 (make-c-func 'Perl_bytes_to_utf8 (ptr <U8>) (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_utf8_to_uvchr (make-c-func 'Perl_utf8_to_uvchr <UV> (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_utf8_to_uvuni (make-c-func 'Perl_utf8_to_uvuni <UV> (list (ptr <PerlInterpreter>) (ptr <U8>) (ptr <STRLEN>))))
(define-extern Perl_utf8n_to_uvuni (make-c-func 'Perl_utf8n_to_uvuni <UV> (list (ptr <PerlInterpreter>) (ptr <U8>) <STRLEN> (ptr <STRLEN>) <U32>)))
(define-extern Perl_utf8n_to_uvuni (make-c-func 'Perl_utf8n_to_uvuni <UV> (list (ptr <PerlInterpreter>) (ptr <U8>) <STRLEN> (ptr <STRLEN>) <U32>)))
(define-extern Perl_uvuni_to_utf8 (make-c-func 'Perl_uvuni_to_utf8 (ptr <U8>) (list (ptr <PerlInterpreter>) (ptr <U8>) <UV>)))
(define-extern Perl_uvuni_to_utf8 (make-c-func 'Perl_uvuni_to_utf8 (ptr <U8>) (list (ptr <PerlInterpreter>) (ptr <U8>) <UV>)))
(define-extern Perl_uvchr_to_utf8_flags (make-c-func 'Perl_uvchr_to_utf8_flags (ptr <U8>) (list (ptr <PerlInterpreter>) (ptr <U8>) <UV> <UV>)))
(define-extern Perl_uvuni_to_utf8_flags (make-c-func 'Perl_uvuni_to_utf8_flags (ptr <U8>) (list (ptr <PerlInterpreter>) (ptr <U8>) <UV> <UV>)))
(define-extern Perl_pv_uni_display (make-c-func 'Perl_pv_uni_display (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <U8>) <STRLEN> <STRLEN> <UV>)))
(define-extern Perl_sv_uni_display (make-c-func 'Perl_sv_uni_display (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>) <STRLEN> <UV>)))
(define-extern Perl_vivify_defelem (make-c-func 'Perl_vivify_defelem <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_vivify_ref (make-c-func 'Perl_vivify_ref <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <U32>)))
(define-extern Perl_wait4pid (make-c-func 'Perl_wait4pid <I32> (list (ptr <PerlInterpreter>) <pid_t> (ptr <c-int>) <c-int>)))
(define-extern Perl_parse_unicode_opts (make-c-func 'Perl_parse_unicode_opts <U32> (list (ptr <PerlInterpreter>) (ptr (ptr <c-char>)))))
(define-extern Perl_seed (make-c-func 'Perl_seed <U32> (list (ptr <PerlInterpreter>))))
(define-extern Perl_get_hash_seed (make-c-func 'Perl_get_hash_seed <UV> (list (ptr <PerlInterpreter>))))
(define-extern Perl_report_evil_fh (make-c-func 'Perl_report_evil_fh <c-void> (list (ptr <PerlInterpreter>) (ptr <GV>) (ptr <IO>) <I32>)))
(define-extern Perl_report_uninit (make-c-func 'Perl_report_uninit <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_warn (make-c-func-vaargs 'Perl_warn <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_vwarn (make-c-func 'Perl_vwarn <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_warner (make-c-func-vaargs 'Perl_warner <c-void> (list (ptr <PerlInterpreter>) <U32> (ptr <c-char>))))
(define-extern Perl_vwarner (make-c-func 'Perl_vwarner <c-void> (list (ptr <PerlInterpreter>) <U32> (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_watch (make-c-func 'Perl_watch <c-void> (list (ptr <PerlInterpreter>) (ptr (ptr <c-char>)))))
(define-extern Perl_whichsig (make-c-func 'Perl_whichsig <I32> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_write_to_stderr (make-c-func 'Perl_write_to_stderr <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) <c-int>)))
(define-extern Perl_yyerror (make-c-func 'Perl_yyerror <c-int> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_yylex (make-c-func 'Perl_yylex <c-int> (list (ptr <PerlInterpreter>))))
(define-extern Perl_yyparse (make-c-func 'Perl_yyparse <c-int> (list (ptr <PerlInterpreter>))))
(define-extern Perl_yywarn (make-c-func 'Perl_yywarn <c-int> (list (ptr <PerlInterpreter>) (ptr <c-char>))))
(define-extern Perl_safesysmalloc (make-c-func 'Perl_safesysmalloc (ptr <c-void>) (list <size_t>)))
(define-extern Perl_safesyscalloc (make-c-func 'Perl_safesyscalloc (ptr <c-void>) (list <size_t> <size_t>)))
(define-extern Perl_safesysrealloc (make-c-func 'Perl_safesysrealloc (ptr <c-void>) (list (ptr <c-void>) <size_t>)))
(define-extern Perl_safesysfree (make-c-func 'Perl_safesysfree <c-void> (list (ptr <c-void>))))
(define-extern Perl_runops_standard (make-c-func 'Perl_runops_standard <c-int> (list (ptr <PerlInterpreter>))))
(define-extern Perl_runops_debug (make-c-func 'Perl_runops_debug <c-int> (list (ptr <PerlInterpreter>))))
(define-extern Perl_sv_catpvf_mg (make-c-func-vaargs 'Perl_sv_catpvf_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_vcatpvf_mg (make-c-func 'Perl_sv_vcatpvf_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_sv_catpv_mg (make-c-func 'Perl_sv_catpv_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_catpvn_mg (make-c-func 'Perl_sv_catpvn_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <STRLEN>)))
(define-extern Perl_sv_catsv_mg (make-c-func 'Perl_sv_catsv_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>))))
(define-extern Perl_sv_setpvf_mg (make-c-func-vaargs 'Perl_sv_setpvf_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_vsetpvf_mg (make-c-func 'Perl_sv_vsetpvf_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_sv_setiv_mg (make-c-func 'Perl_sv_setiv_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <IV>)))
(define-extern Perl_sv_setpviv_mg (make-c-func 'Perl_sv_setpviv_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <IV>)))
(define-extern Perl_sv_setuv_mg (make-c-func 'Perl_sv_setuv_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <UV>)))
(define-extern Perl_sv_setnv_mg (make-c-func 'Perl_sv_setnv_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <NV>)))
(define-extern Perl_sv_setpv_mg (make-c-func 'Perl_sv_setpv_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>))))
(define-extern Perl_sv_setpvn_mg (make-c-func 'Perl_sv_setpvn_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <STRLEN>)))
(define-extern Perl_sv_setsv_mg (make-c-func 'Perl_sv_setsv_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>))))
(define-extern Perl_sv_usepvn_mg (make-c-func 'Perl_sv_usepvn_mg <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <STRLEN>)))
(define-extern Perl_get_vtbl (make-c-func 'Perl_get_vtbl (ptr <MGVTBL>) (list (ptr <PerlInterpreter>) <c-int>)))
(define-extern Perl_pv_display (make-c-func 'Perl_pv_display (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <STRLEN> <STRLEN> <STRLEN>)))
(define-extern Perl_dump_indent (make-c-func-vaargs 'Perl_dump_indent <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <PerlIO>) (ptr <c-char>))))
(define-extern Perl_dump_vindent (make-c-func 'Perl_dump_vindent <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <PerlIO>) (ptr <c-char>) (ptr <va_list>))))
(define-extern Perl_do_gv_dump (make-c-func 'Perl_do_gv_dump <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <PerlIO>) (ptr <c-char>) (ptr <GV>))))
(define-extern Perl_do_gvgv_dump (make-c-func 'Perl_do_gvgv_dump <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <PerlIO>) (ptr <c-char>) (ptr <GV>))))
(define-extern Perl_do_hv_dump (make-c-func 'Perl_do_hv_dump <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <PerlIO>) (ptr <c-char>) (ptr <HV>))))
(define-extern Perl_do_magic_dump (make-c-func 'Perl_do_magic_dump <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <PerlIO>) (ptr <MAGIC>) <I32> <I32> <c-char> <STRLEN>)))
(define-extern Perl_do_op_dump (make-c-func 'Perl_do_op_dump <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <PerlIO>) (ptr <OP>))))
(define-extern Perl_do_pmop_dump (make-c-func 'Perl_do_pmop_dump <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <PerlIO>) (ptr <PMOP>))))
(define-extern Perl_do_sv_dump (make-c-func 'Perl_do_sv_dump <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <PerlIO>) (ptr <SV>) <I32> <I32> <c-char> <STRLEN>)))
(define-extern Perl_magic_dump (make-c-func 'Perl_magic_dump <c-void> (list (ptr <PerlInterpreter>) (ptr <MAGIC>))))
(define-extern Perl_reginitcolors (make-c-func 'Perl_reginitcolors <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_sv_2pv_nolen (make-c-func 'Perl_sv_2pv_nolen (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_2pvutf8_nolen (make-c-func 'Perl_sv_2pvutf8_nolen (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_2pvbyte_nolen (make-c-func 'Perl_sv_2pvbyte_nolen (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_utf8_downgrade (make-c-func 'Perl_sv_utf8_downgrade <c-char> (list (ptr <PerlInterpreter>) (ptr <SV>) <c-char>)))
(define-extern Perl_sv_utf8_encode (make-c-func 'Perl_sv_utf8_encode <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_utf8_decode (make-c-func 'Perl_sv_utf8_decode <c-char> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_force_normal (make-c-func 'Perl_sv_force_normal <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_force_normal_flags (make-c-func 'Perl_sv_force_normal_flags <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) <U32>)))
(define-extern Perl_tmps_grow (make-c-func 'Perl_tmps_grow <c-void> (list (ptr <PerlInterpreter>) <I32>)))
(define-extern Perl_sv_rvweaken (make-c-func 'Perl_sv_rvweaken (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_magic_killbackrefs (make-c-func 'Perl_magic_killbackrefs <c-int> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <MAGIC>))))
(define-extern Perl_newANONATTRSUB (make-c-func 'Perl_newANONATTRSUB (ptr <OP>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newATTRSUB (make-c-func 'Perl_newATTRSUB (ptr <CV>) (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>) (ptr <OP>) (ptr <OP>))))
(define-extern Perl_newMYSUB (make-c-func 'Perl_newMYSUB <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <OP>) (ptr <OP>) (ptr <OP>) (ptr <OP>))))
(define-extern Perl_my_attrs (make-c-func 'Perl_my_attrs (ptr <OP>) (list (ptr <PerlInterpreter>) (ptr <OP>) (ptr <OP>))))
(define-extern Perl_boot_core_xsutils (make-c-func 'Perl_boot_core_xsutils <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_cx_dup (make-c-func 'Perl_cx_dup (ptr <PERL_CONTEXT>) (list (ptr <PerlInterpreter>) (ptr <PERL_CONTEXT>) <I32> <I32> (ptr <CLONE_PARAMS>))))
(define-extern Perl_si_dup (make-c-func 'Perl_si_dup (ptr <PERL_SI>) (list (ptr <PerlInterpreter>) (ptr <PERL_SI>) (ptr <CLONE_PARAMS>))))
(define-extern Perl_ss_dup (make-c-func 'Perl_ss_dup (ptr <ANY>) (list (ptr <PerlInterpreter>) (ptr <PerlInterpreter>) (ptr <CLONE_PARAMS>))))
(define-extern Perl_any_dup (make-c-func 'Perl_any_dup (ptr <c-void>) (list (ptr <PerlInterpreter>) (ptr <c-void>) (ptr <PerlInterpreter>))))
(define-extern Perl_he_dup (make-c-func 'Perl_he_dup (ptr <HE>) (list (ptr <PerlInterpreter>) (ptr <HE>) <c-char> (ptr <CLONE_PARAMS>))))
(define-extern Perl_re_dup (make-c-func 'Perl_re_dup (ptr <REGEXP>) (list (ptr <PerlInterpreter>) (ptr <REGEXP>) (ptr <CLONE_PARAMS>))))
(define-extern Perl_fp_dup (make-c-func 'Perl_fp_dup (ptr <PerlIO>) (list (ptr <PerlInterpreter>) (ptr <PerlIO>) <c-char> (ptr <CLONE_PARAMS>))))
(define-extern Perl_dirp_dup (make-c-func 'Perl_dirp_dup (ptr <DIR>) (list (ptr <PerlInterpreter>) (ptr <DIR>))))
(define-extern Perl_gp_dup (make-c-func 'Perl_gp_dup (ptr <GP>) (list (ptr <PerlInterpreter>) (ptr <GP>) (ptr <CLONE_PARAMS>))))
(define-extern Perl_mg_dup (make-c-func 'Perl_mg_dup (ptr <MAGIC>) (list (ptr <PerlInterpreter>) (ptr <MAGIC>) (ptr <CLONE_PARAMS>))))
(define-extern Perl_sv_dup (make-c-func 'Perl_sv_dup (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <CLONE_PARAMS>))))
(define-extern Perl_ptr_table_new (make-c-func 'Perl_ptr_table_new (ptr <PTR_TBL_t>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_ptr_table_fetch (make-c-func 'Perl_ptr_table_fetch (ptr <c-void>) (list (ptr <PerlInterpreter>) (ptr <PTR_TBL_t>) (ptr <c-void>))))
(define-extern Perl_ptr_table_store (make-c-func 'Perl_ptr_table_store <c-void> (list (ptr <PerlInterpreter>) (ptr <PTR_TBL_t>) (ptr <c-void>) (ptr <c-void>))))
(define-extern Perl_ptr_table_split (make-c-func 'Perl_ptr_table_split <c-void> (list (ptr <PerlInterpreter>) (ptr <PTR_TBL_t>))))
(define-extern Perl_ptr_table_clear (make-c-func 'Perl_ptr_table_clear <c-void> (list (ptr <PerlInterpreter>) (ptr <PTR_TBL_t>))))
(define-extern Perl_ptr_table_free (make-c-func 'Perl_ptr_table_free <c-void> (list (ptr <PerlInterpreter>) (ptr <PTR_TBL_t>))))
(define-extern Perl_custom_op_name (make-c-func 'Perl_custom_op_name (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_custom_op_desc (make-c-func 'Perl_custom_op_desc (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <OP>))))
(define-extern Perl_sv_nosharing (make-c-func 'Perl_sv_nosharing <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_nolocking (make-c-func 'Perl_sv_nolocking <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_sv_nounlocking (make-c-func 'Perl_sv_nounlocking <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>))))
(define-extern Perl_nothreadhook (make-c-func 'Perl_nothreadhook <c-int> (list (ptr <PerlInterpreter>))))
(define-extern Perl_sv_setsv_flags (make-c-func 'Perl_sv_setsv_flags <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>) <I32>)))
(define-extern Perl_sv_catpvn_flags (make-c-func 'Perl_sv_catpvn_flags <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <c-char>) <STRLEN> <I32>)))
(define-extern Perl_sv_catsv_flags (make-c-func 'Perl_sv_catsv_flags <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>) <I32>)))
(define-extern Perl_sv_utf8_upgrade_flags (make-c-func 'Perl_sv_utf8_upgrade_flags <STRLEN> (list (ptr <PerlInterpreter>) (ptr <SV>) <I32>)))
(define-extern Perl_sv_pvn_force_flags (make-c-func 'Perl_sv_pvn_force_flags (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <STRLEN>) <I32>)))
(define-extern Perl_sv_2pv_flags (make-c-func 'Perl_sv_2pv_flags (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <STRLEN>) <I32>)))
(define-extern Perl_sv_copypv (make-c-func 'Perl_sv_copypv <c-void> (list (ptr <PerlInterpreter>) (ptr <SV>) (ptr <SV>))))
(define-extern Perl_my_atof2 (make-c-func 'Perl_my_atof2 (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <NV>))))
(define-extern Perl_my_socketpair (make-c-func 'Perl_my_socketpair <c-int> (list <c-int> <c-int> <c-int> (make-c-array <c-int> 2))))
(define-extern Perl_PerlIO_close (make-c-func 'Perl_PerlIO_close <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_fill (make-c-func 'Perl_PerlIO_fill <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_fileno (make-c-func 'Perl_PerlIO_fileno <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_eof (make-c-func 'Perl_PerlIO_eof <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_error (make-c-func 'Perl_PerlIO_error <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_flush (make-c-func 'Perl_PerlIO_flush <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_clearerr (make-c-func 'Perl_PerlIO_clearerr <c-void> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_set_cnt (make-c-func 'Perl_PerlIO_set_cnt <c-void> (list (ptr <PerlInterpreter>) (ptr <PerlIO>) <c-int>)))
(define-extern Perl_PerlIO_set_ptrcnt (make-c-func 'Perl_PerlIO_set_ptrcnt <c-void> (list (ptr <PerlInterpreter>) (ptr <PerlIO>) (ptr <c-char>) <c-int>)))
(define-extern Perl_PerlIO_setlinebuf (make-c-func 'Perl_PerlIO_setlinebuf <c-void> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_read (make-c-func 'Perl_PerlIO_read <ssize_t> (list (ptr <PerlInterpreter>) (ptr <PerlIO>) (ptr <c-void>) <size_t>)))
(define-extern Perl_PerlIO_write (make-c-func 'Perl_PerlIO_write <ssize_t> (list (ptr <PerlInterpreter>) (ptr <PerlIO>) (ptr <c-void>) <size_t>)))
(define-extern Perl_PerlIO_unread (make-c-func 'Perl_PerlIO_unread <ssize_t> (list (ptr <PerlInterpreter>) (ptr <PerlIO>) (ptr <c-void>) <size_t>)))
(define-extern Perl_PerlIO_tell (make-c-func 'Perl_PerlIO_tell <off_t> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_seek (make-c-func 'Perl_PerlIO_seek <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>) <off_t> <c-int>)))
(define-extern Perl_PerlIO_get_base (make-c-func 'Perl_PerlIO_get_base (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_get_ptr (make-c-func 'Perl_PerlIO_get_ptr (ptr <c-char>) (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_get_bufsiz (make-c-func 'Perl_PerlIO_get_bufsiz <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_get_cnt (make-c-func 'Perl_PerlIO_get_cnt <c-int> (list (ptr <PerlInterpreter>) (ptr <PerlIO>))))
(define-extern Perl_PerlIO_stdin (make-c-func 'Perl_PerlIO_stdin (ptr <PerlIO>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_PerlIO_stdout (make-c-func 'Perl_PerlIO_stdout (ptr <PerlIO>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_PerlIO_stderr (make-c-func 'Perl_PerlIO_stderr (ptr <PerlIO>) (list (ptr <PerlInterpreter>))))
(define-extern Perl_deb_stack_all (make-c-func 'Perl_deb_stack_all <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_pad_new (make-c-func 'Perl_pad_new (ptr <PADLIST>) (list (ptr <PerlInterpreter>) <c-int>)))
(define-extern Perl_pad_undef (make-c-func 'Perl_pad_undef <c-void> (list (ptr <PerlInterpreter>) (ptr <CV>))))
(define-extern Perl_pad_add_name (make-c-func 'Perl_pad_add_name <PADOFFSET> (list (ptr <PerlInterpreter>) (ptr <c-char>) (ptr <HV>) (ptr <HV>) <c-char>)))
(define-extern Perl_pad_add_anon (make-c-func 'Perl_pad_add_anon <PADOFFSET> (list (ptr <PerlInterpreter>) (ptr <SV>) <U16>)))
(define-extern Perl_pad_check_dup (make-c-func 'Perl_pad_check_dup <c-void> (list (ptr <PerlInterpreter>) (ptr <c-char>) <c-char> (ptr <HV>))))
(define-extern Perl_pad_block_start (make-c-func 'Perl_pad_block_start <c-void> (list (ptr <PerlInterpreter>) <c-int>)))
(define-extern Perl_pad_tidy (make-c-func 'Perl_pad_tidy <c-void> (list (ptr <PerlInterpreter>) <padtidy_type>)))
(define-extern Perl_do_dump_pad (make-c-func 'Perl_do_dump_pad <c-void> (list (ptr <PerlInterpreter>) <I32> (ptr <PerlIO>) (ptr <PADLIST>) <c-int>)))
(define-extern Perl_pad_fixup_inner_anons (make-c-func 'Perl_pad_fixup_inner_anons <c-void> (list (ptr <PerlInterpreter>) (ptr <PADLIST>) (ptr <CV>) (ptr <CV>))))
(define-extern Perl_pad_push (make-c-func 'Perl_pad_push <c-void> (list (ptr <PerlInterpreter>) (ptr <PADLIST>) <c-int> <c-int>)))
(define-extern Perl_find_runcv (make-c-func 'Perl_find_runcv (ptr <CV>) (list (ptr <PerlInterpreter>) (ptr <U32>))))
(define-extern Perl_free_tied_hv_pool (make-c-func 'Perl_free_tied_hv_pool <c-void> (list (ptr <PerlInterpreter>))))
(define-extern Perl_hv_clear_placeholders (make-c-func 'Perl_hv_clear_placeholders <c-void> (list (ptr <PerlInterpreter>) (ptr <HV>))))
(define-extern Perl_hv_scalar (make-c-func 'Perl_hv_scalar (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <HV>))))
(define-extern Perl_magic_scalarpack (make-c-func 'Perl_magic_scalarpack (ptr <SV>) (list (ptr <PerlInterpreter>) (ptr <HV>) (ptr <MAGIC>))))
(define-extern PL_op_name (deref (cast (ptr (make-c-array (ptr <c-char>) #f)) (c-lookup-symbol 'PL_op_name))))
(define-extern PL_op_desc (deref (cast (ptr (make-c-array (ptr <c-char>) #f)) (c-lookup-symbol 'PL_op_desc))))
(define-extern PL_ppaddr (deref (cast (ptr (make-c-array (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>)))) #f)) (c-lookup-symbol 'PL_ppaddr))))
(define-extern PL_check (deref (cast (ptr (make-c-array (make-c-func-ptr (ptr <OP>) (list (list 'my_perl (ptr <PerlInterpreter>)) (list 'op (ptr <OP>)))) #f)) (c-lookup-symbol 'PL_check))))
(define-extern PL_opargs (deref (cast (ptr (make-c-array <U32> #f)) (c-lookup-symbol 'PL_opargs))))
(define-extern PL_curinterp (deref (cast (ptr (ptr <PerlInterpreter>)) (c-lookup-symbol 'PL_curinterp))))
(define-extern PL_thr_key (deref (cast (ptr <perl_key>) (c-lookup-symbol 'PL_thr_key))))
(define-extern PL_Yes (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'PL_Yes))))
(define-extern PL_No (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'PL_No))))
(define-extern PL_hexdigit (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'PL_hexdigit))))
(define-extern PL_patleave (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'PL_patleave))))
(define-extern PL_do_undump (deref (cast (ptr <c-char>) (c-lookup-symbol 'PL_do_undump))))
(define-extern PL_op_mutex (deref (cast (ptr <perl_mutex>) (c-lookup-symbol 'PL_op_mutex))))
(define-extern PL_dollarzero_mutex (deref (cast (ptr <perl_mutex>) (c-lookup-symbol 'PL_dollarzero_mutex))))
(define-extern PL_sh_path (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'PL_sh_path))))
(define-extern PL_sigfpe_saved (deref (cast (ptr <Sighandler_t>) (c-lookup-symbol 'PL_sigfpe_saved))))
(define-extern PL_sv_placeholder (deref (cast (ptr <SV>) (c-lookup-symbol 'PL_sv_placeholder))))
(define-extern PL_csighandlerp (deref (cast (ptr <Sighandler_t>) (c-lookup-symbol 'PL_csighandlerp))))
(define-extern PL_use_safe_putenv (deref (cast (ptr <c-int>) (c-lookup-symbol 'PL_use_safe_putenv))))
(define-extern PL_vtbl_sv (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_sv))))
(define-extern PL_vtbl_env (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_env))))
(define-extern PL_vtbl_envelem (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_envelem))))
(define-extern PL_vtbl_sig (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_sig))))
(define-extern PL_vtbl_sigelem (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_sigelem))))
(define-extern PL_vtbl_pack (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_pack))))
(define-extern PL_vtbl_packelem (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_packelem))))
(define-extern PL_vtbl_dbline (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_dbline))))
(define-extern PL_vtbl_isa (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_isa))))
(define-extern PL_vtbl_isaelem (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_isaelem))))
(define-extern PL_vtbl_arylen (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_arylen))))
(define-extern PL_vtbl_glob (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_glob))))
(define-extern PL_vtbl_mglob (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_mglob))))
(define-extern PL_vtbl_nkeys (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_nkeys))))
(define-extern PL_vtbl_taint (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_taint))))
(define-extern PL_vtbl_substr (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_substr))))
(define-extern PL_vtbl_vec (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_vec))))
(define-extern PL_vtbl_pos (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_pos))))
(define-extern PL_vtbl_bm (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_bm))))
(define-extern PL_vtbl_fm (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_fm))))
(define-extern PL_vtbl_uvar (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_uvar))))
(define-extern PL_vtbl_ovrld (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_ovrld))))
(define-extern PL_vtbl_defelem (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_defelem))))
(define-extern PL_vtbl_regexp (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_regexp))))
(define-extern PL_vtbl_regdata (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_regdata))))
(define-extern PL_vtbl_regdatum (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_regdatum))))
(define-extern PL_vtbl_collxfrm (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_collxfrm))))
(define-extern PL_vtbl_amagic (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_amagic))))
(define-extern PL_vtbl_amagicelem (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_amagicelem))))
(define-extern PL_vtbl_backref (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_backref))))
(define-extern PL_vtbl_utf8 (deref (cast (ptr <MGVTBL>) (c-lookup-symbol 'PL_vtbl_utf8))))
(define-enum fallback_amg 0)
(define-enum abs_amg 1)
(define-enum bool__amg 2)
(define-enum nomethod_amg 3)
(define-enum string_amg 4)
(define-enum numer_amg 5)
(define-enum add_amg 6)
(define-enum add_ass_amg 7)
(define-enum subtr_amg 8)
(define-enum subtr_ass_amg 9)
(define-enum mult_amg 10)
(define-enum mult_ass_amg 11)
(define-enum div_amg 12)
(define-enum div_ass_amg 13)
(define-enum modulo_amg 14)
(define-enum modulo_ass_amg 15)
(define-enum pow_amg 16)
(define-enum pow_ass_amg 17)
(define-enum lshift_amg 18)
(define-enum lshift_ass_amg 19)
(define-enum rshift_amg 20)
(define-enum rshift_ass_amg 21)
(define-enum band_amg 22)
(define-enum band_ass_amg 23)
(define-enum bor_amg 24)
(define-enum bor_ass_amg 25)
(define-enum bxor_amg 26)
(define-enum bxor_ass_amg 27)
(define-enum lt_amg 28)
(define-enum le_amg 29)
(define-enum gt_amg 30)
(define-enum ge_amg 31)
(define-enum eq_amg 32)
(define-enum ne_amg 33)
(define-enum ncmp_amg 34)
(define-enum scmp_amg 35)
(define-enum slt_amg 36)
(define-enum sle_amg 37)
(define-enum sgt_amg 38)
(define-enum sge_amg 39)
(define-enum seq_amg 40)
(define-enum sne_amg 41)
(define-enum not_amg 42)
(define-enum compl_amg 43)
(define-enum inc_amg 44)
(define-enum dec_amg 45)
(define-enum atan2_amg 46)
(define-enum cos_amg 47)
(define-enum sin_amg 48)
(define-enum exp_amg 49)
(define-enum log_amg 50)
(define-enum sqrt_amg 51)
(define-enum repeat_amg 52)
(define-enum repeat_ass_amg 53)
(define-enum concat_amg 54)
(define-enum concat_ass_amg 55)
(define-enum copy_amg 56)
(define-enum neg_amg 57)
(define-enum to_sv_amg 58)
(define-enum to_av_amg 59)
(define-enum to_hv_amg 60)
(define-enum to_gv_amg 61)
(define-enum to_cv_amg 62)
(define-enum iter_amg 63)
(define-enum int_amg 64)
(define-enum DESTROY_amg 65)
(define-enum max_amg_code 66)
(define-extern PL_AMG_names (deref (cast (ptr (make-c-array (ptr <c-char>) (cast <integer> max_amg_code))) (c-lookup-symbol 'PL_AMG_names))))
(define-c-struct am_table)
(init-c-struct! (c-struct 'am_table) (list (cons 'was_ok_sub <U32>) (cons 'was_ok_am <c-long>) (cons 'flags <U32>) (cons 'table (make-c-array (ptr <CV>) (cast <integer> max_amg_code))) (cons 'fallback <c-long>)))
(define-c-struct am_table_short)
(init-c-struct! (c-struct 'am_table_short) (list (cons 'was_ok_sub <U32>) (cons 'was_ok_am <c-long>) (cons 'flags <U32>)))
(define-ctype AMT (c-struct 'am_table))
(define-ctype AMTS (c-struct 'am_table_short))
(define-c-struct __ipc_perm_old)
(init-c-struct! (c-struct '__ipc_perm_old) (list (cons 'cuid <__uint16_t>) (cons 'cgid <__uint16_t>) (cons 'uid <__uint16_t>) (cons 'gid <__uint16_t>) (cons 'mode <mode_t>) (cons 'seq <__uint16_t>) (cons 'key <key_t>)))
(define-extern ftok (make-c-func 'ftok <key_t> (list (ptr <c-char>) <c-int>)))
(define-c-struct __semid_ds_old)
(init-c-struct! (c-struct '__semid_ds_old) (list (cons 'sem_perm (c-struct '__ipc_perm_old)) (cons 'sem_base <__int32_t>) (cons 'sem_nsems <c-ushort>) (cons 'sem_otime <time_t>) (cons 'sem_pad1 <__int32_t>) (cons 'sem_ctime <time_t>) (cons 'sem_pad2 <__int32_t>) (cons 'sem_pad3 (make-c-array <__int32_t> 4))))
(define-c-struct sem)
(init-c-struct! (c-struct 'sem) (list (cons 'semval <c-ushort>) (cons 'sempid <pid_t>) (cons 'semncnt <c-ushort>) (cons 'semzcnt <c-ushort>)))
(define-c-struct sembuf)
(init-c-struct! (c-struct 'sembuf) (list (cons 'sem_num <c-ushort>) (cons 'sem_op <c-short>) (cons 'sem_flg <c-short>)))
(define-c-union semun)
(init-c-union! (c-union 'semun) (list (cons 'val <c-int>) (cons 'buf (ptr (c-struct '__semid_ds_old))) (cons 'array (ptr <c-ushort>))))
(define-ctype semun_t (c-union 'semun))
(define-extern semsys (make-c-func-vaargs 'semsys <c-int> (list <c-int>)))
(define-extern semctl (make-c-func-vaargs 'semctl <c-int> (list <c-int> <c-int> <c-int>)))
(define-extern semget (make-c-func 'semget <c-int> (list <key_t> <c-int> <c-int>)))
(define-extern semop (make-c-func 'semop <c-int> (list <c-int> (ptr (c-struct 'sembuf)) <size_t>)))
(define-c-struct flock)
(init-c-struct! (c-struct 'flock) (list (cons 'l_start <off_t>) (cons 'l_len <off_t>) (cons 'l_pid <pid_t>) (cons 'l_type <c-short>) (cons 'l_whence <c-short>)))
(define-c-struct radvisory)
(init-c-struct! (c-struct 'radvisory) (list (cons 'ra_offset <off_t>) (cons 'ra_count <c-int>)))
(define-c-struct fstore)
(init-c-struct! (c-struct 'fstore) (list (cons 'fst_flags <c-uint>) (cons 'fst_posmode <c-int>) (cons 'fst_offset <off_t>) (cons 'fst_length <off_t>) (cons 'fst_bytesalloc <off_t>)))
(define-ctype fstore_t (c-struct 'fstore))
(define-c-struct fbootstraptransfer)
(init-c-struct! (c-struct 'fbootstraptransfer) (list (cons 'fbt_offset <off_t>) (cons 'fbt_length <size_t>) (cons 'fbt_buffer (ptr <c-void>))))
(define-ctype fbootstraptransfer_t (c-struct 'fbootstraptransfer))
(define-c-struct log2phys)
(init-c-struct! (c-struct 'log2phys) (list (cons 'l2p_flags <c-uint>) (cons 'l2p_contigbytes <off_t>) (cons 'l2p_devoffset <off_t>)))
(define-enum FILESEC_OWNER 1)
(define-enum FILESEC_GROUP 2)
(define-enum FILESEC_UUID 3)
(define-enum FILESEC_MODE 4)
(define-enum FILESEC_ACL 5)
(define-enum FILESEC_GRPUUID 6)
(define-enum FILESEC_ACL_RAW 100)
(define-enum FILESEC_ACL_ALLOCSIZE 101)
(define-ctype filesec_property_t <c-int>)
(define-extern open (make-c-func-vaargs 'open <c-int> (list (ptr <c-char>) <c-int>)))
(define-extern creat (make-c-func 'creat <c-int> (list (ptr <c-char>) <mode_t>)))
(define-extern fcntl (make-c-func-vaargs 'fcntl <c-int> (list <c-int> <c-int>)))
(define-extern openx_np (make-c-func 'openx_np <c-int> (list (ptr <c-char>) <c-int> <filesec_t>)))
(define-extern flock (make-c-func 'flock <c-int> (list <c-int> <c-int>)))
(define-extern filesec_init (make-c-func 'filesec_init <filesec_t> (list <c-void>)))
(define-extern filesec_dup (make-c-func 'filesec_dup <filesec_t> (list <filesec_t>)))
(define-extern filesec_free (make-c-func 'filesec_free <c-void> (list <filesec_t>)))
(define-extern filesec_get_property (make-c-func 'filesec_get_property <c-int> (list <filesec_t> <filesec_property_t> (ptr <c-void>))))
(define-extern filesec_set_property (make-c-func 'filesec_set_property <c-int> (list <filesec_t> <filesec_property_t> (ptr <c-void>))))
(define-extern filesec_query_property (make-c-func 'filesec_query_property <c-int> (list <filesec_t> <filesec_property_t> (ptr <c-int>))))
(define-c-struct extern_file)
(define-c-struct G417)
(init-c-struct! (c-struct 'G417) (list (cons 'le_next (ptr (c-struct 'extern_file))) (cons 'le_prev (ptr (ptr (c-struct 'extern_file))))))
(define-c-struct ucred)
(init-c-struct! (c-struct 'extern_file) (list (cons 'f_list (c-struct 'G417)) (cons 'f_flag <c-short>) (cons 'f_type <c-short>) (cons 'f_count <c-short>) (cons 'f_msgcount <c-short>) (cons 'f_cred (ptr (c-struct 'ucred))) (cons 'f_ops (ptr <c-void>)) (cons 'f_offset <off_t>) (cons 'f_data <caddr_t>)))
(define-cmacro __STDC_HOSTED__ 1)
(define-cmacro __GNUC__ 4)
(define-cmacro __GNUC_MINOR__ 0)
(define-cmacro __GNUC_PATCHLEVEL__ 1)
(define-cmacro __APPLE_CC__ 5363)
(define-cmacro __GXX_ABI_VERSION 1002)
(define-cmacro __SCHAR_MAX__ 127)
(define-cmacro __SHRT_MAX__ 32767)
(define-cmacro __INT_MAX__ 2147483647)
(define-cmacro __LONG_MAX__ 2147483647)
(define-cmacro __LONG_LONG_MAX__ 9223372036854775807)
(define-cmacro __WCHAR_MAX__ 2147483647)
(define-cmacro __CHAR_BIT__ 8)
(define-cmacro __INTMAX_MAX__ 9223372036854775807)
(define-cmacro __FLT_EVAL_METHOD__ 0)
(define-cmacro __FLT_RADIX__ 2)
(define-cmacro __FLT_MANT_DIG__ 24)
(define-cmacro __FLT_DIG__ 6)
(define-cmacro __FLT_MIN_EXP__ -125)
(define-cmacro __FLT_MIN_10_EXP__ -37)
(define-cmacro __FLT_MAX_EXP__ 128)
(define-cmacro __FLT_MAX_10_EXP__ 38)
(define-cmacro __FLT_MAX__ 3.40282347e38)
(define-cmacro __FLT_MIN__ 1.17549435e-38)
(define-cmacro __FLT_EPSILON__ 1.1920929e-7)
(define-cmacro __FLT_DENORM_MIN__ 1.40129846e-45)
(define-cmacro __FLT_HAS_INFINITY__ 1)
(define-cmacro __FLT_HAS_QUIET_NAN__ 1)
(define-cmacro __DBL_MANT_DIG__ 53)
(define-cmacro __DBL_DIG__ 15)
(define-cmacro __DBL_MIN_EXP__ -1021)
(define-cmacro __DBL_MIN_10_EXP__ -307)
(define-cmacro __DBL_MAX_EXP__ 1024)
(define-cmacro __DBL_MAX_10_EXP__ 308)
(define-cmacro __DBL_MAX__ 1.7976931348623157e308)
(define-cmacro __DBL_MIN__ 2.2250738585072014e-308)
(define-cmacro __DBL_EPSILON__ 2.220446049250313e-16)
(define-cmacro __DBL_DENORM_MIN__ 5.0e-324)
(define-cmacro __DBL_HAS_INFINITY__ 1)
(define-cmacro __DBL_HAS_QUIET_NAN__ 1)
(define-cmacro __LDBL_MANT_DIG__ 64)
(define-cmacro __LDBL_DIG__ 18)
(define-cmacro __LDBL_MIN_EXP__ -16381)
(define-cmacro __LDBL_MIN_10_EXP__ -4931)
(define-cmacro __LDBL_MAX_EXP__ 16384)
(define-cmacro __LDBL_MAX_10_EXP__ 4932)
(define-cmacro __DECIMAL_DIG__ 21)
(define-cmacro __LDBL_MAX__ #i1/0)
(define-cmacro __LDBL_MIN__ 0.0)
(define-cmacro __LDBL_EPSILON__ 1.0842021724855044e-19)
(define-cmacro __LDBL_DENORM_MIN__ 0.0)
(define-cmacro __LDBL_HAS_INFINITY__ 1)
(define-cmacro __LDBL_HAS_QUIET_NAN__ 1)
(define-cmacro __REGISTER_PREFIX__ 0)
(define-cmacro __VERSION__ "4.0.1 (Apple Computer, Inc. build 5363)")
(define-cmacro __NO_INLINE__ 1)
(define-cmacro __FINITE_MATH_ONLY__ 0)
(define-cmacro __i386 1)
(define-cmacro __i386__ 1)
(define-cmacro i386 1)
(define-cmacro __tune_nocona__ 1)
(define-cmacro __MMX__ 1)
(define-cmacro __SSE__ 1)
(define-cmacro __SSE2__ 1)
(define-cmacro __SSE_MATH__ 1)
(define-cmacro __SSE2_MATH__ 1)
(define-cmacro __nocona 1)
(define-cmacro __nocona__ 1)
(define-cmacro __i386__ 1)
(define-cmacro __LITTLE_ENDIAN__ 1)
(define-cmacro __MACH__ 1)
(define-cmacro __APPLE__ 1)
(define-cmacro __CONSTANT_CFSTRINGS__ 1)
(define-cmacro __strong 0)
(define-cmacro __weak 0)
(define-cmacro __PIC__ 1)
(define-cmacro __DYNAMIC__ 1)
(define-cfunclike-macro __attribute__ (x) 0)
(define-cmacro dEXT 0)
(define-cfunclike-macro INIT (x) 0)
(define-cmacro H_PERL 1)
(define-cmacro VOIDUSED 1)
(define-cmacro _config_h_ 0)
(define-cmacro LOC_SED "/usr/bin/sed")
(define-cmacro HAS_ALARM 0)
(define-cmacro HAS_BCMP 0)
(define-cmacro HAS_BCOPY 0)
(define-cmacro HAS_BZERO 0)
(define-cmacro HAS_CHOWN 0)
(define-cmacro HAS_CHROOT 0)
(define-cmacro HASCONST 0)
(define-cmacro HAS_DBL_DIG 0)
(define-cmacro HAS_DIFFTIME 0)
(define-cmacro HAS_DLERROR 0)
(define-cmacro HAS_DUP2 0)
(define-cmacro HAS_FCHMOD 0)
(define-cmacro HAS_FCHOWN 0)
(define-cmacro HAS_FCNTL 0)
(define-cmacro HAS_FGETPOS 0)
(define-cmacro HAS_FLOCK 0)
(define-cmacro HAS_FORK 0)
(define-cmacro HAS_FSETPOS 0)
(define-cmacro HAS_GETTIMEOFDAY 0)
(define-cmacro HAS_GETGROUPS 0)
(define-cmacro HAS_GETLOGIN 0)
(define-cmacro HAS_GETPGID 0)
(define-cmacro HAS_GETPPID 0)
(define-cmacro HAS_GETPRIORITY 0)
(define-cmacro HAS_INET_ATON 0)
(define-cmacro HAS_KILLPG 0)
(define-cmacro HAS_LINK 0)
(define-cmacro HAS_LOCALECONV 0)
(define-cmacro HAS_LOCKF 0)
(define-cmacro HAS_LSTAT 0)
(define-cmacro HAS_MBLEN 0)
(define-cmacro HAS_MBSTOWCS 0)
(define-cmacro HAS_MBTOWC 0)
(define-cmacro HAS_MEMCMP 0)
(define-cmacro HAS_MEMCPY 0)
(define-cmacro HAS_MEMMOVE 0)
(define-cmacro HAS_MEMSET 0)
(define-cmacro HAS_MKDIR 0)
(define-cmacro HAS_MKFIFO 0)
(define-cmacro HAS_MKTIME 0)
(define-cmacro HAS_MSYNC 0)
(define-cmacro HAS_MUNMAP 0)
(define-cmacro HAS_NICE 0)
(define-cmacro HAS_PATHCONF 0)
(define-cmacro HAS_FPATHCONF 0)
(define-cmacro HAS_PAUSE 0)
(define-cmacro HAS_PIPE 0)
(define-cmacro HAS_READDIR 0)
(define-cmacro HAS_SEEKDIR 0)
(define-cmacro HAS_TELLDIR 0)
(define-cmacro HAS_REWINDDIR 0)
(define-cmacro HAS_READLINK 0)
(define-cmacro HAS_RENAME 0)
(define-cmacro HAS_RMDIR 0)
(define-cmacro HAS_SELECT 0)
(define-cmacro HAS_SETEGID 0)
(define-cmacro HAS_SETEUID 0)
(define-cmacro HAS_SETLINEBUF 0)
(define-cmacro HAS_SETLOCALE 0)
(define-cmacro HAS_SETPGID 0)
(define-cmacro HAS_SETPRIORITY 0)
(define-cmacro HAS_SETSID 0)
(define-cmacro HAS_STRCHR 0)
(define-cmacro HAS_STRCOLL 0)
(define-cmacro USE_STRUCT_COPY 0)
(define-cmacro HAS_STRTOD 0)
(define-cmacro HAS_STRTOL 0)
(define-cmacro HAS_STRXFRM 0)
(define-cmacro HAS_SYMLINK 0)
(define-cmacro HAS_SYSCALL 0)
(define-cmacro HAS_SYSCONF 0)
(define-cmacro HAS_SYSTEM 0)
(define-cmacro HAS_TCGETPGRP 0)
(define-cmacro HAS_TCSETPGRP 0)
(define-cmacro HAS_TRUNCATE 0)
(define-cmacro HAS_TZNAME 0)
(define-cmacro HAS_UMASK 0)
(define-cmacro HAS_USLEEP 0)
(define-cmacro HASVOLATILE 0)
(define-cmacro HAS_WAIT4 0)
(define-cmacro HAS_WAITPID 0)
(define-cmacro HAS_WCSTOMBS 0)
(define-cmacro HAS_WCTOMB 0)
(define-cmacro I_ARPA_INET 0)
(define-cmacro I_DIRENT 0)
(define-cmacro DIRNAMLEN 0)
(define-cmacro I_DLFCN 0)
(define-cmacro I_FLOAT 0)
(define-cmacro I_LIMITS 0)
(define-cmacro I_LOCALE 0)
(define-cmacro I_MATH 0)
(define-cmacro I_NETINET_IN 0)
(define-cmacro I_STDDEF 0)
(define-cmacro I_STDLIB 0)
(define-cmacro I_STRING 0)
(define-cmacro I_SYS_DIR 0)
(define-cmacro I_SYS_FILE 0)
(define-cmacro I_SYS_IOCTL 0)
(define-cmacro I_SYS_SOCKIO 0)
(define-cmacro I_SYS_PARAM 0)
(define-cmacro I_SYS_RESOURCE 0)
(define-cmacro I_SYS_SELECT 0)
(define-cmacro I_SYS_STAT 0)
(define-cmacro I_SYS_TIMES 0)
(define-cmacro I_SYS_TYPES 0)
(define-cmacro I_SYS_UN 0)
(define-cmacro I_SYS_WAIT 0)
(define-cmacro I_TERMIOS 0)
(define-cmacro I_UNISTD 0)
(define-cmacro I_UTIME 0)
(define-cmacro INTSIZE 4)
(define-cmacro LONGSIZE 4)
(define-cmacro SHORTSIZE 2)
(define-cmacro MULTIARCH 0)
(define-cmacro QUADKIND 3)
(define-cmacro QUAD_IS_INT 1)
(define-cmacro QUAD_IS_LONG 2)
(define-cmacro QUAD_IS_LONG_LONG 3)
(define-cmacro QUAD_IS_INT64_T 4)
(define-cmacro MEM_ALIGNBYTES 8)
(define-cmacro BYTEORDER 4660)
(define-cmacro CASTI32 0)
(define-cmacro CASTNEGFLOAT 0)
(define-cmacro CASTFLAGS 0)
(define-cmacro HAS_FD_SET 0)
(define-cfunclike-macro Gconvert (x n t b) (scm-cast (begin (sprintf (identity b) "%.*g" (identity n) (identity x)))))
(define-cmacro HAS_GETPAGESIZE 0)
(define-cmacro HAS_ISASCII 0)
(define-cmacro HAS_LCHOWN 0)
(define-cmacro HAS_OPEN3 0)
(define-cmacro HAS_SANE_MEMCMP 0)
(define-cmacro HAS_SIGACTION 0)
(define-cmacro HAS_SIGSETJMP 0)
(define-cfunclike-macro Sigsetjmp (buf save_mask) (scm-cast (begin (sigsetjmp (identity buf) (identity save_mask)))))
(define-cfunclike-macro Siglongjmp (buf retval) (scm-cast (begin (siglongjmp (identity buf) (identity retval)))))
(define-cmacro USE_STDIO_PTR 0)
(define-cfunclike-macro FILE_ptr (fp) (scm-cast (begin (raw-ref (deref (identity fp)) '_p))))
(define-cmacro STDIO_PTR_LVALUE 0)
(define-cfunclike-macro FILE_cnt (fp) (scm-cast (begin (raw-ref (deref (identity fp)) '_r))))
(define-cmacro STDIO_CNT_LVALUE 0)
(define-cmacro STDIO_PTR_LVAL_NOCHANGE_CNT 0)
(define-cmacro USE_STDIO_BASE 0)
(define-cfunclike-macro FILE_base (fp) (scm-cast (begin (if (eq? (cast <real> (raw-ref (raw-ref (deref (identity fp)) '_ub) '_base)) 0) (raw-ref (raw-ref (deref (identity fp)) '_bf) '_base) (raw-ref (raw-ref (deref (identity fp)) '_ub) '_base)))))
(define-cfunclike-macro FILE_bufsiz (fp) (scm-cast (begin (if (eq? (cast <real> (raw-ref (raw-ref (deref (identity fp)) '_ub) '_base)) 0) (raw-ref (raw-ref (deref (identity fp)) '_bf) '_size) (raw-ref (raw-ref (deref (identity fp)) '_ub) '_size)))))
(define-cmacro HAS_VPRINTF 0)
(define-cmacro USE_CHAR_VSPRINTF 0)
(define-cmacro DOUBLESIZE 8)
(define-cmacro I_SYS_TIME 0)
(define-cmacro HAS_TM_TM_ZONE 0)
(define-cmacro HAS_TM_TM_GMTOFF 0)
(define-cmacro VAL_O_NONBLOCK 4)
(define-cmacro VAL_EAGAIN 35)
(define-cmacro RD_NODATA -1)
(define-cmacro EOF_NONBLOCK 0)
(define-cmacro PTRSIZE 4)
(define-cfunclike-macro seedDrand01 (x) (scm-cast (begin (srand48 (cast <c-long> x)))))
(define-cmacro RANDBITS 48)
(define-cmacro ARCHLIB "/System/Library/Perl/5.8.6/darwin-thread-multi-2level")
(define-cmacro ARCHLIB_EXP "/System/Library/Perl/5.8.6/darwin-thread-multi-2level")
(define-cmacro BIN "/usr/bin")
(define-cmacro BIN_EXP "/usr/bin")
(define-cmacro PERL_INC_VERSION_LIST 0)
(define-cmacro INSTALL_USR_BIN_PERL 0)
(define-cmacro INSTALL_PREFIX "/BinaryCache/perl/perl-38.root~581/")
(define-cmacro INSTALL_PREFIX_EXP "/BinaryCache/perl/perl-38.root~581/")
(define-cmacro PRIVLIB "/System/Library/Perl/5.8.6")
(define-cmacro PRIVLIB_EXP "/System/Library/Perl/5.8.6")
(define-cmacro SITEARCH "/Library/Perl/5.8.6/darwin-thread-multi-2level")
(define-cmacro SITEARCH_EXP "/Library/Perl/5.8.6/darwin-thread-multi-2level")
(define-cmacro SITELIB "/Library/Perl/5.8.6")
(define-cmacro SITELIB_EXP "/Library/Perl/5.8.6")
(define-cmacro SITELIB_STEM "/Library/Perl")
(define-cmacro PERL_VENDORARCH "/Network/Library/Perl/5.8.6/darwin-thread-multi-2level")
(define-cmacro PERL_VENDORARCH_EXP "/Network/Library/Perl/5.8.6/darwin-thread-multi-2level")
(define-cmacro PERL_VENDORLIB_EXP "/Network/Library/Perl/5.8.6")
(define-cmacro PERL_VENDORLIB_STEM "/Network/Library/Perl")
(define-cmacro OSNAME "darwin")
(define-cmacro OSVERS "8.0")
(define-cfunclike-macro PeRl_StGiFy (a) "a")
(define-cfunclike-macro StGiFy (a) "a")
(define-cfunclike-macro STRINGIFY (a) "a")
(define-cmacro CPPSTDIN "cc -E")
(define-cmacro CPPMINUS "-")
(define-cmacro CPPRUN "cc -E")
(define-cmacro CPPLAST "-")
(define-cmacro HAS_ACCESS 0)
(define-cmacro HASATTRIBUTE 0)
(define-cmacro HAS_CRYPT 0)
(define-cmacro HAS_CSH 0)
(define-cmacro CSH "/bin/csh")
(define-cmacro HAS_ENDGRENT 0)
(define-cmacro HAS_ENDHOSTENT 0)
(define-cmacro HAS_ENDNETENT 0)
(define-cmacro HAS_ENDPROTOENT 0)
(define-cmacro HAS_ENDPWENT 0)
(define-cmacro HAS_ENDSERVENT 0)
(define-cmacro FLEXFILENAMES 0)
(define-cmacro HAS_GETGRENT 0)
(define-cmacro HAS_GETHOSTBYADDR 0)
(define-cmacro HAS_GETHOSTBYNAME 0)
(define-cmacro HAS_GETHOSTENT 0)
(define-cmacro HAS_GETHOSTNAME 0)
(define-cmacro HAS_UNAME 0)
(define-cmacro HAS_GETNETBYADDR 0)
(define-cmacro HAS_GETNETBYNAME 0)
(define-cmacro HAS_GETNETENT 0)
(define-cmacro HAS_GETPROTOENT 0)
(define-cmacro HAS_GETPGRP 0)
(define-cmacro HAS_GETPROTOBYNAME 0)
(define-cmacro HAS_GETPROTOBYNUMBER 0)
(define-cmacro HAS_GETPWENT 0)
(define-cmacro HAS_GETSERVENT 0)
(define-cmacro HAS_GETSERVBYNAME 0)
(define-cmacro HAS_GETSERVBYPORT 0)
(define-cmacro HAS_HTONL 0)
(define-cmacro HAS_HTONS 0)
(define-cmacro HAS_NTOHL 0)
(define-cmacro HAS_NTOHS 0)
(define-cmacro HAS_LONG_DOUBLE 0)
(define-cmacro LONG_DOUBLESIZE 16)
(define-cmacro HAS_LONG_LONG 0)
(define-cmacro LONGLONGSIZE 8)
(define-cmacro HAS_MEMCHR 0)
(define-cmacro HAS_MKSTEMP 0)
(define-cmacro HAS_MMAP 0)
(define-cmacro HAS_MSG 0)
(define-cmacro HAS_SEM 0)
(define-cmacro HAS_SETGRENT 0)
(define-cmacro HAS_SETGROUPS 0)
(define-cmacro HAS_SETHOSTENT 0)
(define-cmacro HAS_SETNETENT 0)
(define-cmacro HAS_SETPROTOENT 0)
(define-cmacro HAS_SETPGRP 0)
(define-cmacro USE_BSD_SETPGRP 0)
(define-cmacro HAS_SETPWENT 0)
(define-cmacro HAS_SETSERVENT 0)
(define-cmacro HAS_SETVBUF 0)
(define-cmacro HAS_SHM 0)
(define-cmacro HAS_SHMAT_PROTOTYPE 0)
(define-cmacro HAS_SOCKET 0)
(define-cmacro HAS_SOCKETPAIR 0)
(define-cmacro HAS_MSG_CTRUNC 0)
(define-cmacro HAS_MSG_DONTROUTE 0)
(define-cmacro HAS_MSG_OOB 0)
(define-cmacro HAS_MSG_PEEK 0)
(define-cmacro HAS_SCM_RIGHTS 0)
(define-cmacro USE_STAT_BLOCKS 0)
(define-cmacro HAS_STRERROR 0)
(define-cmacro HAS_SYS_ERRLIST 0)
(define-cmacro HAS_STRTOUL 0)
(define-cmacro HAS_UNION_SEMUN 0)
(define-cmacro USE_SEMCTL_SEMUN 0)
(define-cmacro USE_SEMCTL_SEMID_DS 0)
(define-cmacro HAS_VFORK 0)
(define-cmacro I_GRP 0)
(define-cmacro GRPASSWD 0)
(define-cmacro I_NDBM 0)
(define-cmacro I_NETDB 0)
(define-cmacro I_PWD 0)
(define-cmacro PWCHANGE 0)
(define-cmacro PWCLASS 0)
(define-cmacro PWEXPIRE 0)
(define-cmacro PWGECOS 0)
(define-cmacro PWPASSWD 0)
(define-cmacro I_SYSUIO 0)
(define-cmacro I_STDARG 0)
(define-cmacro PERL_MALLOC_WRAP 0)
(define-cmacro CAN_PROTOTYPE 0)
(define-cfunclike-macro _ (args) (scm-cast (begin args)))
(define-cmacro SH_PATH "/bin/sh")
(define-cmacro SIG_NAME (scm-cast (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin "ZERO" "HUP") "INT") "QUIT") "ILL") "TRAP") "ABRT") "EMT") "FPE") "KILL") "BUS") "SEGV") "SYS") "PIPE") "ALRM") "TERM") "URG") "STOP") "TSTP") "CONT") "CHLD") "TTIN") "TTOU") "IO") "XCPU") "XFSZ") "VTALRM") "PROF") "WINCH") "INFO") "USR1") "USR2") "IOT") 0))))
(define-cmacro SIG_NUM (scm-cast (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin (begin 0 1) 2) 3) 4) 5) 6) 7) 8) 9) 10) 11) 12) 13) 14) 15) 16) 17) 18) 19) 20) 21) 22) 23) 24) 25) 26) 27) 28) 29) 30) 31) 6) 0))))
(define-cmacro SIG_SIZE 33)
(define-cmacro VOIDFLAGS 15)
(define-cmacro PERL_TARGETARCH "")
(define-cmacro HAS_ATOLL 0)
(define-cmacro HAS__FWALK 0)
(define-cmacro HAS_STRUCT_CMSGHDR 0)
(define-cmacro HAS_COPYSIGNL 0)
(define-cmacro HAS_DIRFD 0)
(define-cmacro HAS_FAST_STDIO 0)
(define-cmacro HAS_FCHDIR 0)
(define-cmacro FCNTL_CAN_LOCK 0)
(define-cmacro HAS_FINITE 0)
(define-cmacro HAS_FLOCK_PROTO 0)
(define-cmacro HAS_FPCLASSIFY 0)
(define-cmacro HAS_FREXPL 0)
(define-cmacro HAS_FSEEKO 0)
(define-cmacro HAS_FSTATFS 0)
(define-cmacro HAS_FSYNC 0)
(define-cmacro HAS_FTELLO 0)
(define-cmacro HAS_GETCWD 0)
(define-cmacro HAS_GETFSSTAT 0)
(define-cmacro HAS_GETITIMER 0)
(define-cmacro HAS_ILOGBL 0)
(define-cmacro HAS_INT64_T 0)
(define-cmacro HAS_ISFINITE 0)
(define-cmacro HAS_ISINF 0)
(define-cmacro HAS_ISNAN 0)
(define-cmacro HAS_LDBL_DIG 0)
(define-cmacro HAS_MADVISE 0)
(define-cmacro HAS_MKDTEMP 0)
(define-cmacro HAS_MKSTEMPS 0)
(define-cmacro HAS_MODFL 0)
(define-cmacro HAS_MPROTECT 0)
(define-cmacro HAS_STRUCT_MSGHDR 0)
(define-cmacro HAS_NL_LANGINFO 0)
(define-cmacro HAS_PTHREAD_ATTR_SETSCOPE 0)
(define-cmacro HAS_READV 0)
(define-cmacro HAS_RECVMSG 0)
(define-cmacro HAS_SBRK_PROTO 0)
(define-cmacro HAS_SCALBNL 0)
(define-cmacro HAS_SENDMSG 0)
(define-cmacro HAS_SETITIMER 0)
(define-cmacro HAS_SIGPROCMASK 0)
(define-cmacro HAS_SQRTL 0)
(define-cmacro HAS_STRUCT_STATFS_F_FLAGS 0)
(define-cmacro HAS_STRUCT_STATFS 0)
(define-cmacro HAS_FSTATVFS 0)
(define-cmacro HAS_STRFTIME 0)
(define-cmacro HAS_STRTOLD 0)
(define-cmacro HAS_STRTOLL 0)
(define-cmacro HAS_STRTOQ 0)
(define-cmacro HAS_STRTOULL 0)
(define-cmacro HAS_STRTOUQ 0)
(define-cmacro HAS_SYSCALL_PROTO 0)
(define-cmacro HAS_TELLDIR_PROTO 0)
(define-cmacro U32_ALIGNMENT_REQUIRED 0)
(define-cmacro HAS_UALARM 0)
(define-cmacro HAS_USLEEP_PROTO 0)
(define-cmacro HAS_WRITEV 0)
(define-cmacro USE_DYNAMIC_LOADING 0)
(define-cmacro FFLUSH_NULL 0)
(define-cmacro DB_VERSION_MAJOR_CFG 1)
(define-cmacro DB_VERSION_MINOR_CFG 0)
(define-cmacro DB_VERSION_PATCH_CFG 0)
(define-cmacro I_INTTYPES 0)
(define-cmacro I_LANGINFO 0)
(define-cmacro I_NETINET_TCP 0)
(define-cmacro I_SYSLOG 0)
(define-cmacro I_SYS_MOUNT 0)
(define-cmacro I_SYS_STATVFS 0)
(define-cmacro I_SYSUTSNAME 0)
(define-cmacro PERL_PRIfldbl "Lf")
(define-cmacro PERL_PRIgldbl "Lg")
(define-cmacro PERL_PRIeldbl "Le")
(define-cmacro PERL_SCNfldbl "Lf")
(define-cmacro IVSIZE 4)
(define-cmacro UVSIZE 4)
(define-cmacro I8SIZE 1)
(define-cmacro U8SIZE 1)
(define-cmacro I16SIZE 2)
(define-cmacro U16SIZE 2)
(define-cmacro I32SIZE 4)
(define-cmacro U32SIZE 4)
(define-cmacro I64SIZE 8)
(define-cmacro U64SIZE 8)
(define-cmacro NVSIZE 8)
(define-cmacro NV_PRESERVES_UV 0)
(define-cmacro NV_PRESERVES_UV_BITS 32)
(define-cmacro IVdf "ld")
(define-cmacro UVuf "lu")
(define-cmacro UVof "lo")
(define-cmacro UVxf "lx")
(define-cmacro UVXf "lX")
(define-cmacro NVef "e")
(define-cmacro NVff "f")
(define-cmacro NVgf "g")
(define-cmacro SELECT_MIN_BITS 32)
(define-cmacro STARTPERL "#!/usr/bin/perl")
(define-cmacro HAS_STDIO_STREAM_ARRAY 0)
(define-cmacro STDIO_STREAM_ARRAY (scm-cast (begin __sF)))
(define-cmacro USE_FAST_STDIO 0)
(define-cmacro USE_LARGE_FILES 0)
(define-cmacro MULTIPLICITY 0)
(define-cmacro USE_PERLIO 0)
(define-cmacro HAS_DRAND48_PROTO 0)
(define-cmacro HAS_GETHOST_PROTOS 0)
(define-cmacro HAS_GETNET_PROTOS 0)
(define-cmacro HAS_GETPROTO_PROTOS 0)
(define-cmacro HAS_GETSERV_PROTOS 0)
(define-cmacro HAS_LSEEK_PROTO 0)
(define-cmacro ARCHNAME "darwin-thread-multi-2level")
(define-cmacro HAS_ASCTIME_R 0)
(define-cmacro ASCTIME_R_PROTO 8)
(define-cmacro CRYPT_R_PROTO 0)
(define-cmacro HAS_CTERMID_R 0)
(define-cmacro CTERMID_R_PROTO 1)
(define-cmacro HAS_CTIME_R 0)
(define-cmacro CTIME_R_PROTO 8)
(define-cmacro DRAND48_R_PROTO 0)
(define-cmacro ENDGRENT_R_PROTO 0)
(define-cmacro ENDHOSTENT_R_PROTO 0)
(define-cmacro ENDNETENT_R_PROTO 0)
(define-cmacro ENDPROTOENT_R_PROTO 0)
(define-cmacro ENDPWENT_R_PROTO 0)
(define-cmacro ENDSERVENT_R_PROTO 0)
(define-cmacro GETGRENT_R_PROTO 0)
(define-cmacro HAS_GETGRGID_R 0)
(define-cmacro GETGRGID_R_PROTO 51)
(define-cmacro HAS_GETGRNAM_R 0)
(define-cmacro GETGRNAM_R_PROTO 18)
(define-cmacro GETHOSTBYADDR_R_PROTO 0)
(define-cmacro GETHOSTBYNAME_R_PROTO 0)
(define-cmacro GETHOSTENT_R_PROTO 0)
(define-cmacro HAS_GETLOGIN_R 0)
(define-cmacro GETLOGIN_R_PROTO 11)
(define-cmacro GETNETBYADDR_R_PROTO 0)
(define-cmacro GETNETBYNAME_R_PROTO 0)
(define-cmacro GETNETENT_R_PROTO 0)
(define-cmacro GETPROTOBYNAME_R_PROTO 0)
(define-cmacro GETPROTOBYNUMBER_R_PROTO 0)
(define-cmacro GETPROTOENT_R_PROTO 0)
(define-cmacro GETPWENT_R_PROTO 0)
(define-cmacro HAS_GETPWNAM_R 0)
(define-cmacro GETPWNAM_R_PROTO 18)
(define-cmacro HAS_GETPWUID_R 0)
(define-cmacro GETPWUID_R_PROTO 51)
(define-cmacro GETSERVBYNAME_R_PROTO 0)
(define-cmacro GETSERVBYPORT_R_PROTO 0)
(define-cmacro GETSERVENT_R_PROTO 0)
(define-cmacro GETSPNAM_R_PROTO 0)
(define-cmacro HAS_GMTIME_R 0)
(define-cmacro GMTIME_R_PROTO 72)
(define-cmacro HAS_LOCALTIME_R 0)
(define-cmacro LOCALTIME_R_PROTO 72)
(define-cmacro HAS_PTHREAD_ATFORK 0)
(define-cmacro HAS_SCHED_YIELD 0)
(define-cmacro RANDOM_R_PROTO 0)
(define-cmacro READDIR64_R_PROTO 0)
(define-cmacro HAS_READDIR_R 0)
(define-cmacro READDIR_R_PROTO 52)
(define-cmacro SETGRENT_R_PROTO 0)
(define-cmacro SETHOSTENT_R_PROTO 0)
(define-cmacro SETLOCALE_R_PROTO 0)
(define-cmacro SETNETENT_R_PROTO 0)
(define-cmacro SETPROTOENT_R_PROTO 0)
(define-cmacro SETPWENT_R_PROTO 0)
(define-cmacro SETSERVENT_R_PROTO 0)
(define-cmacro SRAND48_R_PROTO 0)
(define-cmacro SRANDOM_R_PROTO 0)
(define-cmacro HAS_STRERROR_R 0)
(define-cmacro STRERROR_R_PROTO 26)
(define-cmacro TMPNAM_R_PROTO 0)
(define-cmacro TTYNAME_R_PROTO 0)
(define-cmacro I_PTHREAD 0)
(define-cmacro USE_ITHREADS 0)
(define-cmacro USE_REENTRANT_API 0)
(define-cmacro HAS_TIME 0)
(define-cmacro HAS_TIMES 0)
(define-cmacro Gid_t_f "lu")
(define-cmacro Gid_t_sign 1)
(define-cmacro Gid_t_size 4)
(define-cmacro LSEEKSIZE 8)
(define-cmacro Off_t_size 8)
(define-cmacro Size_t_size 4)
(define-cmacro Uid_t_f "lu")
(define-cmacro Uid_t_sign 1)
(define-cmacro Uid_t_size 4)
(define-cmacro PERL_PREPENDTOPATH "/Library/Perl/5.8.6/PrependToPath")
(define-cmacro PERL_APPENDTOPATH "/Library/Perl/5.8.6/AppendToPath")
(define-cmacro PERL_IMPLICIT_CONTEXT 0)
(define-cmacro pTHX_1 2)
(define-cmacro pTHX_2 3)
(define-cmacro pTHX_3 4)
(define-cmacro pTHX_4 5)
(define-cfunclike-macro CPERLscope (x) (scm-cast (begin x)))
(define-cmacro CPERLarg_ 0)
(define-cmacro _CPERLarg 0)
(define-cmacro PERL_OBJECT_THIS 0)
(define-cmacro _PERL_OBJECT_THIS 0)
(define-cmacro PERL_OBJECT_THIS_ 0)
(define-cfunclike-macro CALL_FPTR (fptr) (scm-cast (begin (deref fptr))))
(define-cmacro PERL_UNUSED_DECL 0)
(define-cfunclike-macro PERL_UNUSED_VAR (var) (scm-cast (begin (if (eq? 0 0) 0 (let ((%v var)) (set! (ref var) %v) %v)))))
(define-cmacro NOOP (scm-cast (begin (cast <c-void> 0))))
(define-cmacro START_EXTERN_C 0)
(define-cmacro END_EXTERN_C 0)
(define-cfunclike-macro WITH_THX (s) (scm-cast (begin (cast <c-void> (begin let* ((my_perl (make (ptr <PerlInterpreter>)))) (set! (ref my_perl) (cast (ptr <PerlInterpreter>) (pthread_getspecific PL_thr_key))) s)))))
(define-cfunclike-macro WITH_THR (s) (scm-cast (begin (cast <c-void> (begin let* ((my_perl (make (ptr <PerlInterpreter>)))) (set! (ref my_perl) (cast (ptr <PerlInterpreter>) (pthread_getspecific PL_thr_key))) s)))))
(define-cfunclike-macro SOFT_CAST (type) (scm-cast (begin (identity type))))
(define-cmacro LIBERAL 1)
(define-cmacro ASCIIish 0)
(define-cmacro STANDARD_C 1)
(define-cfunclike-macro BSD_SETPGRP (pid pgrp) (scm-cast (begin (setpgid (identity pid) (identity pgrp)))))
(define-cfunclike-macro BSD_GETPGRP (pid) (scm-cast (begin (getpgid (identity pid)))))
(define-cmacro USE_BSDPGRP 0)
(define-cmacro _SYS_TYPES_H_ 0)
(define-cmacro __SYS_APPLEAPIOPTS_H__ 0)
(define-cmacro __APPLE_API_STANDARD 0)
(define-cmacro __APPLE_API_STABLE 0)
(define-cmacro __APPLE_API_EVOLVING 0)
(define-cmacro __APPLE_API_UNSTABLE 0)
(define-cmacro __APPLE_API_PRIVATE 0)
(define-cmacro __APPLE_API_OBSOLETE 0)
(define-cmacro _CDEFS_H_ 0)
(define-cmacro __BEGIN_DECLS 0)
(define-cmacro __END_DECLS 0)
(define-cfunclike-macro __P (protos) (scm-cast (begin protos)))
(define-cfunclike-macro __STRING (x) "x")
(define-cmacro __dead2 0)
(define-cmacro __pure2 0)
(define-cmacro __unused 0)
(define-cmacro __dead 0)
(define-cmacro __pure 0)
(define-cmacro __restrict 0)
(define-cfunclike-macro __printflike (fmtarg firstvararg) 0)
(define-cfunclike-macro __scanflike (fmtarg firstvararg) 0)
(define-cmacro __DARWIN_UNIX03 0)
(define-cfunclike-macro __DARWIN_ALIAS (sym) 0)
(define-cfunclike-macro __DARWIN_LDBL_COMPAT (x) 0)
(define-cfunclike-macro __DARWIN_LDBL_COMPAT2 (x) 0)
(define-cmacro __DARWIN_LONG_DOUBLE_IS_DOUBLE 0)
(define-cmacro _BSD_MACHINE_TYPES_H_ 0)
(define-cmacro _MACHTYPES_H_ 0)
(define-cmacro _BSD_I386__TYPES_H_ 0)
(define-cmacro _INT8_T 0)
(define-cmacro _INT16_T 0)
(define-cmacro _INT32_T 0)
(define-cmacro _INT64_T 0)
(define-cmacro _INTPTR_T 0)
(define-cmacro _UINTPTR_T 0)
(define-cmacro USER_ADDR_NULL (scm-cast (begin (cast <user_addr_t> 0))))
(define-cfunclike-macro CAST_USER_ADDR_T (a_ptr) (scm-cast (begin (cast <user_addr_t> (cast <uintptr_t> (identity a_ptr))))))
(define-cmacro _SYS__TYPES_H_ 0)
(define-cmacro _BSD_MACHINE__TYPES_H_ 0)
(define-cmacro __PTHREAD_SIZE__ 596)
(define-cmacro __PTHREAD_ATTR_SIZE__ 36)
(define-cmacro __PTHREAD_MUTEXATTR_SIZE__ 8)
(define-cmacro __PTHREAD_MUTEX_SIZE__ 40)
(define-cmacro __PTHREAD_CONDATTR_SIZE__ 4)
(define-cmacro __PTHREAD_COND_SIZE__ 24)
(define-cmacro __PTHREAD_ONCE_SIZE__ 4)
(define-cmacro __PTHREAD_RWLOCK_SIZE__ 124)
(define-cmacro __PTHREAD_RWLOCKATTR_SIZE__ 12)
(define-cmacro __DARWIN_NULL (scm-cast (begin (cast (ptr <c-void>) 0))))
(define-cmacro _BSD_MACHINE_ENDIAN_H_ 0)
(define-cmacro _I386__ENDIAN_H_ 0)
(define-cmacro _QUAD_HIGHWORD 1)
(define-cmacro _QUAD_LOWWORD 0)
(define-cmacro __DARWIN_LITTLE_ENDIAN 1234)
(define-cmacro __DARWIN_BIG_ENDIAN 4321)
(define-cmacro __DARWIN_PDP_ENDIAN 3412)
(define-cmacro __DARWIN_BYTE_ORDER 1234)
(define-cmacro LITTLE_ENDIAN 1234)
(define-cmacro BIG_ENDIAN 4321)
(define-cmacro PDP_ENDIAN 3412)
(define-cmacro BYTE_ORDER 1234)
(define-cmacro _SYS__ENDIAN_H_ 0)
(define-cmacro _STDINT_H_ 0)
(define-cmacro _UINT8_T 0)
(define-cmacro _UINT16_T 0)
(define-cmacro _UINT32_T 0)
(define-cmacro _UINT64_T 0)
(define-cmacro _INTMAX_T 0)
(define-cmacro _UINTMAX_T 0)
(define-cmacro INT8_MAX 127)
(define-cmacro INT16_MAX 32767)
(define-cmacro INT32_MAX 2147483647)
(define-cmacro INT64_MAX 9223372036854775807)
(define-cmacro INT8_MIN -128)
(define-cmacro INT16_MIN -32768)
(define-cmacro INT32_MIN -2147483648)
(define-cmacro INT64_MIN -9223372036854775808)
(define-cmacro UINT8_MAX 255)
(define-cmacro UINT16_MAX 65535)
(define-cmacro UINT32_MAX 4294967295)
(define-cmacro UINT64_MAX 9223372036854775807)
(define-cmacro INT_LEAST8_MIN -128)
(define-cmacro INT_LEAST16_MIN -32768)
(define-cmacro INT_LEAST32_MIN -2147483648)
(define-cmacro INT_LEAST64_MIN -9223372036854775808)
(define-cmacro INT_LEAST8_MAX 127)
(define-cmacro INT_LEAST16_MAX 32767)
(define-cmacro INT_LEAST32_MAX 2147483647)
(define-cmacro INT_LEAST64_MAX 9223372036854775807)
(define-cmacro UINT_LEAST8_MAX 255)
(define-cmacro UINT_LEAST16_MAX 65535)
(define-cmacro UINT_LEAST32_MAX 4294967295)
(define-cmacro UINT_LEAST64_MAX 9223372036854775807)
(define-cmacro INT_FAST8_MIN -128)
(define-cmacro INT_FAST16_MIN -32768)
(define-cmacro INT_FAST32_MIN -2147483648)
(define-cmacro INT_FAST64_MIN -9223372036854775808)
(define-cmacro INT_FAST8_MAX 127)
(define-cmacro INT_FAST16_MAX 32767)
(define-cmacro INT_FAST32_MAX 2147483647)
(define-cmacro INT_FAST64_MAX 9223372036854775807)
(define-cmacro UINT_FAST8_MAX 255)
(define-cmacro UINT_FAST16_MAX 65535)
(define-cmacro UINT_FAST32_MAX 4294967295)
(define-cmacro UINT_FAST64_MAX 9223372036854775807)
(define-cmacro INTPTR_MIN -2147483648)
(define-cmacro INTPTR_MAX 2147483647)
(define-cmacro UINTPTR_MAX 4294967295)
(define-cmacro INTMAX_MIN -9223372036854775808)
(define-cmacro INTMAX_MAX 9223372036854775807)
(define-cmacro UINTMAX_MAX 9223372036854775807)
(define-cmacro PTRDIFF_MIN -2147483648)
(define-cmacro PTRDIFF_MAX 2147483647)
(define-cmacro SIZE_MAX 4294967295)
(define-cmacro WCHAR_MAX 2147483647)
(define-cmacro WCHAR_MIN -2147483648)
(define-cmacro WINT_MIN -2147483648)
(define-cmacro WINT_MAX 2147483647)
(define-cmacro SIG_ATOMIC_MIN -2147483648)
(define-cmacro SIG_ATOMIC_MAX 2147483647)
(define-cfunclike-macro INT8_C (v) (scm-cast (begin (identity v))))
(define-cfunclike-macro INT16_C (v) (scm-cast (begin (identity v))))
(define-cfunclike-macro INT32_C (v) (scm-cast (begin (identity v))))
(define-cmacro _OS_OSBYTEORDER_H 0)
(define-cfunclike-macro OSSwapConstInt16 (x) (scm-cast (begin (cast <uint16_t> (logior (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) 65280)) (- 8))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) 255)) 8)))))))
(define-cfunclike-macro OSSwapConstInt32 (x) (scm-cast (begin (cast <uint32_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 4278190080)) (- 24))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 16711680)) (- 8))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 65280)) 8)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 255)) 24)))))))
(define-cfunclike-macro OSSwapConstInt64 (x) (scm-cast (begin (cast <uint64_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 9223372036854775807)) (- 56))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 71776119061217280)) (- 40))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 280375465082880)) (- 24))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 1095216660480)) (- 8))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 4278190080)) 8)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 16711680)) 24)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 65280)) 40)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 255)) 56)))))))
(define-cmacro _OS_OSBYTEORDERI386_H 0)
(define-cfunclike-macro OSReadLittleInt (x y) (scm-cast (begin (_OSReadInt32 x y))))
(define-cfunclike-macro OSWriteLittleInt (x y z) (scm-cast (begin (_OSWriteInt32 x y z))))
(define-cfunclike-macro OSSwapHostToLittleInt (x) (scm-cast (begin (cast <uint32_t> (identity x)))))
(define-cfunclike-macro OSSwapLittleToHostInt (x) (scm-cast (begin (cast <uint32_t> (identity x)))))
(define-cfunclike-macro OSReadBigInt16 (base byteOffset) (scm-cast (begin (OSReadSwapInt16 base byteOffset))))
(define-cfunclike-macro OSWriteBigInt16 (base byteOffset data) (scm-cast (begin (OSWriteSwapInt16 base byteOffset data))))
(define-cfunclike-macro OSReadLittleInt16 (base byteOffset) (scm-cast (begin (_OSReadInt16 base byteOffset))))
(define-cfunclike-macro OSReadLittleInt32 (base byteOffset) (scm-cast (begin (_OSReadInt32 base byteOffset))))
(define-cfunclike-macro OSReadLittleInt64 (base byteOffset) (scm-cast (begin (_OSReadInt64 base byteOffset))))
(define-cfunclike-macro OSWriteLittleInt16 (base byteOffset data) (scm-cast (begin (_OSWriteInt16 base byteOffset data))))
(define-cfunclike-macro OSWriteLittleInt32 (base byteOffset data) (scm-cast (begin (_OSWriteInt32 base byteOffset data))))
(define-cfunclike-macro OSWriteLittleInt64 (base byteOffset data) (scm-cast (begin (_OSWriteInt64 base byteOffset data))))
(define-cfunclike-macro OSSwapHostToBigConstInt16 (x) (scm-cast (begin (cast <uint16_t> (logior (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) 65280)) (- 8))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) 255)) 8)))))))
(define-cfunclike-macro OSSwapHostToBigConstInt32 (x) (scm-cast (begin (cast <uint32_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 4278190080)) (- 24))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 16711680)) (- 8))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 65280)) 8)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 255)) 24)))))))
(define-cfunclike-macro OSSwapHostToBigConstInt64 (x) (scm-cast (begin (cast <uint64_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 9223372036854775807)) (- 56))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 71776119061217280)) (- 40))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 280375465082880)) (- 24))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 1095216660480)) (- 8))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 4278190080)) 8)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 16711680)) 24)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 65280)) 40)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 255)) 56)))))))
(define-cfunclike-macro OSSwapHostToLittleConstInt16 (x) (scm-cast (begin (identity x))))
(define-cfunclike-macro OSSwapHostToLittleConstInt32 (x) (scm-cast (begin (identity x))))
(define-cfunclike-macro OSSwapHostToLittleConstInt64 (x) (scm-cast (begin (identity x))))
(define-cfunclike-macro OSSwapHostToLittleInt16 (x) (scm-cast (begin (cast <uint16_t> (identity x)))))
(define-cfunclike-macro OSSwapHostToLittleInt32 (x) (scm-cast (begin (cast <uint32_t> (identity x)))))
(define-cfunclike-macro OSSwapHostToLittleInt64 (x) (scm-cast (begin (cast <uint64_t> (identity x)))))
(define-cfunclike-macro OSSwapBigToHostConstInt16 (x) (scm-cast (begin (cast <uint16_t> (logior (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) 65280)) (- 8))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) 255)) 8)))))))
(define-cfunclike-macro OSSwapBigToHostConstInt32 (x) (scm-cast (begin (cast <uint32_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 4278190080)) (- 24))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 16711680)) (- 8))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 65280)) 8)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) 255)) 24)))))))
(define-cfunclike-macro OSSwapBigToHostConstInt64 (x) (scm-cast (begin (cast <uint64_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 9223372036854775807)) (- 56))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 71776119061217280)) (- 40))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 280375465082880)) (- 24))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 1095216660480)) (- 8))))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 4278190080)) 8)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 16711680)) 24)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 65280)) 40)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) 255)) 56)))))))
(define-cfunclike-macro OSSwapLittleToHostConstInt16 (x) (scm-cast (begin (identity x))))
(define-cfunclike-macro OSSwapLittleToHostConstInt32 (x) (scm-cast (begin (identity x))))
(define-cfunclike-macro OSSwapLittleToHostConstInt64 (x) (scm-cast (begin (identity x))))
(define-cfunclike-macro OSSwapLittleToHostInt16 (x) (scm-cast (begin (cast <uint16_t> (identity x)))))
(define-cfunclike-macro OSSwapLittleToHostInt32 (x) (scm-cast (begin (cast <uint32_t> (identity x)))))
(define-cfunclike-macro OSSwapLittleToHostInt64 (x) (scm-cast (begin (cast <uint64_t> (identity x)))))
(define-cmacro _U_LONG 0)
(define-cmacro _DEV_T 0)
(define-cmacro _BLKCNT_T 0)
(define-cmacro _BLKSIZE_T 0)
(define-cmacro _GID_T 0)
(define-cmacro _IN_ADDR_T 0)
(define-cmacro _IN_PORT_T 0)
(define-cmacro _INO_T 0)
(define-cmacro _KEY_T 0)
(define-cmacro _MODE_T 0)
(define-cmacro _NLINK_T 0)
(define-cmacro _ID_T 0)
(define-cmacro _PID_T 0)
(define-cmacro _OFF_T 0)
(define-cmacro _UID_T 0)
(define-cfunclike-macro major (x) (scm-cast (begin (cast <int32_t> (logand (cast <integer> (ash (cast <integer> (cast <u_int32_t> (identity x))) (- 24))) 255)))))
(define-cfunclike-macro minor (x) (scm-cast (begin (cast <int32_t> (logand (cast <integer> (identity x)) 16777215)))))
(define-cfunclike-macro makedev (x y) (scm-cast (begin (cast <dev_t> (logior (cast <integer> (ash (cast <integer> (identity x)) 24)) (cast <integer> (identity y)))))))
(define-cmacro _CLOCK_T 0)
(define-cmacro _SIZE_T 0)
(define-cmacro _SSIZE_T 0)
(define-cmacro _TIME_T 0)
(define-cmacro _USECONDS_T 0)
(define-cmacro _SUSECONDS_T 0)
(define-cmacro NBBY 8)
(define-cmacro NFDBITS (scm-cast (begin (* (cast <real> (c-sizeof <__int32_t>)) 8))))
(define-cfunclike-macro howmany (x y) (scm-cast (begin (/ (cast <real> (if (is-a? (identity x) <c-ptr>) (c-ptr+ (identity x) (cast <real> (if (is-a? (identity y) <c-ptr>) (c-ptr- (identity y) 1) (- (cast <real> (identity y)) 1)))) (+ (cast <real> (identity x)) (cast <real> (if (is-a? (identity y) <c-ptr>) (c-ptr- (identity y) 1) (- (cast <real> (identity y)) 1)))))) (cast <real> (identity y))))))
(define-cmacro _FD_SET 0)
(define-cmacro FD_SETSIZE 1024)
(define-cmacro __DARWIN_NBBY 8)
(define-cmacro __DARWIN_NFDBITS (scm-cast (begin (* (cast <real> (c-sizeof <__int32_t>)) 8))))
(define-cfunclike-macro __DARWIN_howmany (x y) (scm-cast (begin (/ (cast <real> (if (is-a? (identity x) <c-ptr>) (c-ptr+ (identity x) (cast <real> (if (is-a? (identity y) <c-ptr>) (c-ptr- (identity y) 1) (- (cast <real> (identity y)) 1)))) (+ (cast <real> (identity x)) (cast <real> (if (is-a? (identity y) <c-ptr>) (c-ptr- (identity y) 1) (- (cast <real> (identity y)) 1)))))) (cast <real> (identity y))))))
(define-cfunclike-macro FD_SET (n p) (scm-cast (begin (let ((%v (logior (cast <integer> (ref (raw-ref (deref (identity p)) 'fds_bits) (cast <integer> (/ (cast <real> (identity n)) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) 8)))))) (cast <integer> (ash 1 (cast <integer> (modulo (cast <integer> (identity n)) (cast <integer> (* (cast <real> (c-sizeof <__int32_t>)) 8))))))))) (set! (ref (raw-ref (deref (identity p)) 'fds_bits) (cast <integer> (/ (cast <real> (identity n)) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) 8))))) %v) %v))))
(define-cfunclike-macro FD_CLR (n p) (scm-cast (begin (let ((%v (logand (cast <integer> (ref (raw-ref (deref (identity p)) 'fds_bits) (cast <integer> (/ (cast <real> (identity n)) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) 8)))))) (cast <integer> (lognot (cast <integer> (ash 1 (cast <integer> (modulo (cast <integer> (identity n)) (cast <integer> (* (cast <real> (c-sizeof <__int32_t>)) 8))))))))))) (set! (ref (raw-ref (deref (identity p)) 'fds_bits) (cast <integer> (/ (cast <real> (identity n)) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) 8))))) %v) %v))))
(define-cfunclike-macro FD_ISSET (n p) (scm-cast (begin (logand (cast <integer> (ref (raw-ref (deref (identity p)) 'fds_bits) (cast <integer> (/ (cast <real> (identity n)) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) 8)))))) (cast <integer> (ash 1 (cast <integer> (modulo (cast <integer> (identity n)) (cast <integer> (* (cast <real> (c-sizeof <__int32_t>)) 8))))))))))
(define-cfunclike-macro FD_COPY (f t) (scm-cast (begin (bcopy f t (c-sizeof (deref (identity f)))))))
(define-cmacro _PTHREAD_ATTR_T 0)
(define-cmacro _PTHREAD_COND_T 0)
(define-cmacro _PTHREAD_CONDATTR_T 0)
(define-cmacro _PTHREAD_MUTEX_T 0)
(define-cmacro _PTHREAD_MUTEXATTR_T 0)
(define-cmacro _PTHREAD_ONCE_T 0)
(define-cmacro _PTHREAD_RWLOCK_T 0)
(define-cmacro _PTHREAD_RWLOCKATTR_T 0)
(define-cmacro _PTHREAD_T 0)
(define-cmacro _PTHREAD_KEY_T 0)
(define-cmacro _FSBLKCNT_T 0)
(define-cmacro _FSFILCNT_T 0)
(define-cmacro _STDARG_H 0)
(define-cmacro _ANSI_STDARG_H_ 0)
(define-cmacro __GNUC_VA_LIST 0)
(define-cmacro _VA_LIST_ 0)
(define-cmacro _VA_LIST 0)
(define-cmacro _VA_LIST_DEFINED 0)
(define-cmacro _VA_LIST_T_H 0)
(define-cmacro __va_list__ 0)
(define-cmacro _CTYPE_H_ 0)
(define-cmacro _RUNETYPE_H_ 0)
(define-cmacro __TYPES_H_ 0)
(define-cmacro __DARWIN_WCHAR_MAX 2147483647)
(define-cmacro __DARWIN_WCHAR_MIN -2147483648)
(define-cmacro __DARWIN_WEOF (scm-cast (begin (cast <__darwin_wint_t> -1))))
(define-cmacro _CT_RUNE_T 0)
(define-cmacro _RUNE_T 0)
(define-cmacro _WCHAR_T 0)
(define-cmacro _WINT_T 0)
(define-cmacro _CACHED_RUNES 256)
(define-cmacro _CRMASK -256)
(define-cmacro _RUNE_MAGIC_1 "RuneMagi")
(define-cmacro _CTYPE_A 256)
(define-cmacro _CTYPE_C 512)
(define-cmacro _CTYPE_D 1024)
(define-cmacro _CTYPE_G 2048)
(define-cmacro _CTYPE_L 4096)
(define-cmacro _CTYPE_P 8192)
(define-cmacro _CTYPE_S 16384)
(define-cmacro _CTYPE_U 32768)
(define-cmacro _CTYPE_X 65536)
(define-cmacro _CTYPE_B 131072)
(define-cmacro _CTYPE_R 262144)
(define-cmacro _CTYPE_I 524288)
(define-cmacro _CTYPE_T 1048576)
(define-cmacro _CTYPE_Q 2097152)
(define-cmacro _CTYPE_SW0 536870912)
(define-cmacro _CTYPE_SW1 1073741824)
(define-cmacro _CTYPE_SW2 2147483648)
(define-cmacro _CTYPE_SW3 3221225472)
(define-cmacro _CTYPE_SWM 3758096384)
(define-cmacro _CTYPE_SWS 30)
(define-cfunclike-macro isalnum (c) (scm-cast (begin (__istype (identity c) 1280))))
(define-cfunclike-macro isalpha (c) (scm-cast (begin (__istype (identity c) 256))))
(define-cfunclike-macro isblank (c) (scm-cast (begin (__istype (identity c) 131072))))
(define-cfunclike-macro iscntrl (c) (scm-cast (begin (__istype (identity c) 512))))
(define-cfunclike-macro isdigit (c) (scm-cast (begin (__isctype (identity c) 1024))))
(define-cfunclike-macro isgraph (c) (scm-cast (begin (__istype (identity c) 2048))))
(define-cfunclike-macro islower (c) (scm-cast (begin (__istype (identity c) 4096))))
(define-cfunclike-macro isprint (c) (scm-cast (begin (__istype (identity c) 262144))))
(define-cfunclike-macro ispunct (c) (scm-cast (begin (__istype (identity c) 8192))))
(define-cfunclike-macro isspace (c) (scm-cast (begin (__istype (identity c) 16384))))
(define-cfunclike-macro isupper (c) (scm-cast (begin (__istype (identity c) 32768))))
(define-cfunclike-macro isxdigit (c) (scm-cast (begin (__isctype (identity c) 65536))))
(define-cfunclike-macro tolower (c) (scm-cast (begin (__tolower c))))
(define-cfunclike-macro toupper (c) (scm-cast (begin (__toupper c))))
(define-cfunclike-macro _tolower (c) (scm-cast (begin (__tolower c))))
(define-cfunclike-macro _toupper (c) (scm-cast (begin (__toupper c))))
(define-cfunclike-macro digittoint (c) (scm-cast (begin (__maskrune (identity c) 255))))
(define-cfunclike-macro isascii (c) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity c)) -128)) 0) 1 0))))
(define-cfunclike-macro ishexnumber (c) (scm-cast (begin (__istype (identity c) 65536))))
(define-cfunclike-macro isideogram (c) (scm-cast (begin (__istype (identity c) 524288))))
(define-cfunclike-macro isnumber (c) (scm-cast (begin (__istype (identity c) 1024))))
(define-cfunclike-macro isphonogram (c) (scm-cast (begin (__istype (identity c) 2097152))))
(define-cfunclike-macro isrune (c) (scm-cast (begin (__istype (identity c) 4294967040))))
(define-cfunclike-macro isspecial (c) (scm-cast (begin (__istype (identity c) 1048576))))
(define-cfunclike-macro toascii (c) (scm-cast (begin (logand (cast <integer> (identity c)) 127))))
(define-cmacro _LOCALE_H_ 0)
(define-cmacro __LOCALE_H_ 0)
(define-cmacro NULL (scm-cast (begin (cast (ptr <c-void>) 0))))
(define-cmacro LC_ALL 0)
(define-cmacro LC_COLLATE 1)
(define-cmacro LC_CTYPE 2)
(define-cmacro LC_MONETARY 3)
(define-cmacro LC_NUMERIC 4)
(define-cmacro LC_TIME 5)
(define-cmacro LC_MESSAGES 6)
(define-cmacro _LC_LAST 7)
(define-cmacro USE_LOCALE 0)
(define-cmacro USE_LOCALE_COLLATE 0)
(define-cmacro USE_LOCALE_CTYPE 0)
(define-cmacro USE_LOCALE_NUMERIC 0)
(define-cmacro _BSD_SETJMP_H 0)
(define-cmacro _MACHINE_SETJMP_H_ 0)
(define-cmacro _BSD_I386_SETJMP_H 0)
(define-cmacro _BSD_MACHINE_SIGNAL_H_ 0)
(define-cmacro _i386_SIGNAL_ 1)
(define-cmacro _JBLEN 18)
(define-cmacro _SYS_PARAM_H_ 0)
(define-cmacro BSD 199506)
(define-cmacro BSD4_3 1)
(define-cmacro BSD4_4 1)
(define-cmacro NeXTBSD 1995064)
(define-cmacro NeXTBSD4_0 0)
(define-cmacro _SYS_SYSLIMITS_H_ 0)
(define-cmacro ARG_MAX 262144)
(define-cmacro CHILD_MAX 266)
(define-cmacro GID_MAX 2147483647)
(define-cmacro LINK_MAX 32767)
(define-cmacro MAX_CANON 255)
(define-cmacro MAX_INPUT 255)
(define-cmacro NAME_MAX 255)
(define-cmacro NGROUPS_MAX 16)
(define-cmacro UID_MAX 2147483647)
(define-cmacro OPEN_MAX 10240)
(define-cmacro PATH_MAX 1024)
(define-cmacro PIPE_BUF 512)
(define-cmacro BC_BASE_MAX 99)
(define-cmacro BC_DIM_MAX 2048)
(define-cmacro BC_SCALE_MAX 99)
(define-cmacro BC_STRING_MAX 1000)
(define-cmacro COLL_WEIGHTS_MAX 2)
(define-cmacro EQUIV_CLASS_MAX 2)
(define-cmacro EXPR_NEST_MAX 32)
(define-cmacro LINE_MAX 2048)
(define-cmacro RE_DUP_MAX 255)
(define-cmacro MAXCOMLEN 16)
(define-cmacro MAXINTERP 64)
(define-cmacro MAXLOGNAME 255)
(define-cmacro MAXUPRC 266)
(define-cmacro NCARGS 262144)
(define-cmacro NGROUPS 16)
(define-cmacro NOFILE 256)
(define-cmacro NOGROUP 65535)
(define-cmacro MAXHOSTNAMELEN 256)
(define-cmacro MAXDOMNAMELEN 256)
(define-cmacro _BSD_MACHINE_PARAM_H_ 0)
(define-cmacro _I386_PARAM_H_ 0)
(define-cmacro ALIGNBYTES 3)
(define-cfunclike-macro ALIGN (p) (scm-cast (begin (logand (cast <integer> (if (is-a? (cast <c-uint> (identity p)) <c-ptr>) (c-ptr+ (cast <c-uint> (identity p)) 3) (+ (cast <real> (cast <c-uint> (identity p))) 3))) -4))))
(define-cmacro NBPG 4096)
(define-cmacro PGOFSET 4095)
(define-cmacro PGSHIFT 12)
(define-cmacro DEV_BSIZE 512)
(define-cmacro DEV_BSHIFT 9)
(define-cmacro BLKDEV_IOSIZE 2048)
(define-cmacro MAXPHYS 131072)
(define-cmacro CLSIZE 1)
(define-cmacro CLSIZELOG2 0)
(define-cmacro MSIZE 256)
(define-cmacro MCLBYTES 2048)
(define-cmacro MCLSHIFT 11)
(define-cmacro MCLOFSET 2047)
(define-cmacro NMBCLUSTERS 256)
(define-cfunclike-macro ctos (x) (scm-cast (begin (identity x))))
(define-cfunclike-macro stoc (x) (scm-cast (begin (identity x))))
(define-cfunclike-macro ctod (x) (scm-cast (begin (ash (cast <integer> (identity x)) 3))))
(define-cfunclike-macro dtoc (x) (scm-cast (begin (ash (cast <integer> (identity x)) (- 3)))))
(define-cfunclike-macro dtob (x) (scm-cast (begin (ash (cast <integer> (identity x)) 9))))
(define-cfunclike-macro ctob (x) (scm-cast (begin (ash (cast <integer> (identity x)) 12))))
(define-cfunclike-macro btoc (x) (scm-cast (begin (ash (cast <integer> (if (is-a? (cast <c-uint> (identity x)) <c-ptr>) (c-ptr+ (cast <c-uint> (identity x)) 4095) (+ (cast <real> (cast <c-uint> (identity x))) 4095))) (- 12)))))
(define-cfunclike-macro btodb (bytes devBlockSize) (scm-cast (begin (/ (cast <real> (cast <c-uint> (identity bytes))) (cast <real> devBlockSize)))))
(define-cfunclike-macro dbtob (db devBlockSize) (scm-cast (begin (* (cast <real> (cast <c-uint> (identity db))) (cast <real> devBlockSize)))))
(define-cfunclike-macro bdbtofsb (bn) (scm-cast (begin (/ (cast <real> (identity bn)) 4))))
(define-cfunclike-macro STATUS_WORD (rpl ipl) (scm-cast (begin (logior (cast <integer> (ash (cast <integer> (identity ipl)) 8)) (cast <integer> (identity rpl))))))
(define-cfunclike-macro USERMODE (x) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity x)) 3)) 3) 1 0))))
(define-cfunclike-macro BASEPRI (x) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity x)) 65280)) 0) 1 0))))
(define-cfunclike-macro DELAY (n) (scm-cast (begin (let* ((N (make <c-int>))) (set! (ref N) (identity n)) (call/cc (lambda (%break) (let %continue () (if (eq? (cast <real> (if (> (cast <real> (pre-- N)) 0) 1 0)) 0) (%break 0) (begin 0 (%continue))))))) 0)))
(define-cmacro _GCC_LIMITS_H_ 0)
(define-cmacro _LIMITS_H_ 0)
(define-cmacro _I386_LIMITS_H_ 0)
(define-cmacro _I386__LIMITS_H_ 0)
(define-cmacro __DARWIN_CLK_TCK 100)
(define-cmacro CHAR_BIT 8)
(define-cmacro MB_LEN_MAX 6)
(define-cmacro CLK_TCK 100)
(define-cmacro SCHAR_MAX 127)
(define-cmacro SCHAR_MIN -128)
(define-cmacro UCHAR_MAX 255)
(define-cmacro CHAR_MAX 127)
(define-cmacro CHAR_MIN -128)
(define-cmacro USHRT_MAX 65535)
(define-cmacro SHRT_MAX 32767)
(define-cmacro SHRT_MIN -32768)
(define-cmacro UINT_MAX 4294967295)
(define-cmacro INT_MAX 2147483647)
(define-cmacro INT_MIN -2147483648)
(define-cmacro ULONG_MAX 4294967295)
(define-cmacro LONG_MAX 2147483647)
(define-cmacro LONG_MIN -2147483648)
(define-cmacro ULLONG_MAX 9223372036854775807)
(define-cmacro LLONG_MAX 9223372036854775807)
(define-cmacro LLONG_MIN -9223372036854775808)
(define-cmacro SSIZE_MAX 2147483647)
(define-cmacro SIZE_T_MAX 4294967295)
(define-cmacro UQUAD_MAX 9223372036854775807)
(define-cmacro QUAD_MAX 9223372036854775807)
(define-cmacro QUAD_MIN -9223372036854775808)
(define-cmacro LONG_BIT 32)
(define-cmacro WORD_BIT 32)
(define-cmacro _POSIX_AIO_LISTIO_MAX 16)
(define-cmacro _POSIX_AIO_MAX 1)
(define-cmacro _POSIX_DELAYTIMER_MAX 32)
(define-cmacro _POSIX_HOST_NAME_MAX 255)
(define-cmacro _POSIX_LOGIN_NAME_MAX 9)
(define-cmacro _POSIX_MQ_OPEN_MAX 8)
(define-cmacro _POSIX_MQ_PRIO_MAX 32)
(define-cmacro _POSIX_ARG_MAX 4096)
(define-cmacro _POSIX_CHILD_MAX 25)
(define-cmacro _POSIX_LINK_MAX 8)
(define-cmacro _POSIX_MAX_CANON 255)
(define-cmacro _POSIX_MAX_INPUT 255)
(define-cmacro _POSIX_NAME_MAX 14)
(define-cmacro _POSIX_NGROUPS_MAX 8)
(define-cmacro _POSIX_OPEN_MAX 20)
(define-cmacro _POSIX_PATH_MAX 256)
(define-cmacro _POSIX_PIPE_BUF 512)
(define-cmacro _POSIX_SSIZE_MAX 32767)
(define-cmacro _POSIX_STREAM_MAX 8)
(define-cmacro _POSIX_TZNAME_MAX 6)
(define-cmacro _POSIX_RTSIG_MAX 8)
(define-cmacro _POSIX_SEM_NSEMS_MAX 256)
(define-cmacro _POSIX_SEM_VALUE_MAX 32767)
(define-cmacro _POSIX_SIGQUEUE_MAX 32)
(define-cmacro _POSIX_SSIZE_MAX 32767)
(define-cmacro _POSIX_STREAM_MAX 8)
(define-cmacro _POSIX_SS_REPL_MAX 4)
(define-cmacro _POSIX_SYMLINK_MAX 255)
(define-cmacro _POSIX_SYMLOOP_MAX 8)
(define-cmacro _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4)
(define-cmacro _POSIX_THREAD_KEYS_MAX 128)
(define-cmacro _POSIX_THREAD_THREADS_MAX 64)
(define-cmacro _POSIX_TIMER_MAX 32)
(define-cmacro _POSIX_TRACE_EVENT_NAME_MAX 30)
(define-cmacro _POSIX_TRACE_NAME_MAX 8)
(define-cmacro _POSIX_TRACE_SYS_MAX 8)
(define-cmacro _POSIX_TRACE_USER_EVENT_MAX 32)
(define-cmacro _POSIX_TTY_NAME_MAX 9)
(define-cmacro _POSIX2_BC_BASE_MAX 99)
(define-cmacro _POSIX2_BC_DIM_MAX 2048)
(define-cmacro _POSIX2_BC_SCALE_MAX 99)
(define-cmacro _POSIX2_BC_STRING_MAX 1000)
(define-cmacro _POSIX2_CHARCLASS_NAME_MAX 14)
(define-cmacro _POSIX2_COLL_WEIGHTS_MAX 2)
(define-cmacro _POSIX2_EQUIV_CLASS_MAX 2)
(define-cmacro _POSIX2_EXPR_NEST_MAX 32)
(define-cmacro _POSIX2_LINE_MAX 2048)
(define-cmacro _POSIX2_RE_DUP_MAX 255)
(define-cmacro PTHREAD_STACK_MIN 8192)
(define-cmacro PTHREAD_DESTRUCTOR_ITERATIONS 4)
(define-cmacro PTHREAD_KEYS_MAX 128)
(define-cmacro PASS_MAX 128)
(define-cmacro NL_ARGMAX 9)
(define-cmacro NL_LANGMAX 14)
(define-cmacro NL_MSGMAX 32767)
(define-cmacro NL_NMAX 1)
(define-cmacro NL_SETMAX 255)
(define-cmacro NL_TEXTMAX 2048)
(define-cmacro _XOPEN_IOV_MAX 16)
(define-cmacro IOV_MAX 1024)
(define-cmacro _XOPEN_NAME_MAX 255)
(define-cmacro _XOPEN_PATH_MAX 1024)
(define-cmacro _LIMITS_H___ 0)
(define-cmacro CHAR_BIT 8)
(define-cmacro SCHAR_MIN -128)
(define-cmacro SCHAR_MAX 127)
(define-cmacro UCHAR_MAX 255)
(define-cmacro CHAR_MIN -128)
(define-cmacro CHAR_MAX 127)
(define-cmacro SHRT_MIN -32768)
(define-cmacro SHRT_MAX 32767)
(define-cmacro USHRT_MAX 65535)
(define-cmacro INT_MIN -2147483648)
(define-cmacro INT_MAX 2147483647)
(define-cmacro UINT_MAX 4294967295)
(define-cmacro LONG_MIN -2147483648)
(define-cmacro LONG_MAX 2147483647)
(define-cmacro ULONG_MAX 4294967295)
(define-cmacro LONG_LONG_MIN -9223372036854775808)
(define-cmacro LONG_LONG_MAX 9223372036854775807)
(define-cmacro ULONG_LONG_MAX 18446744073709551615)
(define-cmacro _SYS_SIGNAL_H_ 0)
(define-cmacro NSIG 32)
(define-cmacro SIGHUP 1)
(define-cmacro SIGINT 2)
(define-cmacro SIGQUIT 3)
(define-cmacro SIGILL 4)
(define-cmacro SIGTRAP 5)
(define-cmacro SIGABRT 6)
(define-cmacro SIGIOT 6)
(define-cmacro SIGEMT 7)
(define-cmacro SIGFPE 8)
(define-cmacro SIGKILL 9)
(define-cmacro SIGBUS 10)
(define-cmacro SIGSEGV 11)
(define-cmacro SIGSYS 12)
(define-cmacro SIGPIPE 13)
(define-cmacro SIGALRM 14)
(define-cmacro SIGTERM 15)
(define-cmacro SIGURG 16)
(define-cmacro SIGSTOP 17)
(define-cmacro SIGTSTP 18)
(define-cmacro SIGCONT 19)
(define-cmacro SIGCHLD 20)
(define-cmacro SIGTTIN 21)
(define-cmacro SIGTTOU 22)
(define-cmacro SIGIO 23)
(define-cmacro SIGXCPU 24)
(define-cmacro SIGXFSZ 25)
(define-cmacro SIGVTALRM 26)
(define-cmacro SIGPROF 27)
(define-cmacro SIGWINCH 28)
(define-cmacro SIGINFO 29)
(define-cmacro SIGUSR1 30)
(define-cmacro SIGUSR2 31)
(define-cmacro SIG_DFL (scm-cast (begin (cast (make-c-func-ptr <c-void> (list)) 0))))
(define-cmacro SIG_IGN (scm-cast (begin (cast (make-c-func-ptr <c-void> (list)) 1))))
(define-cmacro SIG_HOLD (scm-cast (begin (cast (make-c-func-ptr <c-void> (list)) 5))))
(define-cmacro SIG_ERR (scm-cast (begin (cast (make-c-func-ptr <c-void> (list)) -1))))
(define-cmacro _MCONTEXT_T 0)
(define-cmacro _MCONTEXT64_T 0)
(define-cmacro _SIGSET_T 0)
(define-cmacro _UCONTEXT_T 0)
(define-cmacro _UCONTEXT64_T 0)
(define-cmacro SIGEV_NONE 0)
(define-cmacro SIGEV_SIGNAL 1)
(define-cmacro SIGEV_THREAD 3)
(define-cmacro ILL_NOOP 0)
(define-cmacro ILL_ILLOPC 1)
(define-cmacro ILL_ILLTRP 2)
(define-cmacro ILL_PRVOPC 3)
(define-cmacro ILL_ILLOPN 4)
(define-cmacro ILL_ILLADR 5)
(define-cmacro ILL_PRVREG 6)
(define-cmacro ILL_COPROC 7)
(define-cmacro ILL_BADSTK 8)
(define-cmacro FPE_NOOP 0)
(define-cmacro FPE_FLTDIV 1)
(define-cmacro FPE_FLTOVF 2)
(define-cmacro FPE_FLTUND 3)
(define-cmacro FPE_FLTRES 4)
(define-cmacro FPE_FLTINV 5)
(define-cmacro FPE_FLTSUB 6)
(define-cmacro FPE_INTDIV 7)
(define-cmacro FPE_INTOVF 8)
(define-cmacro SEGV_NOOP 0)
(define-cmacro SEGV_MAPERR 1)
(define-cmacro SEGV_ACCERR 2)
(define-cmacro BUS_NOOP 0)
(define-cmacro BUS_ADRALN 1)
(define-cmacro BUS_ADRERR 2)
(define-cmacro BUS_OBJERR 3)
(define-cmacro TRAP_BRKPT 1)
(define-cmacro TRAP_TRACE 2)
(define-cmacro CLD_NOOP 0)
(define-cmacro CLD_EXITED 1)
(define-cmacro CLD_KILLED 2)
(define-cmacro CLD_DUMPED 3)
(define-cmacro CLD_TRAPPED 4)
(define-cmacro CLD_STOPPED 5)
(define-cmacro CLD_CONTINUED 6)
(define-cmacro POLL_IN 1)
(define-cmacro POLL_OUT 2)
(define-cmacro POLL_MSG 3)
(define-cmacro POLL_ERR 4)
(define-cmacro POLL_PRI 5)
(define-cmacro POLL_HUP 6)
(define-cmacro SA_ONSTACK 1)
(define-cmacro SA_RESTART 2)
(define-cmacro SA_DISABLE 4)
(define-cmacro SA_RESETHAND 4)
(define-cmacro SA_NOCLDSTOP 8)
(define-cmacro SA_NODEFER 16)
(define-cmacro SA_NOCLDWAIT 32)
(define-cmacro SA_SIGINFO 64)
(define-cmacro SA_USERTRAMP 256)
(define-cmacro SA_64REGSET 512)
(define-cmacro SIG_BLOCK 1)
(define-cmacro SIG_UNBLOCK 2)
(define-cmacro SIG_SETMASK 3)
(define-cmacro SI_USER 65537)
(define-cmacro SI_QUEUE 65538)
(define-cmacro SI_TIMER 65539)
(define-cmacro SI_ASYNCIO 65540)
(define-cmacro SI_MESGQ 65541)
(define-cmacro _STACK_T 0)
(define-cmacro SS_ONSTACK 1)
(define-cmacro SS_DISABLE 4)
(define-cmacro MINSIGSTKSZ 32768)
(define-cmacro SIGSTKSZ 131072)
(define-cmacro SV_ONSTACK 1)
(define-cmacro SV_INTERRUPT 2)
(define-cmacro SV_RESETHAND 4)
(define-cmacro SV_NODEFER 16)
(define-cmacro SV_NOCLDSTOP 8)
(define-cmacro SV_SIGINFO 64)
(define-cfunclike-macro sigmask (m) (scm-cast (begin (ash 1 (cast <integer> (if (is-a? (identity m) <c-ptr>) (c-ptr- (identity m) 1) (- (cast <real> (identity m)) 1)))))))
(define-cmacro BADSIG (scm-cast (begin (cast (make-c-func-ptr <c-void> (list)) -1))))
(define-cmacro PSWP 0)
(define-cmacro PVM 4)
(define-cmacro PINOD 8)
(define-cmacro PRIBIO 16)
(define-cmacro PVFS 20)
(define-cmacro PZERO 22)
(define-cmacro PSOCK 24)
(define-cmacro PWAIT 32)
(define-cmacro PLOCK 36)
(define-cmacro PPAUSE 40)
(define-cmacro PUSER 50)
(define-cmacro MAXPRI 127)
(define-cmacro PRIMASK 255)
(define-cmacro PCATCH 256)
(define-cmacro PTTYBLOCK 512)
(define-cmacro PDROP 1024)
(define-cmacro NZERO 0)
(define-cmacro NBPW (scm-cast (begin (c-sizeof <c-int>))))
(define-cmacro CMASK 18)
(define-cmacro NODEV (scm-cast (begin (cast <dev_t> -1))))
(define-cmacro CLBYTES 4096)
(define-cmacro CLOFSET 4095)
(define-cfunclike-macro claligned (x) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (cast <c-int> (identity x))) 4095)) 0) 1 0))))
(define-cmacro CLOFF 4095)
(define-cmacro CLSHIFT 12)
(define-cfunclike-macro clbase (i) (scm-cast (begin (identity i))))
(define-cfunclike-macro clrnd (i) (scm-cast (begin (identity i))))
(define-cmacro CBLOCK 64)
(define-cmacro CBQSIZE 8)
(define-c-struct cblock)
(define-cmacro CBSIZE (scm-cast (begin (if (is-a? (if (is-a? 64 <c-ptr>) (c-ptr- 64 (cast <real> (c-sizeof (ptr (c-struct 'cblock))))) (- (cast <real> 64) (cast <real> (c-sizeof (ptr (c-struct 'cblock)))))) <c-ptr>) (c-ptr- (if (is-a? 64 <c-ptr>) (c-ptr- 64 (cast <real> (c-sizeof (ptr (c-struct 'cblock))))) (- (cast <real> 64) (cast <real> (c-sizeof (ptr (c-struct 'cblock)))))) 8) (- (cast <real> (if (is-a? 64 <c-ptr>) (c-ptr- 64 (cast <real> (c-sizeof (ptr (c-struct 'cblock))))) (- (cast <real> 64) (cast <real> (c-sizeof (ptr (c-struct 'cblock))))))) 8)))))
(define-cmacro CROUND 63)
(define-cmacro MAXBSIZE 1048576)
(define-cmacro MAXPHYSIO 131072)
(define-cmacro MAXFRAG 8)
(define-cmacro MAXPHYSIO_WIRED 16777216)
(define-cmacro MAXPATHLEN 1024)
(define-cmacro MAXSYMLINKS 32)
(define-cfunclike-macro setbit (a i) (scm-cast (begin (let ((%v (logior (cast <integer> (ref (cast (ptr <c-char>) (identity a)) (cast <integer> (/ (cast <real> (identity i)) 8)))) (cast <integer> (ash 1 (cast <integer> (modulo (cast <integer> (identity i)) 8))))))) (set! (ref (cast (ptr <c-char>) (identity a)) (cast <integer> (/ (cast <real> (identity i)) 8))) %v) %v))))
(define-cfunclike-macro clrbit (a i) (scm-cast (begin (let ((%v (logand (cast <integer> (ref (cast (ptr <c-char>) (identity a)) (cast <integer> (/ (cast <real> (identity i)) 8)))) (cast <integer> (lognot (cast <integer> (ash 1 (cast <integer> (modulo (cast <integer> (identity i)) 8))))))))) (set! (ref (cast (ptr <c-char>) (identity a)) (cast <integer> (/ (cast <real> (identity i)) 8))) %v) %v))))
(define-cfunclike-macro isset (a i) (scm-cast (begin (logand (cast <integer> (ref (cast (ptr <c-char>) (identity a)) (cast <integer> (/ (cast <real> (identity i)) 8)))) (cast <integer> (ash 1 (cast <integer> (modulo (cast <integer> (identity i)) 8))))))))
(define-cfunclike-macro isclr (a i) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (ref (cast (ptr <c-char>) (identity a)) (cast <integer> (/ (cast <real> (identity i)) 8)))) (cast <integer> (ash 1 (cast <integer> (modulo (cast <integer> (identity i)) 8)))))) 0) 1 0))))
(define-cfunclike-macro roundup (x y) (scm-cast (begin (* (cast <real> (/ (cast <real> (if (is-a? (identity x) <c-ptr>) (c-ptr+ (identity x) (cast <real> (if (is-a? (identity y) <c-ptr>) (c-ptr- (identity y) 1) (- (cast <real> (identity y)) 1)))) (+ (cast <real> (identity x)) (cast <real> (if (is-a? (identity y) <c-ptr>) (c-ptr- (identity y) 1) (- (cast <real> (identity y)) 1)))))) (cast <real> (identity y)))) (cast <real> (identity y))))))
(define-cfunclike-macro powerof2 (x) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (if (is-a? (identity x) <c-ptr>) (c-ptr- (identity x) 1) (- (cast <real> (identity x)) 1))) (cast <integer> (identity x)))) 0) 1 0))))
(define-cfunclike-macro MIN (a b) (scm-cast (begin (if (eq? (cast <real> (if (< (cast <real> (identity a)) (cast <real> (identity b))) 1 0)) 0) (identity b) (identity a)))))
(define-cfunclike-macro MAX (a b) (scm-cast (begin (if (eq? (cast <real> (if (> (cast <real> (identity a)) (cast <real> (identity b))) 1 0)) 0) (identity b) (identity a)))))
(define-cmacro MINBUCKET 4)
(define-cmacro MAXALLOCSAVE 8192)
(define-cmacro FSHIFT 11)
(define-cmacro FSCALE 2048)
(define-cmacro _STDLIB_H_ 0)
(define-cmacro _SYS_WAIT_H_ 0)
(define-cmacro _SYS_RESOURCE_H_ 0)
(define-cmacro _TIMEVAL 0)
(define-cmacro PRIO_PROCESS 0)
(define-cmacro PRIO_PGRP 1)
(define-cmacro PRIO_USER 2)
(define-cmacro PRIO_MIN -20)
(define-cmacro PRIO_MAX 20)
(define-cmacro RUSAGE_SELF 0)
(define-cmacro RUSAGE_CHILDREN -1)
(define-cmacro RLIM_INFINITY (scm-cast (begin (if (is-a? (ash (cast <integer> (cast <__uint64_t> 1)) 63) <c-ptr>) (c-ptr- (ash (cast <integer> (cast <__uint64_t> 1)) 63) 1) (- (cast <real> (ash (cast <integer> (cast <__uint64_t> 1)) 63)) 1)))))
(define-cmacro RLIM_SAVED_MAX (scm-cast (begin (if (is-a? (ash (cast <integer> (cast <__uint64_t> 1)) 63) <c-ptr>) (c-ptr- (ash (cast <integer> (cast <__uint64_t> 1)) 63) 1) (- (cast <real> (ash (cast <integer> (cast <__uint64_t> 1)) 63)) 1)))))
(define-cmacro RLIM_SAVED_CUR (scm-cast (begin (if (is-a? (ash (cast <integer> (cast <__uint64_t> 1)) 63) <c-ptr>) (c-ptr- (ash (cast <integer> (cast <__uint64_t> 1)) 63) 1) (- (cast <real> (ash (cast <integer> (cast <__uint64_t> 1)) 63)) 1)))))
(define-cmacro RLIMIT_CPU 0)
(define-cmacro RLIMIT_FSIZE 1)
(define-cmacro RLIMIT_DATA 2)
(define-cmacro RLIMIT_STACK 3)
(define-cmacro RLIMIT_CORE 4)
(define-cmacro RLIMIT_AS 5)
(define-cmacro RLIMIT_RSS 5)
(define-cmacro RLIMIT_MEMLOCK 6)
(define-cmacro RLIMIT_NPROC 7)
(define-cmacro RLIMIT_NOFILE 8)
(define-cmacro RLIM_NLIMITS 9)
(define-cmacro WNOHANG 1)
(define-cmacro WUNTRACED 2)
(define-cfunclike-macro _W_INT (w) (scm-cast (begin (deref (cast (ptr <c-int>) (ptr (identity w)))))))
(define-cmacro WCOREFLAG 128)
(define-cfunclike-macro _WSTATUS (x) (scm-cast (begin (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) 127))))
(define-cmacro _WSTOPPED 127)
(define-cfunclike-macro WEXITSTATUS (x) (scm-cast (begin (ash (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) (- 8)))))
(define-cfunclike-macro WIFCONTINUED (x) (scm-cast (begin (if (equal? (cast <real> x) 19) 1 0))))
(define-cfunclike-macro WIFEXITED (x) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) 127)) 0) 1 0))))
(define-cfunclike-macro WIFSIGNALED (x) (scm-cast (begin (let ((G418 (cast <real> (if (equal? (cast <real> (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) 127)) 127) 0 1)))) (if (eq? G418 0) G418 (if (equal? (cast <real> (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) 127)) 0) 0 1))))))
(define-cfunclike-macro WIFSTOPPED (x) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) 127)) 127) 1 0))))
(define-cfunclike-macro WSTOPSIG (x) (scm-cast (begin (ash (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) (- 8)))))
(define-cfunclike-macro WTERMSIG (x) (scm-cast (begin (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) 127))))
(define-cfunclike-macro WCOREDUMP (x) (scm-cast (begin (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) 128))))
(define-cfunclike-macro W_EXITCODE (ret sig) (scm-cast (begin (logior (cast <integer> (ash (cast <integer> (identity ret)) 8)) (cast <integer> (identity sig))))))
(define-cfunclike-macro W_STOPCODE (sig) (scm-cast (begin (logior (cast <integer> (ash (cast <integer> (identity sig)) 8)) 127))))
(define-cmacro WEXITED 4)
(define-cmacro WCONTINUED 16)
(define-cmacro WNOWAIT 32)
(define-cmacro WAIT_ANY -1)
(define-cmacro WAIT_MYPGRP 0)
(define-cmacro WSTOPPED 127)
(define-cmacro _ALLOCA_H_ 0)
(define-cmacro EXIT_FAILURE 1)
(define-cmacro EXIT_SUCCESS 0)
(define-cmacro RAND_MAX 2147483647)
(define-cmacro MB_CUR_MAX (scm-cast (begin __mb_cur_max)))
(define-cmacro _UNISTD_H_ 0)
(define-cmacro _SYS_UNISTD_H_ 0)
(define-cmacro _POSIX_VERSION 200112)
(define-cmacro _POSIX2_VERSION 200112)
(define-cmacro _POSIX_VDISABLE (scm-cast (begin (cast <c-uchar> 255))))
(define-cmacro _POSIX_THREAD_KEYS_MAX 128)
(define-cmacro F_OK 0)
(define-cmacro X_OK 1)
(define-cmacro W_OK 2)
(define-cmacro R_OK 4)
(define-cmacro _READ_OK 512)
(define-cmacro _WRITE_OK 1024)
(define-cmacro _EXECUTE_OK 2048)
(define-cmacro _DELETE_OK 4096)
(define-cmacro _APPEND_OK 8192)
(define-cmacro _RMFILE_OK 16384)
(define-cmacro _RATTR_OK 32768)
(define-cmacro _WATTR_OK 65536)
(define-cmacro _REXT_OK 131072)
(define-cmacro _WEXT_OK 262144)
(define-cmacro _RPERM_OK 524288)
(define-cmacro _WPERM_OK 1048576)
(define-cmacro _CHOWN_OK 2097152)
(define-cmacro _ACCESS_EXTENDED_MASK 4193792)
(define-cmacro SEEK_SET 0)
(define-cmacro SEEK_CUR 1)
(define-cmacro SEEK_END 2)
(define-cmacro L_SET 0)
(define-cmacro L_INCR 1)
(define-cmacro L_XTND 2)
(define-cmacro ACCESSX_MAX_DESCRIPTORS 100)
(define-cmacro ACCESSX_MAX_TABLESIZE 16384)
(define-cmacro _PC_LINK_MAX 1)
(define-cmacro _PC_MAX_CANON 2)
(define-cmacro _PC_MAX_INPUT 3)
(define-cmacro _PC_NAME_MAX 4)
(define-cmacro _PC_PATH_MAX 5)
(define-cmacro _PC_PIPE_BUF 6)
(define-cmacro _PC_CHOWN_RESTRICTED 7)
(define-cmacro _PC_NO_TRUNC 8)
(define-cmacro _PC_VDISABLE 9)
(define-cmacro _PC_NAME_CHARS_MAX 10)
(define-cmacro _PC_CASE_SENSITIVE 11)
(define-cmacro _PC_CASE_PRESERVING 12)
(define-cmacro _PC_EXTENDED_SECURITY_NP 13)
(define-cmacro _PC_AUTH_OPAQUE_NP 14)
(define-cmacro _CS_PATH 1)
(define-cmacro _UUID_T 0)
(define-cmacro STDIN_FILENO 0)
(define-cmacro STDOUT_FILENO 1)
(define-cmacro STDERR_FILENO 2)
(define-cmacro _XOPEN_VERSION 600)
(define-cmacro _XOPEN_XCU_VERSION 4)
(define-cmacro _POSIX_ADVISORY_INFO -1)
(define-cmacro _POSIX_ASYNCHRONOUS_IO -1)
(define-cmacro _POSIX_BARRIERS -1)
(define-cmacro _POSIX_CHOWN_RESTRICTED 200112)
(define-cmacro _POSIX_CLOCK_SELECTION -1)
(define-cmacro _POSIX_CPUTIME -1)
(define-cmacro _POSIX_FSYNC -1)
(define-cmacro _POSIX_IPV6 200112)
(define-cmacro _POSIX_JOB_CONTROL 200112)
(define-cmacro _POSIX_MAPPED_FILES 200112)
(define-cmacro _POSIX_MEMLOCK -1)
(define-cmacro _POSIX_MEMLOCK_RANGE -1)
(define-cmacro _POSIX_MEMORY_PROTECTION 200112)
(define-cmacro _POSIX_MESSAGE_PASSING -1)
(define-cmacro _POSIX_MONOTONIC_CLOCK -1)
(define-cmacro _POSIX_NO_TRUNC 200112)
(define-cmacro _POSIX_PRIORITIZED_IO -1)
(define-cmacro _POSIX_PRIORITY_SCHEDULING -1)
(define-cmacro _POSIX_RAW_SOCKETS -1)
(define-cmacro _POSIX_READER_WRITER_LOCKS 200112)
(define-cmacro _POSIX_REALTIME_SIGNALS -1)
(define-cmacro _POSIX_REGEXP 200112)
(define-cmacro _POSIX_SAVED_IDS 200112)
(define-cmacro _POSIX_SEMAPHORES -1)
(define-cmacro _POSIX_SHARED_MEMORY_OBJECTS -1)
(define-cmacro _POSIX_SHELL 200112)
(define-cmacro _POSIX_SPAWN -1)
(define-cmacro _POSIX_SPIN_LOCKS -1)
(define-cmacro _POSIX_SPORADIC_SERVER -1)
(define-cmacro _POSIX_SYNCHRONIZED_IO -1)
(define-cmacro _POSIX_THREAD_ATTR_STACKADDR 200112)
(define-cmacro _POSIX_THREAD_ATTR_STACKSIZE 200112)
(define-cmacro _POSIX_THREAD_CPUTIME -1)
(define-cmacro _POSIX_THREAD_PRIO_INHERIT -1)
(define-cmacro _POSIX_THREAD_PRIO_PROTECT -1)
(define-cmacro _POSIX_THREAD_PRIORITY_SCHEDULING -1)
(define-cmacro _POSIX_THREAD_PROCESS_SHARED -1)
(define-cmacro _POSIX_THREAD_SAFE_FUNCTIONS 200112)
(define-cmacro _POSIX_THREAD_SPORADIC_SERVER -1)
(define-cmacro _POSIX_THREADS 200112)
(define-cmacro _POSIX_TIMEOUTS -1)
(define-cmacro _POSIX_TIMERS -1)
(define-cmacro _POSIX_TRACE -1)
(define-cmacro _POSIX_TRACE_EVENT_FILTER -1)
(define-cmacro _POSIX_TRACE_INHERIT -1)
(define-cmacro _POSIX_TRACE_LOG -1)
(define-cmacro _POSIX_TYPED_MEMORY_OBJECTS -1)
(define-cmacro _POSIX2_C_BIND 200112)
(define-cmacro _POSIX2_C_DEV 200112)
(define-cmacro _POSIX2_CHAR_TERM 200112)
(define-cmacro _POSIX2_FORT_DEV -1)
(define-cmacro _POSIX2_FORT_RUN 200112)
(define-cmacro _POSIX2_LOCALEDEF 200112)
(define-cmacro _POSIX2_PBS -1)
(define-cmacro _POSIX2_PBS_ACCOUNTING -1)
(define-cmacro _POSIX2_PBS_CHECKPOINT -1)
(define-cmacro _POSIX2_PBS_LOCATE -1)
(define-cmacro _POSIX2_PBS_MESSAGE -1)
(define-cmacro _POSIX2_PBS_TRACK -1)
(define-cmacro _POSIX2_SW_DEV 200112)
(define-cmacro _POSIX2_UPE 200112)
(define-cmacro _V6_ILP32_OFF32 -1)
(define-cmacro _V6_ILP32_OFFBIG 1)
(define-cmacro _V6_LP64_OFF64 1)
(define-cmacro _V6_LPBIG_OFFBIG 1)
(define-cmacro _XBS5_ILP32_OFF32 -1)
(define-cmacro _XBS5_ILP32_OFFBIG 1)
(define-cmacro _XBS5_LP64_OFF64 1)
(define-cmacro _XBS5_LPBIG_OFFBIG 1)
(define-cmacro _XOPEN_CRYPT 1)
(define-cmacro _XOPEN_ENH_I18N 1)
(define-cmacro _XOPEN_LEGACY -1)
(define-cmacro _XOPEN_REALTIME -1)
(define-cmacro _XOPEN_REALTIME_THREADS -1)
(define-cmacro _XOPEN_SHM 1)
(define-cmacro _XOPEN_STREAMS -1)
(define-cmacro _XOPEN_UNIX 1)
(define-cmacro F_ULOCK 0)
(define-cmacro F_LOCK 1)
(define-cmacro F_TLOCK 2)
(define-cmacro F_TEST 3)
(define-cmacro _SC_ARG_MAX 1)
(define-cmacro _SC_CHILD_MAX 2)
(define-cmacro _SC_CLK_TCK 3)
(define-cmacro _SC_NGROUPS_MAX 4)
(define-cmacro _SC_OPEN_MAX 5)
(define-cmacro _SC_JOB_CONTROL 6)
(define-cmacro _SC_SAVED_IDS 7)
(define-cmacro _SC_VERSION 8)
(define-cmacro _SC_BC_BASE_MAX 9)
(define-cmacro _SC_BC_DIM_MAX 10)
(define-cmacro _SC_BC_SCALE_MAX 11)
(define-cmacro _SC_BC_STRING_MAX 12)
(define-cmacro _SC_COLL_WEIGHTS_MAX 13)
(define-cmacro _SC_EXPR_NEST_MAX 14)
(define-cmacro _SC_LINE_MAX 15)
(define-cmacro _SC_RE_DUP_MAX 16)
(define-cmacro _SC_2_VERSION 17)
(define-cmacro _SC_2_C_BIND 18)
(define-cmacro _SC_2_C_DEV 19)
(define-cmacro _SC_2_CHAR_TERM 20)
(define-cmacro _SC_2_FORT_DEV 21)
(define-cmacro _SC_2_FORT_RUN 22)
(define-cmacro _SC_2_LOCALEDEF 23)
(define-cmacro _SC_2_SW_DEV 24)
(define-cmacro _SC_2_UPE 25)
(define-cmacro _SC_STREAM_MAX 26)
(define-cmacro _SC_TZNAME_MAX 27)
(define-cmacro _SC_ASYNCHRONOUS_IO 28)
(define-cmacro _SC_PAGESIZE 29)
(define-cmacro _SC_MEMLOCK 30)
(define-cmacro _SC_MEMLOCK_RANGE 31)
(define-cmacro _SC_MEMORY_PROTECTION 32)
(define-cmacro _SC_MESSAGE_PASSING 33)
(define-cmacro _SC_PRIORITIZED_IO 34)
(define-cmacro _SC_PRIORITY_SCHEDULING 35)
(define-cmacro _SC_REALTIME_SIGNALS 36)
(define-cmacro _SC_SEMAPHORES 37)
(define-cmacro _SC_FSYNC 38)
(define-cmacro _SC_SHARED_MEMORY_OBJECTS 39)
(define-cmacro _SC_SYNCHRONIZED_IO 40)
(define-cmacro _SC_TIMERS 41)
(define-cmacro _SC_AIO_LISTIO_MAX 42)
(define-cmacro _SC_AIO_MAX 43)
(define-cmacro _SC_AIO_PRIO_DELTA_MAX 44)
(define-cmacro _SC_DELAYTIMER_MAX 45)
(define-cmacro _SC_MQ_OPEN_MAX 46)
(define-cmacro _SC_MAPPED_FILES 47)
(define-cmacro _SC_RTSIG_MAX 48)
(define-cmacro _SC_SEM_NSEMS_MAX 49)
(define-cmacro _SC_SEM_VALUE_MAX 50)
(define-cmacro _SC_SIGQUEUE_MAX 51)
(define-cmacro _SC_TIMER_MAX 52)
(define-cmacro _SC_2_PBS 59)
(define-cmacro _SC_2_PBS_ACCOUNTING 60)
(define-cmacro _SC_2_PBS_CHECKPOINT 61)
(define-cmacro _SC_2_PBS_LOCATE 62)
(define-cmacro _SC_2_PBS_MESSAGE 63)
(define-cmacro _SC_2_PBS_TRACK 64)
(define-cmacro _SC_ADVISORY_INFO 65)
(define-cmacro _SC_BARRIERS 66)
(define-cmacro _SC_CLOCK_SELECTION 67)
(define-cmacro _SC_CPUTIME 68)
(define-cmacro _SC_FILE_LOCKING 69)
(define-cmacro _SC_GETGR_R_SIZE_MAX 70)
(define-cmacro _SC_GETPW_R_SIZE_MAX 71)
(define-cmacro _SC_HOST_NAME_MAX 72)
(define-cmacro _SC_LOGIN_NAME_MAX 73)
(define-cmacro _SC_MONOTONIC_CLOCK 74)
(define-cmacro _SC_MQ_PRIO_MAX 75)
(define-cmacro _SC_READER_WRITER_LOCKS 76)
(define-cmacro _SC_REGEXP 77)
(define-cmacro _SC_SHELL 78)
(define-cmacro _SC_SPAWN 79)
(define-cmacro _SC_SPIN_LOCKS 80)
(define-cmacro _SC_SPORADIC_SERVER 81)
(define-cmacro _SC_THREAD_ATTR_STACKADDR 82)
(define-cmacro _SC_THREAD_ATTR_STACKSIZE 83)
(define-cmacro _SC_THREAD_CPUTIME 84)
(define-cmacro _SC_THREAD_DESTRUCTOR_ITERATIONS 85)
(define-cmacro _SC_THREAD_KEYS_MAX 86)
(define-cmacro _SC_THREAD_PRIO_INHERIT 87)
(define-cmacro _SC_THREAD_PRIO_PROTECT 88)
(define-cmacro _SC_THREAD_PRIORITY_SCHEDULING 89)
(define-cmacro _SC_THREAD_PROCESS_SHARED 90)
(define-cmacro _SC_THREAD_SAFE_FUNCTIONS 91)
(define-cmacro _SC_THREAD_SPORADIC_SERVER 92)
(define-cmacro _SC_THREAD_STACK_MIN 93)
(define-cmacro _SC_THREAD_THREADS_MAX 94)
(define-cmacro _SC_TIMEOUTS 95)
(define-cmacro _SC_THREADS 96)
(define-cmacro _SC_TRACE 97)
(define-cmacro _SC_TRACE_EVENT_FILTER 98)
(define-cmacro _SC_TRACE_INHERIT 99)
(define-cmacro _SC_TRACE_LOG 100)
(define-cmacro _SC_TTY_NAME_MAX 101)
(define-cmacro _SC_TYPED_MEMORY_OBJECTS 102)
(define-cmacro _SC_V6_ILP32_OFF32 103)
(define-cmacro _SC_V6_ILP32_OFFBIG 104)
(define-cmacro _SC_V6_LP64_OFF64 105)
(define-cmacro _SC_V6_LPBIG_OFFBIG 106)
(define-cmacro _SC_IPV6 118)
(define-cmacro _SC_RAW_SOCKETS 119)
(define-cmacro _SC_SYMLOOP_MAX 120)
(define-cmacro _SC_ATEXIT_MAX 107)
(define-cmacro _SC_IOV_MAX 56)
(define-cmacro _SC_PAGE_SIZE 29)
(define-cmacro _SC_XOPEN_CRYPT 108)
(define-cmacro _SC_XOPEN_ENH_I18N 109)
(define-cmacro _SC_XOPEN_LEGACY 110)
(define-cmacro _SC_XOPEN_REALTIME 111)
(define-cmacro _SC_XOPEN_REALTIME_THREADS 112)
(define-cmacro _SC_XOPEN_SHM 113)
(define-cmacro _SC_XOPEN_STREAMS 114)
(define-cmacro _SC_XOPEN_UNIX 115)
(define-cmacro _SC_XOPEN_VERSION 116)
(define-cmacro _SC_XOPEN_XCU_VERSION 121)
(define-cmacro _SC_XBS5_ILP32_OFF32 122)
(define-cmacro _SC_XBS5_ILP32_OFFBIG 123)
(define-cmacro _SC_XBS5_LP64_OFF64 124)
(define-cmacro _SC_XBS5_LPBIG_OFFBIG 125)
(define-cmacro _CS_POSIX_V6_ILP32_OFF32_CFLAGS 2)
(define-cmacro _CS_POSIX_V6_ILP32_OFF32_LDFLAGS 3)
(define-cmacro _CS_POSIX_V6_ILP32_OFF32_LIBS 4)
(define-cmacro _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS 5)
(define-cmacro _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS 6)
(define-cmacro _CS_POSIX_V6_ILP32_OFFBIG_LIBS 7)
(define-cmacro _CS_POSIX_V6_LP64_OFF64_CFLAGS 8)
(define-cmacro _CS_POSIX_V6_LP64_OFF64_LDFLAGS 9)
(define-cmacro _CS_POSIX_V6_LP64_OFF64_LIBS 10)
(define-cmacro _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS 11)
(define-cmacro _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS 12)
(define-cmacro _CS_POSIX_V6_LPBIG_OFFBIG_LIBS 13)
(define-cmacro _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS 14)
(define-cmacro _CS_XBS5_ILP32_OFF32_CFLAGS 20)
(define-cmacro _CS_XBS5_ILP32_OFF32_LDFLAGS 21)
(define-cmacro _CS_XBS5_ILP32_OFF32_LIBS 22)
(define-cmacro _CS_XBS5_ILP32_OFF32_LINTFLAGS 23)
(define-cmacro _CS_XBS5_ILP32_OFFBIG_CFLAGS 24)
(define-cmacro _CS_XBS5_ILP32_OFFBIG_LDFLAGS 25)
(define-cmacro _CS_XBS5_ILP32_OFFBIG_LIBS 26)
(define-cmacro _CS_XBS5_ILP32_OFFBIG_LINTFLAGS 27)
(define-cmacro _CS_XBS5_LP64_OFF64_CFLAGS 28)
(define-cmacro _CS_XBS5_LP64_OFF64_LDFLAGS 29)
(define-cmacro _CS_XBS5_LP64_OFF64_LIBS 30)
(define-cmacro _CS_XBS5_LP64_OFF64_LINTFLAGS 31)
(define-cmacro _CS_XBS5_LPBIG_OFFBIG_CFLAGS 32)
(define-cmacro _CS_XBS5_LPBIG_OFFBIG_LDFLAGS 33)
(define-cmacro _CS_XBS5_LPBIG_OFFBIG_LIBS 34)
(define-cmacro _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS 35)
(define-cmacro _SYS_SELECT_H_ 0)
(define-cmacro _TIMESPEC 0)
(define-cmacro _USER_SIGNAL_H 0)
(define-cfunclike-macro sigaddset (set signo) (scm-cast (begin (begin (let ((%v (logior (cast <integer> (deref (identity set))) (cast <integer> (ash 1 (cast <integer> (if (is-a? (identity signo) <c-ptr>) (c-ptr- (identity signo) 1) (- (cast <real> (identity signo)) 1)))))))) (set! (deref (identity set)) %v) %v) 0))))
(define-cfunclike-macro sigdelset (set signo) (scm-cast (begin (begin (let ((%v (logand (cast <integer> (deref (identity set))) (cast <integer> (lognot (cast <integer> (ash 1 (cast <integer> (if (is-a? (identity signo) <c-ptr>) (c-ptr- (identity signo) 1) (- (cast <real> (identity signo)) 1)))))))))) (set! (deref (identity set)) %v) %v) 0))))
(define-cfunclike-macro sigemptyset (set) (scm-cast (begin (begin (let ((%v 0)) (set! (deref (identity set)) %v) %v) 0))))
(define-cfunclike-macro sigfillset (set) (scm-cast (begin (begin (let ((%v (lognot (cast <integer> (cast <sigset_t> 0))))) (set! (deref (identity set)) %v) %v) 0))))
(define-cfunclike-macro sigismember (set signo) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (deref (identity set))) (cast <integer> (ash 1 (cast <integer> (if (is-a? (identity signo) <c-ptr>) (c-ptr- (identity signo) 1) (- (cast <real> (identity signo)) 1))))))) 0) 0 1))))
(define-cmacro _SYS_TIME_H_ 0)
(define-cmacro ITIMER_REAL 0)
(define-cmacro ITIMER_VIRTUAL 1)
(define-cmacro ITIMER_PROF 2)
(define-cfunclike-macro TIMEVAL_TO_TIMESPEC (tv ts) (scm-cast (begin (begin (let ((%v (raw-ref (deref (identity tv)) 'tv_sec))) (set! (ref (deref (identity ts)) 'tv_sec) %v) %v) (let ((%v (* (cast <real> (raw-ref (deref (identity tv)) 'tv_usec)) 1000))) (set! (ref (deref (identity ts)) 'tv_nsec) %v) %v)) 0)))
(define-cfunclike-macro TIMESPEC_TO_TIMEVAL (tv ts) (scm-cast (begin (begin (let ((%v (raw-ref (deref (identity ts)) 'tv_sec))) (set! (ref (deref (identity tv)) 'tv_sec) %v) %v) (let ((%v (/ (cast <real> (raw-ref (deref (identity ts)) 'tv_nsec)) 1000))) (set! (ref (deref (identity tv)) 'tv_usec) %v) %v)) 0)))
(define-cmacro DST_NONE 0)
(define-cmacro DST_USA 1)
(define-cmacro DST_AUST 2)
(define-cmacro DST_WET 3)
(define-cmacro DST_MET 4)
(define-cmacro DST_EET 5)
(define-cmacro DST_CAN 6)
(define-cfunclike-macro timerclear (tvp) (scm-cast (begin (let ((%v (let ((%v 0)) (set! (ref (deref (identity tvp)) 'tv_usec) %v) %v))) (set! (ref (deref (identity tvp)) 'tv_sec) %v) %v))))
(define-cfunclike-macro timerisset (tvp) (scm-cast (begin (let ((G419 (cast <real> (raw-ref (deref (identity tvp)) 'tv_sec)))) (if (eq? G419 0) (raw-ref (deref (identity tvp)) 'tv_usec) G419)))))
(define-cfunclike-macro timeradd (tvp uvp vvp) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (if (is-a? (raw-ref (deref (identity tvp)) 'tv_sec) <c-ptr>) (c-ptr+ (raw-ref (deref (identity tvp)) 'tv_sec) (cast <real> (raw-ref (deref (identity uvp)) 'tv_sec))) (+ (cast <real> (raw-ref (deref (identity tvp)) 'tv_sec)) (cast <real> (raw-ref (deref (identity uvp)) 'tv_sec)))))) (set! (ref (deref (identity vvp)) 'tv_sec) %v) %v) (let ((%v (if (is-a? (raw-ref (deref (identity tvp)) 'tv_usec) <c-ptr>) (c-ptr+ (raw-ref (deref (identity tvp)) 'tv_usec) (cast <real> (raw-ref (deref (identity uvp)) 'tv_usec))) (+ (cast <real> (raw-ref (deref (identity tvp)) 'tv_usec)) (cast <real> (raw-ref (deref (identity uvp)) 'tv_usec)))))) (set! (ref (deref (identity vvp)) 'tv_usec) %v) %v) (if (eq? (cast <real> (if (>= (cast <real> (raw-ref (deref (identity vvp)) 'tv_usec)) 1000000) 1 0)) 0) 0 (begin (post++ (raw-ref (deref (identity vvp)) 'tv_sec)) (let ((%v (if (is-a? (raw-ref (deref (identity vvp)) 'tv_usec) <c-ptr>) (c-ptr- (raw-ref (deref (identity vvp)) 'tv_usec) 1000000) (- (cast <real> (raw-ref (deref (identity vvp)) 'tv_usec)) 1000000)))) (set! (ref (deref (identity vvp)) 'tv_usec) %v) %v)))) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro timersub (tvp uvp vvp) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (if (is-a? (raw-ref (deref (identity tvp)) 'tv_sec) <c-ptr>) (c-ptr- (raw-ref (deref (identity tvp)) 'tv_sec) (cast <real> (raw-ref (deref (identity uvp)) 'tv_sec))) (- (cast <real> (raw-ref (deref (identity tvp)) 'tv_sec)) (cast <real> (raw-ref (deref (identity uvp)) 'tv_sec)))))) (set! (ref (deref (identity vvp)) 'tv_sec) %v) %v) (let ((%v (if (is-a? (raw-ref (deref (identity tvp)) 'tv_usec) <c-ptr>) (c-ptr- (raw-ref (deref (identity tvp)) 'tv_usec) (cast <real> (raw-ref (deref (identity uvp)) 'tv_usec))) (- (cast <real> (raw-ref (deref (identity tvp)) 'tv_usec)) (cast <real> (raw-ref (deref (identity uvp)) 'tv_usec)))))) (set! (ref (deref (identity vvp)) 'tv_usec) %v) %v) (if (eq? (cast <real> (if (< (cast <real> (raw-ref (deref (identity vvp)) 'tv_usec)) 0) 1 0)) 0) 0 (begin (post-- (raw-ref (deref (identity vvp)) 'tv_sec)) (let ((%v (if (is-a? (raw-ref (deref (identity vvp)) 'tv_usec) <c-ptr>) (c-ptr+ (raw-ref (deref (identity vvp)) 'tv_usec) 1000000) (+ (cast <real> (raw-ref (deref (identity vvp)) 'tv_usec)) 1000000)))) (set! (ref (deref (identity vvp)) 'tv_usec) %v) %v)))) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cmacro _TIME_H_ 0)
(define-cmacro _BSD_MACHINE__LIMITS_H_ 0)
(define-cmacro CLOCKS_PER_SEC 100)
(define-cmacro doing_taint (scm-cast (begin Perl_doing_taint)))
(define-cmacro get_context (scm-cast (begin Perl_get_context)))
(define-cmacro set_context (scm-cast (begin Perl_set_context)))
(define-cmacro my_fork (scm-cast (begin Perl_my_fork)))
(define-cmacro atfork_lock (scm-cast (begin Perl_atfork_lock)))
(define-cmacro atfork_unlock (scm-cast (begin Perl_atfork_unlock)))
(define-cmacro csighandler (scm-cast (begin Perl_csighandler)))
(define-cmacro safesysmalloc (scm-cast (begin Perl_safesysmalloc)))
(define-cmacro safesyscalloc (scm-cast (begin Perl_safesyscalloc)))
(define-cmacro safesysrealloc (scm-cast (begin Perl_safesysrealloc)))
(define-cmacro safesysfree (scm-cast (begin Perl_safesysfree)))
(define-cmacro my_socketpair (scm-cast (begin Perl_my_socketpair)))
(define-cmacro croak (scm-cast (begin Perl_croak_nocontext)))
(define-cmacro deb (scm-cast (begin Perl_deb_nocontext)))
(define-cmacro die (scm-cast (begin Perl_die_nocontext)))
(define-cmacro form (scm-cast (begin Perl_form_nocontext)))
(define-cmacro load_module (scm-cast (begin Perl_load_module_nocontext)))
(define-cmacro mess (scm-cast (begin Perl_mess_nocontext)))
(define-cmacro newSVpvf (scm-cast (begin Perl_newSVpvf_nocontext)))
(define-cmacro sv_catpvf (scm-cast (begin Perl_sv_catpvf_nocontext)))
(define-cmacro sv_setpvf (scm-cast (begin Perl_sv_setpvf_nocontext)))
(define-cmacro warn (scm-cast (begin Perl_warn_nocontext)))
(define-cmacro warner (scm-cast (begin Perl_warner_nocontext)))
(define-cmacro sv_catpvf_mg (scm-cast (begin Perl_sv_catpvf_mg_nocontext)))
(define-cmacro sv_setpvf_mg (scm-cast (begin Perl_sv_setpvf_mg_nocontext)))
(define-cmacro _STDDEF_H 0)
(define-cmacro _STDDEF_H_ 0)
(define-cmacro _ANSI_STDDEF_H 0)
(define-cmacro __STDDEF_H__ 0)
(define-cmacro _PTRDIFF_T 0)
(define-cmacro _T_PTRDIFF_ 0)
(define-cmacro _T_PTRDIFF 0)
(define-cmacro __PTRDIFF_T 0)
(define-cmacro _PTRDIFF_T_ 0)
(define-cmacro _BSD_PTRDIFF_T_ 0)
(define-cmacro ___int_ptrdiff_t_h 0)
(define-cmacro _GCC_PTRDIFF_T 0)
(define-cmacro NULL (scm-cast (begin (cast (ptr <c-void>) 0))))
(define-cmacro _STRING_H_ 0)
(define-cmacro safemalloc (scm-cast (begin Perl_safesysmalloc)))
(define-cmacro safecalloc (scm-cast (begin Perl_safesyscalloc)))
(define-cmacro saferealloc (scm-cast (begin Perl_safesysrealloc)))
(define-cmacro safefree (scm-cast (begin Perl_safesysfree)))
(define-cfunclike-macro CHECK_MALLOC_TOO_LATE_FOR (ch) (scm-cast (begin (cast <c-void> 0))))
(define-cfunclike-macro CHECK_MALLOC_TAINT (newval) (scm-cast (begin (cast <c-void> 0))))
(define-cfunclike-macro MALLOC_CHECK_TAINT (argc argv env) 0)
(define-cfunclike-macro MALLOC_CHECK_TAINT2 (argc argv) 0)
(define-cfunclike-macro memzero (d l) (scm-cast (begin (memset d 0 l))))
(define-cmacro _NETINET_IN_H_ 0)
(define-cmacro _SYS_SOCKET_H_ 0)
(define-cmacro _SA_FAMILY_T 0)
(define-cmacro _SOCKLEN_T 0)
(define-cmacro _STRUCT_IOVEC 0)
(define-cmacro SOCK_STREAM 1)
(define-cmacro SOCK_DGRAM 2)
(define-cmacro SOCK_RAW 3)
(define-cmacro SOCK_RDM 4)
(define-cmacro SOCK_SEQPACKET 5)
(define-cmacro SO_DEBUG 1)
(define-cmacro SO_ACCEPTCONN 2)
(define-cmacro SO_REUSEADDR 4)
(define-cmacro SO_KEEPALIVE 8)
(define-cmacro SO_DONTROUTE 16)
(define-cmacro SO_BROADCAST 32)
(define-cmacro SO_USELOOPBACK 64)
(define-cmacro SO_LINGER 128)
(define-cmacro SO_OOBINLINE 256)
(define-cmacro SO_REUSEPORT 512)
(define-cmacro SO_TIMESTAMP 1024)
(define-cmacro SO_DONTTRUNC 8192)
(define-cmacro SO_WANTMORE 16384)
(define-cmacro SO_WANTOOBFLAG 32768)
(define-cmacro SO_SNDBUF 4097)
(define-cmacro SO_RCVBUF 4098)
(define-cmacro SO_SNDLOWAT 4099)
(define-cmacro SO_RCVLOWAT 4100)
(define-cmacro SO_SNDTIMEO 4101)
(define-cmacro SO_RCVTIMEO 4102)
(define-cmacro SO_ERROR 4103)
(define-cmacro SO_TYPE 4104)
(define-cmacro SO_NREAD 4128)
(define-cmacro SO_NKE 4129)
(define-cmacro SO_NOSIGPIPE 4130)
(define-cmacro SO_NOADDRERR 4131)
(define-cmacro SO_NWRITE 4132)
(define-cmacro SO_LINGER_SEC 4224)
(define-cmacro SOL_SOCKET 65535)
(define-cmacro AF_UNSPEC 0)
(define-cmacro AF_UNIX 1)
(define-cmacro AF_LOCAL 1)
(define-cmacro AF_INET 2)
(define-cmacro AF_IMPLINK 3)
(define-cmacro AF_PUP 4)
(define-cmacro AF_CHAOS 5)
(define-cmacro AF_NS 6)
(define-cmacro AF_ISO 7)
(define-cmacro AF_OSI 7)
(define-cmacro AF_ECMA 8)
(define-cmacro AF_DATAKIT 9)
(define-cmacro AF_CCITT 10)
(define-cmacro AF_SNA 11)
(define-cmacro AF_DECnet 12)
(define-cmacro AF_DLI 13)
(define-cmacro AF_LAT 14)
(define-cmacro AF_HYLINK 15)
(define-cmacro AF_APPLETALK 16)
(define-cmacro AF_ROUTE 17)
(define-cmacro AF_LINK 18)
(define-cmacro pseudo_AF_XTP 19)
(define-cmacro AF_COIP 20)
(define-cmacro AF_CNT 21)
(define-cmacro pseudo_AF_RTIP 22)
(define-cmacro AF_IPX 23)
(define-cmacro AF_SIP 24)
(define-cmacro pseudo_AF_PIP 25)
(define-cmacro AF_NDRV 27)
(define-cmacro AF_ISDN 28)
(define-cmacro AF_E164 28)
(define-cmacro pseudo_AF_KEY 29)
(define-cmacro AF_INET6 30)
(define-cmacro AF_NATM 31)
(define-cmacro AF_SYSTEM 32)
(define-cmacro AF_NETBIOS 33)
(define-cmacro AF_PPP 34)
(define-cmacro pseudo_AF_HDRCMPLT 35)
(define-cmacro AF_RESERVED_36 36)
(define-cmacro AF_MAX 37)
(define-cmacro SOCK_MAXADDRLEN 255)
(define-cmacro _SS_MAXSIZE 128)
(define-cmacro _SS_ALIGNSIZE (scm-cast (begin (c-sizeof <__int64_t>))))
(define-cmacro _SS_PAD1SIZE (scm-cast (begin (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))))))
(define-cmacro _SS_PAD2SIZE (scm-cast (begin (if (is-a? (if (is-a? (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) <c-ptr>) (c-ptr- (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))))) (- (cast <real> (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>))))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>))))))) <c-ptr>) (c-ptr- (if (is-a? (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) <c-ptr>) (c-ptr- (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))))) (- (cast <real> (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>))))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>))))))) (cast <real> (c-sizeof <__int64_t>))) (- (cast <real> (if (is-a? (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) <c-ptr>) (c-ptr- (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))))) (- (cast <real> (if (is-a? (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? 128 <c-ptr>) (c-ptr- 128 (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> 128) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>))))) (cast <real> (if (is-a? (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) <c-ptr>) (c-ptr- (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>)))) (cast <real> (c-sizeof <sa_family_t>))) (- (cast <real> (if (is-a? (c-sizeof <__int64_t>) <c-ptr>) (c-ptr- (c-sizeof <__int64_t>) (cast <real> (c-sizeof <__uint8_t>))) (- (cast <real> (c-sizeof <__int64_t>)) (cast <real> (c-sizeof <__uint8_t>))))) (cast <real> (c-sizeof <sa_family_t>)))))))) (cast <real> (c-sizeof <__int64_t>)))))))
(define-cmacro PF_UNSPEC 0)
(define-cmacro PF_LOCAL 1)
(define-cmacro PF_UNIX 1)
(define-cmacro PF_INET 2)
(define-cmacro PF_IMPLINK 3)
(define-cmacro PF_PUP 4)
(define-cmacro PF_CHAOS 5)
(define-cmacro PF_NS 6)
(define-cmacro PF_ISO 7)
(define-cmacro PF_OSI 7)
(define-cmacro PF_ECMA 8)
(define-cmacro PF_DATAKIT 9)
(define-cmacro PF_CCITT 10)
(define-cmacro PF_SNA 11)
(define-cmacro PF_DECnet 12)
(define-cmacro PF_DLI 13)
(define-cmacro PF_LAT 14)
(define-cmacro PF_HYLINK 15)
(define-cmacro PF_APPLETALK 16)
(define-cmacro PF_ROUTE 17)
(define-cmacro PF_LINK 18)
(define-cmacro PF_XTP 19)
(define-cmacro PF_COIP 20)
(define-cmacro PF_CNT 21)
(define-cmacro PF_SIP 24)
(define-cmacro PF_IPX 23)
(define-cmacro PF_RTIP 22)
(define-cmacro PF_PIP 25)
(define-cmacro PF_NDRV 27)
(define-cmacro PF_ISDN 28)
(define-cmacro PF_KEY 29)
(define-cmacro PF_INET6 30)
(define-cmacro PF_NATM 31)
(define-cmacro PF_SYSTEM 32)
(define-cmacro PF_NETBIOS 33)
(define-cmacro PF_PPP 34)
(define-cmacro PF_RESERVED_36 36)
(define-cmacro PF_MAX 37)
(define-cmacro PF_VLAN (scm-cast (begin (cast <uint32_t> 1986814318))))
(define-cmacro PF_BOND (scm-cast (begin (cast <uint32_t> 1651469924))))
(define-cmacro NET_MAXID 37)
(define-cmacro NET_RT_DUMP 1)
(define-cmacro NET_RT_FLAGS 2)
(define-cmacro NET_RT_IFLIST 3)
(define-cmacro NET_RT_STAT 4)
(define-cmacro NET_RT_TRASH 5)
(define-cmacro NET_RT_IFLIST2 6)
(define-cmacro NET_RT_DUMP2 7)
(define-cmacro NET_RT_MAXID 8)
(define-cmacro SOMAXCONN 128)
(define-cmacro MSG_OOB 1)
(define-cmacro MSG_PEEK 2)
(define-cmacro MSG_DONTROUTE 4)
(define-cmacro MSG_EOR 8)
(define-cmacro MSG_TRUNC 16)
(define-cmacro MSG_CTRUNC 32)
(define-cmacro MSG_WAITALL 64)
(define-cmacro MSG_DONTWAIT 128)
(define-cmacro MSG_EOF 256)
(define-cmacro MSG_WAITSTREAM 512)
(define-cmacro MSG_FLUSH 1024)
(define-cmacro MSG_HOLD 2048)
(define-cmacro MSG_SEND 4096)
(define-cmacro MSG_HAVEMORE 8192)
(define-cmacro MSG_RCVMORE 16384)
(define-cmacro MSG_COMPAT 32768)
(define-cmacro MSG_NEEDSA 65536)
(define-cfunclike-macro CMSG_DATA (cmsg) (scm-cast (begin (if (is-a? (cast (ptr <c-uchar>) (identity cmsg)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (identity cmsg)) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) <c-ptr>) (c-ptr+ (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) 3) (+ (cast <real> (cast <c-uint> (c-sizeof (c-struct 'cmsghdr)))) 3))) -4))) (+ (cast <real> (cast (ptr <c-uchar>) (identity cmsg))) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) <c-ptr>) (c-ptr+ (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) 3) (+ (cast <real> (cast <c-uint> (c-sizeof (c-struct 'cmsghdr)))) 3))) -4)))))))
(define-cfunclike-macro CMSG_NXTHDR (mhdr cmsg) (scm-cast (begin (if (eq? (cast <real> (if (> (cast <real> (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (identity cmsg)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (identity cmsg)) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) <c-ptr>) (c-ptr+ (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) 3) (+ (cast <real> (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len))) 3))) -4))) (+ (cast <real> (cast (ptr <c-uchar>) (identity cmsg))) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) <c-ptr>) (c-ptr+ (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) 3) (+ (cast <real> (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len))) 3))) -4)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (identity cmsg)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (identity cmsg)) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) <c-ptr>) (c-ptr+ (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) 3) (+ (cast <real> (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len))) 3))) -4))) (+ (cast <real> (cast (ptr <c-uchar>) (identity cmsg))) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) <c-ptr>) (c-ptr+ (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) 3) (+ (cast <real> (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len))) 3))) -4)))) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) <c-ptr>) (c-ptr+ (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) 3) (+ (cast <real> (cast <c-uint> (c-sizeof (c-struct 'cmsghdr)))) 3))) -4))) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (identity cmsg)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (identity cmsg)) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) <c-ptr>) (c-ptr+ (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) 3) (+ (cast <real> (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len))) 3))) -4))) (+ (cast <real> (cast (ptr <c-uchar>) (identity cmsg))) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) <c-ptr>) (c-ptr+ (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) 3) (+ (cast <real> (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len))) 3))) -4))))) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) <c-ptr>) (c-ptr+ (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) 3) (+ (cast <real> (cast <c-uint> (c-sizeof (c-struct 'cmsghdr)))) 3))) -4))))) (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity mhdr)) 'msg_control)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity mhdr)) 'msg_control)) (cast <real> (raw-ref (deref (identity mhdr)) 'msg_controllen))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity mhdr)) 'msg_control))) (cast <real> (raw-ref (deref (identity mhdr)) 'msg_controllen)))))) 1 0)) 0) (cast (ptr (c-struct 'cmsghdr)) (if (is-a? (cast (ptr <c-uchar>) (identity cmsg)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (identity cmsg)) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) <c-ptr>) (c-ptr+ (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) 3) (+ (cast <real> (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len))) 3))) -4))) (+ (cast <real> (cast (ptr <c-uchar>) (identity cmsg))) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) <c-ptr>) (c-ptr+ (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len)) 3) (+ (cast <real> (cast <c-uint> (raw-ref (deref (identity cmsg)) 'cmsg_len))) 3))) -4))))) (cast (ptr (c-struct 'cmsghdr)) 0)))))
(define-cfunclike-macro CMSG_FIRSTHDR (mhdr) (scm-cast (begin (cast (ptr (c-struct 'cmsghdr)) (raw-ref (deref (identity mhdr)) 'msg_control)))))
(define-cfunclike-macro CMSG_SPACE (l) (scm-cast (begin (if (is-a? (logand (cast <integer> (if (is-a? (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) <c-ptr>) (c-ptr+ (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) 3) (+ (cast <real> (cast <c-uint> (c-sizeof (c-struct 'cmsghdr)))) 3))) -4) <c-ptr>) (c-ptr+ (logand (cast <integer> (if (is-a? (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) <c-ptr>) (c-ptr+ (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) 3) (+ (cast <real> (cast <c-uint> (c-sizeof (c-struct 'cmsghdr)))) 3))) -4) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (identity l)) <c-ptr>) (c-ptr+ (cast <c-uint> (identity l)) 3) (+ (cast <real> (cast <c-uint> (identity l))) 3))) -4))) (+ (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) <c-ptr>) (c-ptr+ (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) 3) (+ (cast <real> (cast <c-uint> (c-sizeof (c-struct 'cmsghdr)))) 3))) -4)) (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (identity l)) <c-ptr>) (c-ptr+ (cast <c-uint> (identity l)) 3) (+ (cast <real> (cast <c-uint> (identity l))) 3))) -4)))))))
(define-cfunclike-macro CMSG_LEN (l) (scm-cast (begin (if (is-a? (logand (cast <integer> (if (is-a? (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) <c-ptr>) (c-ptr+ (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) 3) (+ (cast <real> (cast <c-uint> (c-sizeof (c-struct 'cmsghdr)))) 3))) -4) <c-ptr>) (c-ptr+ (logand (cast <integer> (if (is-a? (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) <c-ptr>) (c-ptr+ (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) 3) (+ (cast <real> (cast <c-uint> (c-sizeof (c-struct 'cmsghdr)))) 3))) -4) (cast <real> (identity l))) (+ (cast <real> (logand (cast <integer> (if (is-a? (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) <c-ptr>) (c-ptr+ (cast <c-uint> (c-sizeof (c-struct 'cmsghdr))) 3) (+ (cast <real> (cast <c-uint> (c-sizeof (c-struct 'cmsghdr)))) 3))) -4)) (cast <real> (identity l)))))))
(define-cmacro SCM_RIGHTS 1)
(define-cmacro SCM_TIMESTAMP 2)
(define-cmacro SCM_CREDS 3)
(define-cmacro SHUT_RD 0)
(define-cmacro SHUT_WR 1)
(define-cmacro SHUT_RDWR 2)
(define-cmacro IPPROTO_IP 0)
(define-cmacro IPPROTO_HOPOPTS 0)
(define-cmacro IPPROTO_ICMP 1)
(define-cmacro IPPROTO_IGMP 2)
(define-cmacro IPPROTO_GGP 3)
(define-cmacro IPPROTO_IPV4 4)
(define-cmacro IPPROTO_IPIP 4)
(define-cmacro IPPROTO_TCP 6)
(define-cmacro IPPROTO_ST 7)
(define-cmacro IPPROTO_EGP 8)
(define-cmacro IPPROTO_PIGP 9)
(define-cmacro IPPROTO_RCCMON 10)
(define-cmacro IPPROTO_NVPII 11)
(define-cmacro IPPROTO_PUP 12)
(define-cmacro IPPROTO_ARGUS 13)
(define-cmacro IPPROTO_EMCON 14)
(define-cmacro IPPROTO_XNET 15)
(define-cmacro IPPROTO_CHAOS 16)
(define-cmacro IPPROTO_UDP 17)
(define-cmacro IPPROTO_MUX 18)
(define-cmacro IPPROTO_MEAS 19)
(define-cmacro IPPROTO_HMP 20)
(define-cmacro IPPROTO_PRM 21)
(define-cmacro IPPROTO_IDP 22)
(define-cmacro IPPROTO_TRUNK1 23)
(define-cmacro IPPROTO_TRUNK2 24)
(define-cmacro IPPROTO_LEAF1 25)
(define-cmacro IPPROTO_LEAF2 26)
(define-cmacro IPPROTO_RDP 27)
(define-cmacro IPPROTO_IRTP 28)
(define-cmacro IPPROTO_TP 29)
(define-cmacro IPPROTO_BLT 30)
(define-cmacro IPPROTO_NSP 31)
(define-cmacro IPPROTO_INP 32)
(define-cmacro IPPROTO_SEP 33)
(define-cmacro IPPROTO_3PC 34)
(define-cmacro IPPROTO_IDPR 35)
(define-cmacro IPPROTO_XTP 36)
(define-cmacro IPPROTO_DDP 37)
(define-cmacro IPPROTO_CMTP 38)
(define-cmacro IPPROTO_TPXX 39)
(define-cmacro IPPROTO_IL 40)
(define-cmacro IPPROTO_IPV6 41)
(define-cmacro IPPROTO_SDRP 42)
(define-cmacro IPPROTO_ROUTING 43)
(define-cmacro IPPROTO_FRAGMENT 44)
(define-cmacro IPPROTO_IDRP 45)
(define-cmacro IPPROTO_RSVP 46)
(define-cmacro IPPROTO_GRE 47)
(define-cmacro IPPROTO_MHRP 48)
(define-cmacro IPPROTO_BHA 49)
(define-cmacro IPPROTO_ESP 50)
(define-cmacro IPPROTO_AH 51)
(define-cmacro IPPROTO_INLSP 52)
(define-cmacro IPPROTO_SWIPE 53)
(define-cmacro IPPROTO_NHRP 54)
(define-cmacro IPPROTO_ICMPV6 58)
(define-cmacro IPPROTO_NONE 59)
(define-cmacro IPPROTO_DSTOPTS 60)
(define-cmacro IPPROTO_AHIP 61)
(define-cmacro IPPROTO_CFTP 62)
(define-cmacro IPPROTO_HELLO 63)
(define-cmacro IPPROTO_SATEXPAK 64)
(define-cmacro IPPROTO_KRYPTOLAN 65)
(define-cmacro IPPROTO_RVD 66)
(define-cmacro IPPROTO_IPPC 67)
(define-cmacro IPPROTO_ADFS 68)
(define-cmacro IPPROTO_SATMON 69)
(define-cmacro IPPROTO_VISA 70)
(define-cmacro IPPROTO_IPCV 71)
(define-cmacro IPPROTO_CPNX 72)
(define-cmacro IPPROTO_CPHB 73)
(define-cmacro IPPROTO_WSN 74)
(define-cmacro IPPROTO_PVP 75)
(define-cmacro IPPROTO_BRSATMON 76)
(define-cmacro IPPROTO_ND 77)
(define-cmacro IPPROTO_WBMON 78)
(define-cmacro IPPROTO_WBEXPAK 79)
(define-cmacro IPPROTO_EON 80)
(define-cmacro IPPROTO_VMTP 81)
(define-cmacro IPPROTO_SVMTP 82)
(define-cmacro IPPROTO_VINES 83)
(define-cmacro IPPROTO_TTP 84)
(define-cmacro IPPROTO_IGP 85)
(define-cmacro IPPROTO_DGP 86)
(define-cmacro IPPROTO_TCF 87)
(define-cmacro IPPROTO_IGRP 88)
(define-cmacro IPPROTO_OSPFIGP 89)
(define-cmacro IPPROTO_SRPC 90)
(define-cmacro IPPROTO_LARP 91)
(define-cmacro IPPROTO_MTP 92)
(define-cmacro IPPROTO_AX25 93)
(define-cmacro IPPROTO_IPEIP 94)
(define-cmacro IPPROTO_MICP 95)
(define-cmacro IPPROTO_SCCSP 96)
(define-cmacro IPPROTO_ETHERIP 97)
(define-cmacro IPPROTO_ENCAP 98)
(define-cmacro IPPROTO_APES 99)
(define-cmacro IPPROTO_GMTP 100)
(define-cmacro IPPROTO_IPCOMP 108)
(define-cmacro IPPROTO_PIM 103)
(define-cmacro IPPROTO_PGM 113)
(define-cmacro IPPROTO_DIVERT 254)
(define-cmacro IPPROTO_RAW 255)
(define-cmacro IPPROTO_MAX 256)
(define-cmacro IPPROTO_DONE 257)
(define-cmacro __DARWIN_IPPORT_RESERVED 1024)
(define-cmacro IPPORT_RESERVED 1024)
(define-cmacro IPPORT_USERRESERVED 5000)
(define-cmacro IPPORT_HIFIRSTAUTO 49152)
(define-cmacro IPPORT_HILASTAUTO 65535)
(define-cmacro IPPORT_RESERVEDSTART 600)
(define-cmacro INADDR_ANY (scm-cast (begin (cast <u_int32_t> 0))))
(define-cmacro INADDR_BROADCAST (scm-cast (begin (cast <u_int32_t> 4294967295))))
(define-cfunclike-macro IN_CLASSA (i) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (cast <u_int32_t> (identity i))) 2147483648)) 0) 1 0))))
(define-cmacro IN_CLASSA_NET 4278190080)
(define-cmacro IN_CLASSA_NSHIFT 24)
(define-cmacro IN_CLASSA_HOST 16777215)
(define-cmacro IN_CLASSA_MAX 128)
(define-cfunclike-macro IN_CLASSB (i) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (cast <u_int32_t> (identity i))) 3221225472)) 2147483648) 1 0))))
(define-cmacro IN_CLASSB_NET 4294901760)
(define-cmacro IN_CLASSB_NSHIFT 16)
(define-cmacro IN_CLASSB_HOST 65535)
(define-cmacro IN_CLASSB_MAX 65536)
(define-cfunclike-macro IN_CLASSC (i) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (cast <u_int32_t> (identity i))) 3758096384)) 3221225472) 1 0))))
(define-cmacro IN_CLASSC_NET 4294967040)
(define-cmacro IN_CLASSC_NSHIFT 8)
(define-cmacro IN_CLASSC_HOST 255)
(define-cfunclike-macro IN_CLASSD (i) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (cast <u_int32_t> (identity i))) 4026531840)) 3758096384) 1 0))))
(define-cmacro IN_CLASSD_NET 4026531840)
(define-cmacro IN_CLASSD_NSHIFT 28)
(define-cmacro IN_CLASSD_HOST 268435455)
(define-cfunclike-macro IN_MULTICAST (i) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (cast <u_int32_t> (identity i))) 4026531840)) 3758096384) 1 0))))
(define-cfunclike-macro IN_EXPERIMENTAL (i) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (cast <u_int32_t> (identity i))) 4026531840)) 4026531840) 1 0))))
(define-cfunclike-macro IN_BADCLASS (i) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (cast <u_int32_t> (identity i))) 4026531840)) 4026531840) 1 0))))
(define-cmacro INADDR_LOOPBACK (scm-cast (begin (cast <u_int32_t> 2130706433))))
(define-cmacro INADDR_NONE 4294967295)
(define-cmacro INADDR_UNSPEC_GROUP (scm-cast (begin (cast <u_int32_t> 3758096384))))
(define-cmacro INADDR_ALLHOSTS_GROUP (scm-cast (begin (cast <u_int32_t> 3758096385))))
(define-cmacro INADDR_ALLRTRS_GROUP (scm-cast (begin (cast <u_int32_t> 3758096386))))
(define-cmacro INADDR_MAX_LOCAL_GROUP (scm-cast (begin (cast <u_int32_t> 3758096639))))
(define-cmacro IN_LINKLOCALNETNUM (scm-cast (begin (cast <u_int32_t> 2851995648))))
(define-cfunclike-macro IN_LINKLOCAL (i) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (cast <u_int32_t> (identity i))) 4294901760)) (cast <real> (cast <u_int32_t> 2851995648))) 1 0))))
(define-cmacro IN_LOOPBACKNET 127)
(define-cmacro INET_ADDRSTRLEN 16)
(define-cmacro IP_OPTIONS 1)
(define-cmacro IP_HDRINCL 2)
(define-cmacro IP_TOS 3)
(define-cmacro IP_TTL 4)
(define-cmacro IP_RECVOPTS 5)
(define-cmacro IP_RECVRETOPTS 6)
(define-cmacro IP_RECVDSTADDR 7)
(define-cmacro IP_RETOPTS 8)
(define-cmacro IP_MULTICAST_IF 9)
(define-cmacro IP_MULTICAST_TTL 10)
(define-cmacro IP_MULTICAST_LOOP 11)
(define-cmacro IP_ADD_MEMBERSHIP 12)
(define-cmacro IP_DROP_MEMBERSHIP 13)
(define-cmacro IP_MULTICAST_VIF 14)
(define-cmacro IP_RSVP_ON 15)
(define-cmacro IP_RSVP_OFF 16)
(define-cmacro IP_RSVP_VIF_ON 17)
(define-cmacro IP_RSVP_VIF_OFF 18)
(define-cmacro IP_PORTRANGE 19)
(define-cmacro IP_RECVIF 20)
(define-cmacro IP_IPSEC_POLICY 21)
(define-cmacro IP_FAITH 22)
(define-cmacro IP_STRIPHDR 23)
(define-cmacro IP_RECVTTL 24)
(define-cmacro IP_FW_ADD 40)
(define-cmacro IP_FW_DEL 41)
(define-cmacro IP_FW_FLUSH 42)
(define-cmacro IP_FW_ZERO 43)
(define-cmacro IP_FW_GET 44)
(define-cmacro IP_FW_RESETLOG 45)
(define-cmacro IP_OLD_FW_ADD 50)
(define-cmacro IP_OLD_FW_DEL 51)
(define-cmacro IP_OLD_FW_FLUSH 52)
(define-cmacro IP_OLD_FW_ZERO 53)
(define-cmacro IP_OLD_FW_GET 54)
(define-cmacro IP_NAT__XXX 55)
(define-cmacro IP_OLD_FW_RESETLOG 56)
(define-cmacro IP_DUMMYNET_CONFIGURE 60)
(define-cmacro IP_DUMMYNET_DEL 61)
(define-cmacro IP_DUMMYNET_FLUSH 62)
(define-cmacro IP_DUMMYNET_GET 64)
(define-cmacro IP_DEFAULT_MULTICAST_TTL 1)
(define-cmacro IP_DEFAULT_MULTICAST_LOOP 1)
(define-cmacro IP_MAX_MEMBERSHIPS 20)
(define-cmacro IP_PORTRANGE_DEFAULT 0)
(define-cmacro IP_PORTRANGE_HIGH 1)
(define-cmacro IP_PORTRANGE_LOW 2)
(define-cmacro IPPROTO_MAXID 52)
(define-cmacro IPCTL_FORWARDING 1)
(define-cmacro IPCTL_SENDREDIRECTS 2)
(define-cmacro IPCTL_DEFTTL 3)
(define-cmacro IPCTL_RTEXPIRE 5)
(define-cmacro IPCTL_RTMINEXPIRE 6)
(define-cmacro IPCTL_RTMAXCACHE 7)
(define-cmacro IPCTL_SOURCEROUTE 8)
(define-cmacro IPCTL_DIRECTEDBROADCAST 9)
(define-cmacro IPCTL_INTRQMAXLEN 10)
(define-cmacro IPCTL_INTRQDROPS 11)
(define-cmacro IPCTL_STATS 12)
(define-cmacro IPCTL_ACCEPTSOURCEROUTE 13)
(define-cmacro IPCTL_FASTFORWARDING 14)
(define-cmacro IPCTL_KEEPFAITH 15)
(define-cmacro IPCTL_GIF_TTL 16)
(define-cmacro IPCTL_MAXID 17)
(define-cmacro _NETINET6_IN6_H_ 0)
(define-cmacro __KAME__ 0)
(define-cmacro __KAME_VERSION "20010528/apple-darwin")
(define-cmacro IPV6PORT_RESERVED 1024)
(define-cmacro IPV6PORT_ANONMIN 49152)
(define-cmacro IPV6PORT_ANONMAX 65535)
(define-cmacro IPV6PORT_RESERVEDMIN 600)
(define-cmacro IPV6PORT_RESERVEDMAX 1023)
(define-cmacro INET6_ADDRSTRLEN 46)
(define-cmacro SIN6_LEN 0)
(define-cfunclike-macro IN6_ARE_ADDR_EQUAL (a b) (scm-cast (begin (if (equal? (cast <real> (memcmp (ptr (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 0)) (ptr (ref (raw-ref (raw-ref (deref (identity b)) '__u6_addr) '__u6_addr8) 0)) (c-sizeof (c-struct 'in6_addr)))) 0) 1 0))))
(define-cfunclike-macro IN6_IS_ADDR_UNSPECIFIED (a) (scm-cast (begin (let ((G422 (cast <real> (let ((G421 (cast <real> (let ((G420 (cast <real> (if (equal? (cast <real> (deref (cast (ptr <__uint32_t>) (cast (ptr <c-void>) (ptr (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 0)))))) 0) 1 0)))) (if (eq? G420 0) G420 (if (equal? (cast <real> (deref (cast (ptr <__uint32_t>) (cast (ptr <c-void>) (ptr (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 4)))))) 0) 1 0)))))) (if (eq? G421 0) G421 (if (equal? (cast <real> (deref (cast (ptr <__uint32_t>) (cast (ptr <c-void>) (ptr (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 8)))))) 0) 1 0)))))) (if (eq? G422 0) G422 (if (equal? (cast <real> (deref (cast (ptr <__uint32_t>) (cast (ptr <c-void>) (ptr (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 12)))))) 0) 1 0))))))
(define-cmacro __IPV6_ADDR_SCOPE_NODELOCAL 1)
(define-cmacro __IPV6_ADDR_SCOPE_LINKLOCAL 2)
(define-cmacro __IPV6_ADDR_SCOPE_SITELOCAL 5)
(define-cmacro __IPV6_ADDR_SCOPE_ORGLOCAL 8)
(define-cmacro __IPV6_ADDR_SCOPE_GLOBAL 14)
(define-cfunclike-macro IN6_IS_ADDR_LINKLOCAL (a) (scm-cast (begin (let ((G429 (cast <real> (if (equal? (cast <real> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 0)) 254) 1 0)))) (if (eq? G429 0) G429 (if (equal? (cast <real> (logand (cast <integer> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 1)) 192)) 128) 1 0))))))
(define-cfunclike-macro IN6_IS_ADDR_SITELOCAL (a) (scm-cast (begin (let ((G430 (cast <real> (if (equal? (cast <real> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 0)) 254) 1 0)))) (if (eq? G430 0) G430 (if (equal? (cast <real> (logand (cast <integer> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 1)) 192)) 192) 1 0))))))
(define-cfunclike-macro IN6_IS_ADDR_MULTICAST (a) (scm-cast (begin (if (equal? (cast <real> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 0)) 255) 1 0))))
(define-cfunclike-macro __IPV6_ADDR_MC_SCOPE (a) (scm-cast (begin (logand (cast <integer> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 1)) 15))))
(define-cfunclike-macro IN6_IS_ADDR_MC_NODELOCAL (a) (scm-cast (begin (let ((G431 (cast <real> (if (equal? (cast <real> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 0)) 255) 1 0)))) (if (eq? G431 0) G431 (if (equal? (cast <real> (logand (cast <integer> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 1)) 15)) 1) 1 0))))))
(define-cfunclike-macro IN6_IS_ADDR_MC_LINKLOCAL (a) (scm-cast (begin (let ((G432 (cast <real> (if (equal? (cast <real> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 0)) 255) 1 0)))) (if (eq? G432 0) G432 (if (equal? (cast <real> (logand (cast <integer> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 1)) 15)) 2) 1 0))))))
(define-cfunclike-macro IN6_IS_ADDR_MC_SITELOCAL (a) (scm-cast (begin (let ((G433 (cast <real> (if (equal? (cast <real> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 0)) 255) 1 0)))) (if (eq? G433 0) G433 (if (equal? (cast <real> (logand (cast <integer> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 1)) 15)) 5) 1 0))))))
(define-cfunclike-macro IN6_IS_ADDR_MC_ORGLOCAL (a) (scm-cast (begin (let ((G434 (cast <real> (if (equal? (cast <real> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 0)) 255) 1 0)))) (if (eq? G434 0) G434 (if (equal? (cast <real> (logand (cast <integer> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 1)) 15)) 8) 1 0))))))
(define-cfunclike-macro IN6_IS_ADDR_MC_GLOBAL (a) (scm-cast (begin (let ((G435 (cast <real> (if (equal? (cast <real> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 0)) 255) 1 0)))) (if (eq? G435 0) G435 (if (equal? (cast <real> (logand (cast <integer> (ref (raw-ref (raw-ref (deref (identity a)) '__u6_addr) '__u6_addr8) 1)) 15)) 14) 1 0))))))
(define-cmacro IPV6_SOCKOPT_RESERVED1 3)
(define-cmacro IPV6_UNICAST_HOPS 4)
(define-cmacro IPV6_MULTICAST_IF 9)
(define-cmacro IPV6_MULTICAST_HOPS 10)
(define-cmacro IPV6_MULTICAST_LOOP 11)
(define-cmacro IPV6_JOIN_GROUP 12)
(define-cmacro IPV6_LEAVE_GROUP 13)
(define-cmacro IPV6_PORTRANGE 14)
(define-cmacro ICMP6_FILTER 18)
(define-cmacro IPV6_PKTINFO 19)
(define-cmacro IPV6_HOPLIMIT 20)
(define-cmacro IPV6_NEXTHOP 21)
(define-cmacro IPV6_HOPOPTS 22)
(define-cmacro IPV6_DSTOPTS 23)
(define-cmacro IPV6_RTHDR 24)
(define-cmacro IPV6_PKTOPTIONS 25)
(define-cmacro IPV6_CHECKSUM 26)
(define-cmacro IPV6_V6ONLY 27)
(define-cmacro IPV6_BINDV6ONLY 27)
(define-cmacro IPV6_IPSEC_POLICY 28)
(define-cmacro IPV6_FAITH 29)
(define-cmacro IPV6_FW_ADD 30)
(define-cmacro IPV6_FW_DEL 31)
(define-cmacro IPV6_FW_FLUSH 32)
(define-cmacro IPV6_FW_ZERO 33)
(define-cmacro IPV6_FW_GET 34)
(define-cmacro IPV6_RTHDR_LOOSE 0)
(define-cmacro IPV6_RTHDR_STRICT 1)
(define-cmacro IPV6_RTHDR_TYPE_0 0)
(define-cmacro IPV6_DEFAULT_MULTICAST_HOPS 1)
(define-cmacro IPV6_DEFAULT_MULTICAST_LOOP 1)
(define-cmacro IPV6_PORTRANGE_DEFAULT 0)
(define-cmacro IPV6_PORTRANGE_HIGH 1)
(define-cmacro IPV6_PORTRANGE_LOW 2)
(define-cmacro IPV6PROTO_MAXID 104)
(define-cmacro IPV6CTL_FORWARDING 1)
(define-cmacro IPV6CTL_SENDREDIRECTS 2)
(define-cmacro IPV6CTL_DEFHLIM 3)
(define-cmacro IPV6CTL_FORWSRCRT 5)
(define-cmacro IPV6CTL_STATS 6)
(define-cmacro IPV6CTL_MRTSTATS 7)
(define-cmacro IPV6CTL_MRTPROTO 8)
(define-cmacro IPV6CTL_MAXFRAGPACKETS 9)
(define-cmacro IPV6CTL_SOURCECHECK 10)
(define-cmacro IPV6CTL_SOURCECHECK_LOGINT 11)
(define-cmacro IPV6CTL_ACCEPT_RTADV 12)
(define-cmacro IPV6CTL_KEEPFAITH 13)
(define-cmacro IPV6CTL_LOG_INTERVAL 14)
(define-cmacro IPV6CTL_HDRNESTLIMIT 15)
(define-cmacro IPV6CTL_DAD_COUNT 16)
(define-cmacro IPV6CTL_AUTO_FLOWLABEL 17)
(define-cmacro IPV6CTL_DEFMCASTHLIM 18)
(define-cmacro IPV6CTL_GIF_HLIM 19)
(define-cmacro IPV6CTL_KAME_VERSION 20)
(define-cmacro IPV6CTL_USE_DEPRECATED 21)
(define-cmacro IPV6CTL_RR_PRUNE 22)
(define-cmacro IPV6CTL_V6ONLY 24)
(define-cmacro IPV6CTL_RTEXPIRE 25)
(define-cmacro IPV6CTL_RTMINEXPIRE 26)
(define-cmacro IPV6CTL_RTMAXCACHE 27)
(define-cmacro IPV6CTL_USETEMPADDR 32)
(define-cmacro IPV6CTL_TEMPPLTIME 33)
(define-cmacro IPV6CTL_TEMPVLTIME 34)
(define-cmacro IPV6CTL_AUTO_LINKLOCAL 35)
(define-cmacro IPV6CTL_RIP6STATS 36)
(define-cmacro IPV6CTL_MAXFRAGS 41)
(define-cmacro IPV6CTL_MAXID 42)
(define-cmacro _INET_H_ 0)
(define-cmacro _SYS_STAT_H_ 0)
(define-cmacro S_IFMT 61440)
(define-cmacro S_IFIFO 4096)
(define-cmacro S_IFCHR 8192)
(define-cmacro S_IFDIR 16384)
(define-cmacro S_IFBLK 24576)
(define-cmacro S_IFREG 32768)
(define-cmacro S_IFLNK 40960)
(define-cmacro S_IFSOCK 49152)
(define-cmacro S_IFWHT 57344)
(define-cmacro S_IFXATTR 65536)
(define-cmacro S_IRWXU 448)
(define-cmacro S_IRUSR 256)
(define-cmacro S_IWUSR 128)
(define-cmacro S_IXUSR 64)
(define-cmacro S_IRWXG 56)
(define-cmacro S_IRGRP 32)
(define-cmacro S_IWGRP 16)
(define-cmacro S_IXGRP 8)
(define-cmacro S_IRWXO 7)
(define-cmacro S_IROTH 4)
(define-cmacro S_IWOTH 2)
(define-cmacro S_IXOTH 1)
(define-cmacro S_ISUID 2048)
(define-cmacro S_ISGID 1024)
(define-cmacro S_ISVTX 512)
(define-cmacro S_ISTXT 512)
(define-cmacro S_IREAD 256)
(define-cmacro S_IWRITE 128)
(define-cmacro S_IEXEC 64)
(define-cfunclike-macro S_ISBLK (m) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity m)) 61440)) 24576) 1 0))))
(define-cfunclike-macro S_ISCHR (m) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity m)) 61440)) 8192) 1 0))))
(define-cfunclike-macro S_ISDIR (m) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity m)) 61440)) 16384) 1 0))))
(define-cfunclike-macro S_ISFIFO (m) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity m)) 61440)) 4096) 1 0))))
(define-cfunclike-macro S_ISREG (m) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity m)) 61440)) 32768) 1 0))))
(define-cfunclike-macro S_ISLNK (m) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity m)) 61440)) 40960) 1 0))))
(define-cfunclike-macro S_ISSOCK (m) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity m)) 61440)) 49152) 1 0))))
(define-cfunclike-macro S_ISWHT (m) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity m)) 61440)) 57344) 1 0))))
(define-cfunclike-macro S_ISXATTR (m) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (identity m)) 65536)) 65536) 1 0))))
(define-cfunclike-macro S_TYPEISMQ (buf) 0)
(define-cfunclike-macro S_TYPEISSEM (buf) 0)
(define-cfunclike-macro S_TYPEISSHM (buf) 0)
(define-cfunclike-macro S_TYPEISTMO (buf) 0)
(define-cmacro ACCESSPERMS 511)
(define-cmacro ALLPERMS 4095)
(define-cmacro DEFFILEMODE 438)
(define-cmacro S_BLKSIZE 512)
(define-cmacro UF_SETTABLE 65535)
(define-cmacro UF_NODUMP 1)
(define-cmacro UF_IMMUTABLE 2)
(define-cmacro UF_APPEND 4)
(define-cmacro UF_OPAQUE 8)
(define-cmacro SF_SETTABLE 4294901760)
(define-cmacro SF_ARCHIVED 65536)
(define-cmacro SF_IMMUTABLE 131072)
(define-cmacro SF_APPEND 262144)
(define-cmacro _FILESEC_T 0)
(define-cmacro _SYS_TIMES_H_ 0)
(define-cmacro _SYS_ERRNO_H_ 0)
(define-cmacro EPERM 1)
(define-cmacro ENOENT 2)
(define-cmacro ESRCH 3)
(define-cmacro EINTR 4)
(define-cmacro EIO 5)
(define-cmacro ENXIO 6)
(define-cmacro E2BIG 7)
(define-cmacro ENOEXEC 8)
(define-cmacro EBADF 9)
(define-cmacro ECHILD 10)
(define-cmacro EDEADLK 11)
(define-cmacro ENOMEM 12)
(define-cmacro EACCES 13)
(define-cmacro EFAULT 14)
(define-cmacro ENOTBLK 15)
(define-cmacro EBUSY 16)
(define-cmacro EEXIST 17)
(define-cmacro EXDEV 18)
(define-cmacro ENODEV 19)
(define-cmacro ENOTDIR 20)
(define-cmacro EISDIR 21)
(define-cmacro EINVAL 22)
(define-cmacro ENFILE 23)
(define-cmacro EMFILE 24)
(define-cmacro ENOTTY 25)
(define-cmacro ETXTBSY 26)
(define-cmacro EFBIG 27)
(define-cmacro ENOSPC 28)
(define-cmacro ESPIPE 29)
(define-cmacro EROFS 30)
(define-cmacro EMLINK 31)
(define-cmacro EPIPE 32)
(define-cmacro EDOM 33)
(define-cmacro ERANGE 34)
(define-cmacro EAGAIN 35)
(define-cmacro EWOULDBLOCK 35)
(define-cmacro EINPROGRESS 36)
(define-cmacro EALREADY 37)
(define-cmacro ENOTSOCK 38)
(define-cmacro EDESTADDRREQ 39)
(define-cmacro EMSGSIZE 40)
(define-cmacro EPROTOTYPE 41)
(define-cmacro ENOPROTOOPT 42)
(define-cmacro EPROTONOSUPPORT 43)
(define-cmacro ESOCKTNOSUPPORT 44)
(define-cmacro ENOTSUP 45)
(define-cmacro EOPNOTSUPP 45)
(define-cmacro EPFNOSUPPORT 46)
(define-cmacro EAFNOSUPPORT 47)
(define-cmacro EADDRINUSE 48)
(define-cmacro EADDRNOTAVAIL 49)
(define-cmacro ENETDOWN 50)
(define-cmacro ENETUNREACH 51)
(define-cmacro ENETRESET 52)
(define-cmacro ECONNABORTED 53)
(define-cmacro ECONNRESET 54)
(define-cmacro ENOBUFS 55)
(define-cmacro EISCONN 56)
(define-cmacro ENOTCONN 57)
(define-cmacro ESHUTDOWN 58)
(define-cmacro ETOOMANYREFS 59)
(define-cmacro ETIMEDOUT 60)
(define-cmacro ECONNREFUSED 61)
(define-cmacro ELOOP 62)
(define-cmacro ENAMETOOLONG 63)
(define-cmacro EHOSTDOWN 64)
(define-cmacro EHOSTUNREACH 65)
(define-cmacro ENOTEMPTY 66)
(define-cmacro EPROCLIM 67)
(define-cmacro EUSERS 68)
(define-cmacro EDQUOT 69)
(define-cmacro ESTALE 70)
(define-cmacro EREMOTE 71)
(define-cmacro EBADRPC 72)
(define-cmacro ERPCMISMATCH 73)
(define-cmacro EPROGUNAVAIL 74)
(define-cmacro EPROGMISMATCH 75)
(define-cmacro EPROCUNAVAIL 76)
(define-cmacro ENOLCK 77)
(define-cmacro ENOSYS 78)
(define-cmacro EFTYPE 79)
(define-cmacro EAUTH 80)
(define-cmacro ENEEDAUTH 81)
(define-cmacro EPWROFF 82)
(define-cmacro EDEVERR 83)
(define-cmacro EOVERFLOW 84)
(define-cmacro EBADEXEC 85)
(define-cmacro EBADARCH 86)
(define-cmacro ESHLIBVERS 87)
(define-cmacro EBADMACHO 88)
(define-cmacro ECANCELED 89)
(define-cmacro EIDRM 90)
(define-cmacro ENOMSG 91)
(define-cmacro EILSEQ 92)
(define-cmacro ENOATTR 93)
(define-cmacro EBADMSG 94)
(define-cmacro EMULTIHOP 95)
(define-cmacro ENODATA 96)
(define-cmacro ENOLINK 97)
(define-cmacro ENOSR 98)
(define-cmacro ENOSTR 99)
(define-cmacro EPROTO 100)
(define-cmacro ETIME 101)
(define-cmacro ELAST 102)
(define-cmacro _NETDB_H_ 0)
(define-cmacro _PATH_HEQUIV "/etc/hosts.equiv")
(define-cmacro _PATH_HOSTS "/etc/hosts")
(define-cmacro _PATH_NETWORKS "/etc/networks")
(define-cmacro _PATH_PROTOCOLS "/etc/protocols")
(define-cmacro _PATH_SERVICES "/etc/services")
(define-cmacro NETDB_INTERNAL -1)
(define-cmacro NETDB_SUCCESS 0)
(define-cmacro HOST_NOT_FOUND 1)
(define-cmacro TRY_AGAIN 2)
(define-cmacro NO_RECOVERY 3)
(define-cmacro NO_DATA 4)
(define-cmacro NO_ADDRESS 4)
(define-cmacro EAI_ADDRFAMILY 1)
(define-cmacro EAI_AGAIN 2)
(define-cmacro EAI_BADFLAGS 3)
(define-cmacro EAI_FAIL 4)
(define-cmacro EAI_FAMILY 5)
(define-cmacro EAI_MEMORY 6)
(define-cmacro EAI_NODATA 7)
(define-cmacro EAI_NONAME 8)
(define-cmacro EAI_SERVICE 9)
(define-cmacro EAI_SOCKTYPE 10)
(define-cmacro EAI_SYSTEM 11)
(define-cmacro EAI_BADHINTS 12)
(define-cmacro EAI_PROTOCOL 13)
(define-cmacro EAI_MAX 14)
(define-cmacro AI_PASSIVE 1)
(define-cmacro AI_CANONNAME 2)
(define-cmacro AI_NUMERICHOST 4)
(define-cmacro AI_MASK 7)
(define-cmacro AI_ALL 256)
(define-cmacro AI_V4MAPPED_CFG 512)
(define-cmacro AI_ADDRCONFIG 1024)
(define-cmacro AI_V4MAPPED 2048)
(define-cmacro AI_DEFAULT 1536)
(define-cmacro NI_MAXHOST 1025)
(define-cmacro NI_MAXSERV 32)
(define-cmacro NI_NOFQDN 1)
(define-cmacro NI_NUMERICHOST 2)
(define-cmacro NI_NAMEREQD 4)
(define-cmacro NI_NUMERICSERV 8)
(define-cmacro NI_DGRAM 16)
(define-cmacro NI_WITHSCOPEID 32)
(define-cmacro SCOPE_DELIMITER 37)
(define-cfunclike-macro SETERRNO (errcode vmserrcode) (scm-cast (begin (let ((%v (identity errcode))) (set! (deref (__error)) %v) %v))))
(define-cmacro LIB_INVARG 0)
(define-cmacro RMS_DIR 0)
(define-cmacro RMS_FAC 0)
(define-cmacro RMS_FEX 0)
(define-cmacro RMS_FNF 0)
(define-cmacro RMS_IFI 0)
(define-cmacro RMS_ISI 0)
(define-cmacro RMS_PRV 0)
(define-cmacro SS_ACCVIO 0)
(define-cmacro SS_DEVOFFLINE 0)
(define-cmacro SS_IVCHAN 0)
(define-cmacro SS_NORMAL 0)
(define-cmacro _SYS_IOCTL_H_ 0)
(define-cmacro _SYS_TTYCOM_H_ 0)
(define-cmacro _SYS_IOCCOM_H_ 0)
(define-cmacro IOCPARM_MASK 8191)
(define-cfunclike-macro IOCPARM_LEN (x) (scm-cast (begin (logand (cast <integer> (ash (cast <integer> (identity x)) (- 16))) 8191))))
(define-cfunclike-macro IOCBASECMD (x) (scm-cast (begin (logand (cast <integer> (identity x)) -536805377))))
(define-cfunclike-macro IOCGROUP (x) (scm-cast (begin (logand (cast <integer> (ash (cast <integer> (identity x)) (- 8))) 255))))
(define-cmacro IOCPARM_MAX 8192)
(define-cmacro IOC_VOID (scm-cast (begin (cast <c-ulong> 536870912))))
(define-cmacro IOC_OUT (scm-cast (begin (cast <c-ulong> 1073741824))))
(define-cmacro IOC_IN (scm-cast (begin (cast <c-ulong> 2147483648))))
(define-cmacro IOC_INOUT (scm-cast (begin (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824))))))
(define-cmacro IOC_DIRMASK (scm-cast (begin (cast <c-ulong> 3758096384))))
(define-cfunclike-macro _IOC (inout group num len) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> inout) (cast <integer> (ash (cast <integer> (logand (cast <integer> len) 8191)) 16)))) (cast <integer> (ash (cast <integer> (identity group)) 8)))) (cast <integer> (identity num))))))
(define-cfunclike-macro _IO (g n) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) (cast <integer> (ash (cast <integer> (identity g)) 8)))) (cast <integer> (identity n))))))
(define-cfunclike-macro _IOR (g n t) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (identity t))) 8191)) 16)))) (cast <integer> (ash (cast <integer> (identity g)) 8)))) (cast <integer> (identity n))))))
(define-cfunclike-macro _IOW (g n t) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (identity t))) 8191)) 16)))) (cast <integer> (ash (cast <integer> (identity g)) 8)))) (cast <integer> (identity n))))))
(define-cfunclike-macro _IOWR (g n t) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (identity t))) 8191)) 16)))) (cast <integer> (ash (cast <integer> (identity g)) 8)))) (cast <integer> (identity n))))))
(define-cmacro TIOCMODG (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 3))))
(define-cmacro TIOCMODS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 4))))
(define-cmacro TIOCM_LE 1)
(define-cmacro TIOCM_DTR 2)
(define-cmacro TIOCM_RTS 4)
(define-cmacro TIOCM_ST 8)
(define-cmacro TIOCM_SR 16)
(define-cmacro TIOCM_CTS 32)
(define-cmacro TIOCM_CAR 64)
(define-cmacro TIOCM_CD 64)
(define-cmacro TIOCM_RNG 128)
(define-cmacro TIOCM_RI 128)
(define-cmacro TIOCM_DSR 256)
(define-cmacro TIOCEXCL (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 13))))
(define-cmacro TIOCNXCL (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 14))))
(define-cmacro TIOCFLUSH (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 16))))
(define-c-struct termios)
(define-cmacro TIOCGETA (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'termios))) 8191)) 16)))) 29696)) 19))))
(define-cmacro TIOCSETA (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'termios))) 8191)) 16)))) 29696)) 20))))
(define-cmacro TIOCSETAW (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'termios))) 8191)) 16)))) 29696)) 21))))
(define-cmacro TIOCSETAF (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'termios))) 8191)) 16)))) 29696)) 22))))
(define-cmacro TIOCGETD (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 26))))
(define-cmacro TIOCSETD (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 27))))
(define-cmacro TIOCSBRK (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 123))))
(define-cmacro TIOCCBRK (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 122))))
(define-cmacro TIOCSDTR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 121))))
(define-cmacro TIOCCDTR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 120))))
(define-cmacro TIOCGPGRP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 119))))
(define-cmacro TIOCSPGRP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 118))))
(define-cmacro TIOCOUTQ (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 115))))
(define-cmacro TIOCSTI (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-char>)) 8191)) 16)))) 29696)) 114))))
(define-cmacro TIOCNOTTY (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 113))))
(define-cmacro TIOCPKT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 112))))
(define-cmacro TIOCPKT_DATA 0)
(define-cmacro TIOCPKT_FLUSHREAD 1)
(define-cmacro TIOCPKT_FLUSHWRITE 2)
(define-cmacro TIOCPKT_STOP 4)
(define-cmacro TIOCPKT_START 8)
(define-cmacro TIOCPKT_NOSTOP 16)
(define-cmacro TIOCPKT_DOSTOP 32)
(define-cmacro TIOCPKT_IOCTL 64)
(define-cmacro TIOCSTOP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 111))))
(define-cmacro TIOCSTART (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 110))))
(define-cmacro TIOCMSET (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 109))))
(define-cmacro TIOCMBIS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 108))))
(define-cmacro TIOCMBIC (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 107))))
(define-cmacro TIOCMGET (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 106))))
(define-cmacro TIOCREMOTE (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 105))))
(define-cmacro TIOCGWINSZ (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'winsize))) 8191)) 16)))) 29696)) 104))))
(define-cmacro TIOCSWINSZ (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'winsize))) 8191)) 16)))) 29696)) 103))))
(define-cmacro TIOCUCNTL (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 102))))
(define-cmacro TIOCSTAT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 101))))
(define-cfunclike-macro UIOCCMD (n) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29952)) (cast <integer> (identity n))))))
(define-cmacro TIOCSCONS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 99))))
(define-cmacro TIOCCONS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 98))))
(define-cmacro TIOCSCTTY (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 97))))
(define-cmacro TIOCEXT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 96))))
(define-cmacro TIOCSIG (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 95))))
(define-cmacro TIOCDRAIN (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 94))))
(define-cmacro TIOCMSDTRWAIT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 91))))
(define-cmacro TIOCMGDTRWAIT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 90))))
(define-cmacro TIOCTIMESTAMP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'timeval))) 8191)) 16)))) 29696)) 89))))
(define-cmacro TIOCDCDTIMESTAMP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'timeval))) 8191)) 16)))) 29696)) 88))))
(define-cmacro TIOCSDRAINWAIT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 87))))
(define-cmacro TIOCGDRAINWAIT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29696)) 86))))
(define-cmacro TIOCDSIMICROCODE (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 29696)) 85))))
(define-cmacro TTYDISC 0)
(define-cmacro TABLDISC 3)
(define-cmacro SLIPDISC 4)
(define-cmacro PPPDISC 5)
(define-cmacro TIOCGSIZE (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'winsize))) 8191)) 16)))) 29696)) 104))))
(define-cmacro TIOCSSIZE (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'winsize))) 8191)) 16)))) 29696)) 103))))
(define-cmacro _SYS_FILIO_H_ 0)
(define-cmacro FIOCLEX (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 26112)) 1))))
(define-cmacro FIONCLEX (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) 0)) 26112)) 2))))
(define-cmacro FIONREAD (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 26112)) 127))))
(define-cmacro FIONBIO (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 26112)) 126))))
(define-cmacro FIOASYNC (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 26112)) 125))))
(define-cmacro FIOSETOWN (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 26112)) 124))))
(define-cmacro FIOGETOWN (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 26112)) 123))))
(define-cmacro FIODTYPE (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 26112)) 122))))
(define-cmacro _SYS_SOCKIO_H_ 0)
(define-cmacro SIOCSHIWAT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29440)) 0))))
(define-cmacro SIOCGHIWAT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29440)) 1))))
(define-cmacro SIOCSLOWAT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29440)) 2))))
(define-cmacro SIOCGLOWAT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29440)) 3))))
(define-cmacro SIOCATMARK (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29440)) 7))))
(define-cmacro SIOCSPGRP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29440)) 8))))
(define-cmacro SIOCGPGRP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) 8191)) 16)))) 29440)) 9))))
(define-c-struct ifreq)
(define-cmacro SIOCSIFADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 12))))
(define-cmacro OSIOCGIFADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 13))))
(define-cmacro SIOCSIFDSTADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 14))))
(define-cmacro OSIOCGIFDSTADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 15))))
(define-cmacro SIOCSIFFLAGS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 16))))
(define-cmacro SIOCGIFFLAGS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 17))))
(define-cmacro OSIOCGIFBRDADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 18))))
(define-cmacro SIOCSIFBRDADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 19))))
(define-c-struct ifconf)
(define-cmacro OSIOCGIFCONF (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifconf))) 8191)) 16)))) 26880)) 20))))
(define-cmacro OSIOCGIFNETMASK (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 21))))
(define-cmacro SIOCSIFNETMASK (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 22))))
(define-cmacro SIOCGIFMETRIC (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 23))))
(define-cmacro SIOCSIFMETRIC (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 24))))
(define-cmacro SIOCDIFADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 25))))
(define-c-struct ifaliasreq)
(define-cmacro SIOCAIFADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifaliasreq))) 8191)) 16)))) 26880)) 26))))
(define-c-struct sioc_vif_req)
(define-cmacro SIOCGETVIFCNT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'sioc_vif_req))) 8191)) 16)))) 29184)) 27))))
(define-c-struct sioc_sg_req)
(define-cmacro SIOCGETSGCNT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'sioc_sg_req))) 8191)) 16)))) 29184)) 28))))
(define-c-struct if_laddrreq)
(define-cmacro SIOCALIFADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'if_laddrreq))) 8191)) 16)))) 26880)) 29))))
(define-cmacro SIOCGLIFADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'if_laddrreq))) 8191)) 16)))) 26880)) 30))))
(define-cmacro SIOCDLIFADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'if_laddrreq))) 8191)) 16)))) 26880)) 31))))
(define-cmacro SIOCGIFADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 33))))
(define-cmacro SIOCGIFDSTADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 34))))
(define-cmacro SIOCGIFBRDADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 35))))
(define-cmacro SIOCGIFCONF (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifconf))) 8191)) 16)))) 26880)) 36))))
(define-cmacro SIOCGIFNETMASK (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 37))))
(define-cmacro SIOCAUTOADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 38))))
(define-cmacro SIOCAUTONETMASK (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 39))))
(define-cmacro SIOCARPIPLL (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 40))))
(define-cmacro SIOCADDMULTI (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 49))))
(define-cmacro SIOCDELMULTI (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 50))))
(define-cmacro SIOCGIFMTU (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 51))))
(define-cmacro SIOCSIFMTU (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 52))))
(define-cmacro SIOCGIFPHYS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 53))))
(define-cmacro SIOCSIFPHYS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 54))))
(define-cmacro SIOCSIFMEDIA (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 55))))
(define-c-struct ifmediareq)
(define-cmacro SIOCGIFMEDIA (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifmediareq))) 8191)) 16)))) 26880)) 56))))
(define-cmacro SIOCSIFGENERIC (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 57))))
(define-cmacro SIOCGIFGENERIC (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 58))))
(define-c-struct rslvmulti_req)
(define-cmacro SIOCRSLVMULTI (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'rslvmulti_req))) 8191)) 16)))) 26880)) 59))))
(define-cmacro SIOCSIFLLADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 60))))
(define-c-struct ifstat)
(define-cmacro SIOCGIFSTATUS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifstat))) 8191)) 16)))) 26880)) 61))))
(define-cmacro SIOCSIFPHYADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifaliasreq))) 8191)) 16)))) 26880)) 62))))
(define-cmacro SIOCGIFPSRCADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 63))))
(define-cmacro SIOCGIFPDSTADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 64))))
(define-cmacro SIOCDIFPHYADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 65))))
(define-cmacro SIOCSLIFPHYADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'if_laddrreq))) 8191)) 16)))) 26880)) 66))))
(define-cmacro SIOCGLIFPHYADDR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'if_laddrreq))) 8191)) 16)))) 26880)) 67))))
(define-cmacro SIOCGIFDEVMTU (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 68))))
(define-cmacro SIOCSIFALTMTU (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 69))))
(define-cmacro SIOCGIFALTMTU (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 72))))
(define-cmacro SIOCSIFBOND (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 70))))
(define-cmacro SIOCGIFBOND (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 71))))
(define-cmacro SIOCIFCREATE (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 120))))
(define-cmacro SIOCIFDESTROY (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 121))))
(define-cmacro SIOCSIFVLAN (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 126))))
(define-cmacro SIOCGIFVLAN (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 127))))
(define-cmacro SIOCSETVLAN (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 126))))
(define-cmacro SIOCGETVLAN (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 127))))
(define-cmacro SIOCGIFASYNCMAP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 124))))
(define-cmacro SIOCSIFASYNCMAP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (ash (cast <integer> (logand (cast <integer> (c-sizeof (c-struct 'ifreq))) 8191)) 16)))) 26880)) 125))))
(define-cmacro htoni (scm-cast (begin htonl)))
(define-cmacro ntohi (scm-cast (begin ntohl)))
(define-cmacro _DIRENT_H_ 0)
(define-cmacro _SYS_DIRENT_H 0)
(define-cmacro __DARWIN_MAXNAMLEN 255)
(define-cmacro MAXNAMLEN 255)
(define-cmacro DT_UNKNOWN 0)
(define-cmacro DT_FIFO 1)
(define-cmacro DT_CHR 2)
(define-cmacro DT_DIR 4)
(define-cmacro DT_BLK 6)
(define-cmacro DT_REG 8)
(define-cmacro DT_LNK 10)
(define-cmacro DT_SOCK 12)
(define-cmacro DT_WHT 14)
(define-cfunclike-macro IFTODT (mode) (scm-cast (begin (ash (cast <integer> (logand (cast <integer> (identity mode)) 61440)) (- 12)))))
(define-cfunclike-macro DTTOIF (dirtype) (scm-cast (begin (ash (cast <integer> (identity dirtype)) 12))))
(define-cmacro DIRBLKSIZ 1024)
(define-cfunclike-macro dirfd (dirp) (scm-cast (begin (raw-ref (deref (identity dirp)) 'dd_fd))))
(define-cmacro DTF_HIDEW 1)
(define-cmacro DTF_NODUP 2)
(define-cmacro DTF_REWIND 4)
(define-cmacro __DTF_READALL 8)
(define-cmacro IV_MAX 2147483647)
(define-cmacro IV_MIN -2147483648)
(define-cmacro UV_MAX 4294967295)
(define-cmacro UINT32_MIN 0)
(define-cmacro UV_MIN 0)
(define-cmacro IV_DIG 5157/485)
(define-cmacro UV_DIG 5157/485)
(define-cmacro PERL_PRESERVE_IVUV 0)
(define-cfunclike-macro INT2PTR (any d) (scm-cast (begin (#f d))))
(define-cfunclike-macro PTR2IV (p) (scm-cast (begin (cast <IV> (identity p)))))
(define-cfunclike-macro PTR2UV (p) (scm-cast (begin (cast <UV> (identity p)))))
(define-cfunclike-macro PTR2NV (p) (scm-cast (begin (cast <NV> (cast <UV> (identity p))))))
(define-cfunclike-macro PTR2ul (p) (scm-cast (begin (cast <c-ulong> (identity p)))))
(define-cmacro _FLOAT_H___ 0)
(define-cmacro FLT_RADIX 2)
(define-cmacro FLT_MANT_DIG 24)
(define-cmacro DBL_MANT_DIG 53)
(define-cmacro LDBL_MANT_DIG 64)
(define-cmacro FLT_DIG 6)
(define-cmacro DBL_DIG 15)
(define-cmacro LDBL_DIG 18)
(define-cmacro FLT_MIN_EXP -125)
(define-cmacro DBL_MIN_EXP -1021)
(define-cmacro LDBL_MIN_EXP -16381)
(define-cmacro FLT_MIN_10_EXP -37)
(define-cmacro DBL_MIN_10_EXP -307)
(define-cmacro LDBL_MIN_10_EXP -4931)
(define-cmacro FLT_MAX_EXP 128)
(define-cmacro DBL_MAX_EXP 1024)
(define-cmacro LDBL_MAX_EXP 16384)
(define-cmacro FLT_MAX_10_EXP 38)
(define-cmacro DBL_MAX_10_EXP 308)
(define-cmacro LDBL_MAX_10_EXP 4932)
(define-cmacro FLT_MAX 3.40282347e38)
(define-cmacro DBL_MAX 1.7976931348623157e308)
(define-cmacro LDBL_MAX #i1/0)
(define-cmacro FLT_EPSILON 1.1920929e-7)
(define-cmacro DBL_EPSILON 2.220446049250313e-16)
(define-cmacro LDBL_EPSILON 1.0842021724855044e-19)
(define-cmacro FLT_MIN 1.17549435e-38)
(define-cmacro DBL_MIN 2.2250738585072014e-308)
(define-cmacro LDBL_MIN 0.0)
(define-cmacro FLT_ROUNDS 1)
(define-cmacro NV_DIG 15)
(define-cmacro NV_MANT_DIG 53)
(define-cmacro NV_MIN 2.2250738585072014e-308)
(define-cmacro NV_MAX 1.7976931348623157e308)
(define-cmacro NV_MIN_10_EXP -307)
(define-cmacro NV_MAX_10_EXP 308)
(define-cmacro NV_EPSILON 2.220446049250313e-16)
(define-cmacro NV_MAX 1.7976931348623157e308)
(define-cmacro NV_MIN 2.2250738585072014e-308)
(define-cmacro Perl_cos (scm-cast (begin cos)))
(define-cmacro Perl_sin (scm-cast (begin sin)))
(define-cmacro Perl_sqrt (scm-cast (begin sqrt)))
(define-cmacro Perl_exp (scm-cast (begin exp)))
(define-cmacro Perl_log (scm-cast (begin log)))
(define-cmacro Perl_atan2 (scm-cast (begin atan2)))
(define-cmacro Perl_pow (scm-cast (begin pow)))
(define-cmacro Perl_floor (scm-cast (begin floor)))
(define-cmacro Perl_ceil (scm-cast (begin ceil)))
(define-cmacro Perl_fmod (scm-cast (begin fmod)))
(define-cfunclike-macro Perl_modf (x y) (scm-cast (begin (modf x y))))
(define-cfunclike-macro Perl_frexp (x y) (scm-cast (begin (frexp x y))))
(define-cmacro __MATH_H__ 0)
(define-cmacro __MATH__ 0)
(define-cmacro __MATH_H_ALWAYS_INLINE__ 0)
(define-cmacro FP_NAN (scm-cast (begin _FP_NAN)))
(define-cmacro FP_INFINITE (scm-cast (begin _FP_INFINITE)))
(define-cmacro FP_ZERO (scm-cast (begin _FP_ZERO)))
(define-cmacro FP_NORMAL (scm-cast (begin _FP_NORMAL)))
(define-cmacro FP_SUBNORMAL (scm-cast (begin _FP_SUBNORMAL)))
(define-cmacro FP_SUPERNORMAL (scm-cast (begin _FP_SUPERNORMAL)))
(define-cmacro FP_ILOGB0 -2147483648)
(define-cmacro FP_ILOGBNAN -2147483648)
(define-cmacro MATH_ERRNO 1)
(define-cmacro MATH_ERREXCEPT 2)
(define-cfunclike-macro fpclassify (x) (scm-cast (begin (if (eq? (cast <real> (if (equal? (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-float>))) 1 0)) 0) (if (eq? (cast <real> (if (equal? (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-double>))) 1 0)) 0) (__fpclassify (cast <c-longdouble> (identity x))) (__fpclassifyd (cast <c-double> (identity x)))) (__fpclassifyf (cast <c-float> (identity x)))))))
(define-cfunclike-macro isnan (x) (scm-cast (begin (if (eq? (cast <real> (if (equal? (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-float>))) 1 0)) 0) (if (eq? (cast <real> (if (equal? (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-double>))) 1 0)) 0) (__inline_isnan (cast <c-longdouble> (identity x))) (__inline_isnand (cast <c-double> (identity x)))) (__inline_isnanf (cast <c-float> (identity x)))))))
(define-cfunclike-macro signbit (x) (scm-cast (begin (if (eq? (cast <real> (if (equal? (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-float>))) 1 0)) 0) (if (eq? (cast <real> (if (equal? (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-double>))) 1 0)) 0) (__inline_signbit (cast <c-longdouble> (identity x))) (__inline_signbitd (cast <c-double> (identity x)))) (__inline_signbitf (cast <c-float> (identity x)))))))
(define-cmacro M_E 2.718281828459045)
(define-cmacro M_LOG2E 1.4426950408889634)
(define-cmacro M_LOG10E 0.4342944819032518)
(define-cmacro M_LN2 0.6931471805599453)
(define-cmacro M_LN10 2.302585092994046)
(define-cmacro M_PI 3.141592653589793)
(define-cmacro M_PI_2 1.5707963267948966)
(define-cmacro M_PI_4 0.7853981633974483)
(define-cmacro M_1_PI 0.3183098861837907)
(define-cmacro M_2_PI 0.6366197723675814)
(define-cmacro M_2_SQRTPI 1.1283791670955126)
(define-cmacro M_SQRT2 1.4142135623730951)
(define-cmacro M_SQRT1_2 0.7071067811865476)
(define-cmacro MAXFLOAT (scm-cast (begin (cast <c-float> 3.4028234663852886e38))))
(define-cmacro __WANT_EXTENSIONS__ 0)
(define-cmacro FP_SNAN (scm-cast (begin _FP_NAN)))
(define-cmacro FP_QNAN (scm-cast (begin _FP_NAN)))
(define-cmacro HUGE (scm-cast (begin (cast <c-float> 3.4028234663852886e38))))
(define-cmacro X_TLOSS 1.414847550405688e16)
(define-cmacro DOMAIN 1)
(define-cmacro SING 2)
(define-cmacro OVERFLOW 3)
(define-cmacro UNDERFLOW 4)
(define-cmacro TLOSS 5)
(define-cmacro PLOSS 6)
(define-cfunclike-macro Perl_fp_class (x) (scm-cast (begin (if (eq? (cast <real> (if (equal? (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-float>))) 1 0)) 0) (if (eq? (cast <real> (if (equal? (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-double>))) 1 0)) 0) (__fpclassify (cast <c-longdouble> (identity x))) (__fpclassifyd (cast <c-double> (identity x)))) (__fpclassifyf (cast <c-float> (identity x)))))))
(define-cfunclike-macro Perl_isnan (x) (scm-cast (begin (if (eq? (cast <real> (if (equal? (cast <real> (c-sizeof (cast <NV> x))) (cast <real> (c-sizeof <c-float>))) 1 0)) 0) (if (eq? (cast <real> (if (equal? (cast <real> (c-sizeof (cast <NV> x))) (cast <real> (c-sizeof <c-double>))) 1 0)) 0) (__inline_isnan (cast <c-longdouble> (cast <NV> x))) (__inline_isnand (cast <c-double> (cast <NV> x)))) (__inline_isnanf (cast <c-float> (cast <NV> x)))))))
(define-cfunclike-macro Perl_isfinite (x) (scm-cast (begin (finite (cast <NV> x)))))
(define-cmacro USE_PERL_ATOF 0)
(define-cfunclike-macro Perl_atof (s) (scm-cast (begin (Perl_my_atof s))))
(define-cmacro PERL_UCHAR_MIN (scm-cast (begin (cast <c-uchar> 0))))
(define-cmacro PERL_UCHAR_MAX (scm-cast (begin (cast <c-uchar> 255))))
(define-cmacro PERL_USHORT_MIN (scm-cast (begin (cast <c-ushort> 0))))
(define-cmacro PERL_USHORT_MAX (scm-cast (begin (cast <c-ushort> 65535))))
(define-cmacro PERL_SHORT_MAX (scm-cast (begin (cast <c-short> 32767))))
(define-cmacro PERL_SHORT_MIN (scm-cast (begin (cast <c-short> -32768))))
(define-cmacro PERL_UINT_MAX (scm-cast (begin (cast <c-uint> 4294967295))))
(define-cmacro PERL_UINT_MIN (scm-cast (begin (cast <c-uint> 0))))
(define-cmacro PERL_INT_MAX (scm-cast (begin (cast <c-int> 2147483647))))
(define-cmacro PERL_INT_MIN (scm-cast (begin (cast <c-int> -2147483648))))
(define-cmacro PERL_ULONG_MAX (scm-cast (begin (cast <c-ulong> 4294967295))))
(define-cmacro PERL_ULONG_MIN (scm-cast (begin (cast <c-ulong> 0))))
(define-cmacro PERL_LONG_MAX (scm-cast (begin (cast <c-long> 2147483647))))
(define-cmacro PERL_LONG_MIN (scm-cast (begin (cast <c-long> -2147483648))))
(define-cfunclike-macro Null (type) (scm-cast (begin (#f (cast (ptr <c-void>) 0)))))
(define-cmacro Nullch (scm-cast (begin (cast (ptr <c-char>) (cast (ptr <c-void>) 0)))))
(define-cmacro Nullfp (scm-cast (begin (cast (ptr <PerlIO>) (cast (ptr <c-void>) 0)))))
(define-cmacro Nullsv (scm-cast (begin (cast (ptr <SV>) (cast (ptr <c-void>) 0)))))
(define-cmacro TRUE 1)
(define-cmacro FALSE 0)
(define-cmacro HAS_BOOL 1)
(define-cmacro _INTTYPES_H_ 0)
(define-cmacro __PRI_8_LENGTH_MODIFIER__ "")
(define-cmacro __PRI_64_LENGTH_MODIFIER__ "q")
(define-cmacro __SCN_64_LENGTH_MODIFIER__ "q")
(define-cmacro __PRI_MAX_LENGTH_MODIFIER__ "j")
(define-cmacro __SCN_MAX_LENGTH_MODIFIER__ "j")
(define-cmacro PRId16 "hd")
(define-cmacro PRIi16 "hi")
(define-cmacro PRIo16 "ho")
(define-cmacro PRIu16 "hu")
(define-cmacro PRIx16 "hx")
(define-cmacro PRIX16 "hX")
(define-cmacro PRId32 "d")
(define-cmacro PRIi32 "i")
(define-cmacro PRIo32 "o")
(define-cmacro PRIu32 "u")
(define-cmacro PRIx32 "x")
(define-cmacro PRIX32 "X")
(define-cmacro PRIdLEAST16 "hd")
(define-cmacro PRIiLEAST16 "hi")
(define-cmacro PRIoLEAST16 "ho")
(define-cmacro PRIuLEAST16 "hu")
(define-cmacro PRIxLEAST16 "hx")
(define-cmacro PRIXLEAST16 "hX")
(define-cmacro PRIdLEAST32 "d")
(define-cmacro PRIiLEAST32 "i")
(define-cmacro PRIoLEAST32 "o")
(define-cmacro PRIuLEAST32 "u")
(define-cmacro PRIxLEAST32 "x")
(define-cmacro PRIXLEAST32 "X")
(define-cmacro PRIdFAST16 "hd")
(define-cmacro PRIiFAST16 "hi")
(define-cmacro PRIoFAST16 "ho")
(define-cmacro PRIuFAST16 "hu")
(define-cmacro PRIxFAST16 "hx")
(define-cmacro PRIXFAST16 "hX")
(define-cmacro PRIdFAST32 "d")
(define-cmacro PRIiFAST32 "i")
(define-cmacro PRIoFAST32 "o")
(define-cmacro PRIuFAST32 "u")
(define-cmacro PRIxFAST32 "x")
(define-cmacro PRIXFAST32 "X")
(define-cmacro PRIdPTR "ld")
(define-cmacro PRIiPTR "li")
(define-cmacro PRIoPTR "lo")
(define-cmacro PRIuPTR "lu")
(define-cmacro PRIxPTR "lx")
(define-cmacro PRIXPTR "lX")
(define-cmacro SCNd8 "hhd")
(define-cmacro SCNi8 "hhi")
(define-cmacro SCNo8 "hho")
(define-cmacro SCNu8 "hhu")
(define-cmacro SCNx8 "hhx")
(define-cmacro SCNd16 "hd")
(define-cmacro SCNi16 "hi")
(define-cmacro SCNo16 "ho")
(define-cmacro SCNu16 "hu")
(define-cmacro SCNx16 "hx")
(define-cmacro SCNd32 "d")
(define-cmacro SCNi32 "i")
(define-cmacro SCNo32 "o")
(define-cmacro SCNu32 "u")
(define-cmacro SCNx32 "x")
(define-cmacro SCNdLEAST8 "hhd")
(define-cmacro SCNiLEAST8 "hhi")
(define-cmacro SCNoLEAST8 "hho")
(define-cmacro SCNuLEAST8 "hhu")
(define-cmacro SCNxLEAST8 "hhx")
(define-cmacro SCNdLEAST16 "hd")
(define-cmacro SCNiLEAST16 "hi")
(define-cmacro SCNoLEAST16 "ho")
(define-cmacro SCNuLEAST16 "hu")
(define-cmacro SCNxLEAST16 "hx")
(define-cmacro SCNdLEAST32 "d")
(define-cmacro SCNiLEAST32 "i")
(define-cmacro SCNoLEAST32 "o")
(define-cmacro SCNuLEAST32 "u")
(define-cmacro SCNxLEAST32 "x")
(define-cmacro SCNdFAST8 "hhd")
(define-cmacro SCNiFAST8 "hhi")
(define-cmacro SCNoFAST8 "hho")
(define-cmacro SCNuFAST8 "hhu")
(define-cmacro SCNxFAST8 "hhx")
(define-cmacro SCNdFAST16 "hd")
(define-cmacro SCNiFAST16 "hi")
(define-cmacro SCNoFAST16 "ho")
(define-cmacro SCNuFAST16 "hu")
(define-cmacro SCNxFAST16 "hx")
(define-cmacro SCNdFAST32 "d")
(define-cmacro SCNiFAST32 "i")
(define-cmacro SCNoFAST32 "o")
(define-cmacro SCNuFAST32 "u")
(define-cmacro SCNxFAST32 "x")
(define-cmacro SCNdPTR "ld")
(define-cmacro SCNiPTR "li")
(define-cmacro SCNoPTR "lo")
(define-cmacro SCNuPTR "lu")
(define-cmacro SCNxPTR "lx")
(define-cmacro U8_MAX 255)
(define-cmacro I16_MAX 32767)
(define-cmacro I16_MIN -32768)
(define-cmacro U16_MAX 65535)
(define-cmacro I32_MAX 2147483647)
(define-cmacro I32_MIN -2147483648)
(define-cmacro U32_MAX 4294967295)
(define-cmacro U32_MIN 0)
(define-cfunclike-macro BIT_DIGITS (N) (scm-cast (begin (if (is-a? (/ (cast <real> (* (cast <real> (identity N)) 146)) 485) <c-ptr>) (c-ptr+ (/ (cast <real> (* (cast <real> (identity N)) 146)) 485) 1) (+ (cast <real> (/ (cast <real> (* (cast <real> (identity N)) 146)) 485)) 1)))))
(define-cfunclike-macro TYPE_DIGITS (T) (scm-cast (begin (if (is-a? (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485) <c-ptr>) (c-ptr+ (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485) 1) (+ (cast <real> (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485)) 1)))))
(define-cfunclike-macro TYPE_CHARS (T) (scm-cast (begin (if (is-a? (if (is-a? (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485) <c-ptr>) (c-ptr+ (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485) 1) (+ (cast <real> (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485)) 1)) <c-ptr>) (c-ptr+ (if (is-a? (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485) <c-ptr>) (c-ptr+ (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485) 1) (+ (cast <real> (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485)) 1)) 2) (+ (cast <real> (if (is-a? (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485) <c-ptr>) (c-ptr+ (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485) 1) (+ (cast <real> (/ (cast <real> (* (cast <real> (* (cast <real> (c-sizeof (identity T))) 8)) 146)) 485)) 1))) 2)))))
(define-cfunclike-macro Ctl (ch) (scm-cast (begin (logand (cast <integer> (identity ch)) 31))))
(define-cfunclike-macro strNE (s1 s2) (scm-cast (begin (strcmp s1 s2))))
(define-cfunclike-macro strEQ (s1 s2) (scm-cast (begin (if (eq? (cast <real> (strcmp s1 s2)) 0) 1 0))))
(define-cfunclike-macro strLT (s1 s2) (scm-cast (begin (if (< (cast <real> (strcmp s1 s2)) 0) 1 0))))
(define-cfunclike-macro strLE (s1 s2) (scm-cast (begin (if (<= (cast <real> (strcmp s1 s2)) 0) 1 0))))
(define-cfunclike-macro strGT (s1 s2) (scm-cast (begin (if (> (cast <real> (strcmp s1 s2)) 0) 1 0))))
(define-cfunclike-macro strGE (s1 s2) (scm-cast (begin (if (>= (cast <real> (strcmp s1 s2)) 0) 1 0))))
(define-cfunclike-macro strnNE (s1 s2 l) (scm-cast (begin (strncmp s1 s2 l))))
(define-cfunclike-macro strnEQ (s1 s2 l) (scm-cast (begin (if (eq? (cast <real> (strncmp s1 s2 l)) 0) 1 0))))
(define-cfunclike-macro memNE (s1 s2 l) (scm-cast (begin (memcmp s1 s2 l))))
(define-cfunclike-macro memEQ (s1 s2 l) (scm-cast (begin (if (eq? (cast <real> (memcmp s1 s2 l)) 0) 1 0))))
(define-cmacro CTYPE256 0)
(define-cfunclike-macro isALNUM (c) (scm-cast (begin (let ((G441 (cast <real> (let ((G440 (cast <real> (let ((G438 (cast <real> (let ((G436 (cast <real> (if (>= (cast <real> (identity c)) 65) 1 0)))) (if (eq? G436 0) G436 (if (<= (cast <real> (identity c)) 90) 1 0)))))) (if (eq? G438 0) (let ((G437 (cast <real> (if (>= (cast <real> (identity c)) 97) 1 0)))) (if (eq? G437 0) G437 (if (<= (cast <real> (identity c)) 122) 1 0))) G438))))) (if (eq? G440 0) (let ((G439 (cast <real> (if (>= (cast <real> (identity c)) 48) 1 0)))) (if (eq? G439 0) G439 (if (<= (cast <real> (identity c)) 57) 1 0))) G440))))) (if (eq? G441 0) (if (equal? (cast <real> (identity c)) 95) 1 0) G441)))))
(define-cfunclike-macro isIDFIRST (c) (scm-cast (begin (let ((G445 (cast <real> (let ((G444 (cast <real> (let ((G442 (cast <real> (if (>= (cast <real> (identity c)) 65) 1 0)))) (if (eq? G442 0) G442 (if (<= (cast <real> (identity c)) 90) 1 0)))))) (if (eq? G444 0) (let ((G443 (cast <real> (if (>= (cast <real> (identity c)) 97) 1 0)))) (if (eq? G443 0) G443 (if (<= (cast <real> (identity c)) 122) 1 0))) G444))))) (if (eq? G445 0) (if (equal? (cast <real> (identity c)) 95) 1 0) G445)))))
(define-cfunclike-macro isALPHA (c) (scm-cast (begin (let ((G448 (cast <real> (let ((G446 (cast <real> (if (>= (cast <real> (identity c)) 65) 1 0)))) (if (eq? G446 0) G446 (if (<= (cast <real> (identity c)) 90) 1 0)))))) (if (eq? G448 0) (let ((G447 (cast <real> (if (>= (cast <real> (identity c)) 97) 1 0)))) (if (eq? G447 0) G447 (if (<= (cast <real> (identity c)) 122) 1 0))) G448)))))
(define-cfunclike-macro isSPACE (c) (scm-cast (begin (let ((G452 (cast <real> (let ((G451 (cast <real> (let ((G450 (cast <real> (let ((G449 (cast <real> (if (equal? (cast <real> (identity c)) 32) 1 0)))) (if (eq? G449 0) (if (equal? (cast <real> (identity c)) 9) 1 0) G449))))) (if (eq? G450 0) (if (equal? (cast <real> (identity c)) 10) 1 0) G450))))) (if (eq? G451 0) (if (equal? (cast <real> (identity c)) 13) 1 0) G451))))) (if (eq? G452 0) (if (equal? (cast <real> (identity c)) 12) 1 0) G452)))))
(define-cfunclike-macro isPSXSPC (c) (scm-cast (begin (let ((G457 (cast <real> (let ((G456 (cast <real> (let ((G455 (cast <real> (let ((G454 (cast <real> (let ((G453 (cast <real> (if (equal? (cast <real> (identity c)) 32) 1 0)))) (if (eq? G453 0) (if (equal? (cast <real> (identity c)) 9) 1 0) G453))))) (if (eq? G454 0) (if (equal? (cast <real> (identity c)) 10) 1 0) G454))))) (if (eq? G455 0) (if (equal? (cast <real> (identity c)) 13) 1 0) G455))))) (if (eq? G456 0) (if (equal? (cast <real> (identity c)) 12) 1 0) G456))))) (if (eq? G457 0) (if (equal? (cast <real> (identity c)) 11) 1 0) G457)))))
(define-cfunclike-macro isBLANK (c) (scm-cast (begin (let ((G458 (cast <real> (if (equal? (cast <real> (identity c)) 32) 1 0)))) (if (eq? G458 0) (if (equal? (cast <real> (identity c)) 9) 1 0) G458)))))
(define-cfunclike-macro isDIGIT (c) (scm-cast (begin (let ((G459 (cast <real> (if (>= (cast <real> (identity c)) 48) 1 0)))) (if (eq? G459 0) G459 (if (<= (cast <real> (identity c)) 57) 1 0))))))
(define-cfunclike-macro isUPPER (c) (scm-cast (begin (let ((G460 (cast <real> (if (>= (cast <real> (identity c)) 65) 1 0)))) (if (eq? G460 0) G460 (if (<= (cast <real> (identity c)) 90) 1 0))))))
(define-cfunclike-macro isLOWER (c) (scm-cast (begin (let ((G461 (cast <real> (if (>= (cast <real> (identity c)) 97) 1 0)))) (if (eq? G461 0) G461 (if (<= (cast <real> (identity c)) 122) 1 0))))))
(define-cfunclike-macro isALNUMC (c) (scm-cast (begin (let ((G466 (cast <real> (let ((G464 (cast <real> (let ((G462 (cast <real> (if (>= (cast <real> (identity c)) 65) 1 0)))) (if (eq? G462 0) G462 (if (<= (cast <real> (identity c)) 90) 1 0)))))) (if (eq? G464 0) (let ((G463 (cast <real> (if (>= (cast <real> (identity c)) 97) 1 0)))) (if (eq? G463 0) G463 (if (<= (cast <real> (identity c)) 122) 1 0))) G464))))) (if (eq? G466 0) (let ((G465 (cast <real> (if (>= (cast <real> (identity c)) 48) 1 0)))) (if (eq? G465 0) G465 (if (<= (cast <real> (identity c)) 57) 1 0))) G466)))))
(define-cfunclike-macro isASCII (c) (scm-cast (begin (if (<= (cast <real> (identity c)) 127) 1 0))))
(define-cfunclike-macro isCNTRL (c) (scm-cast (begin (let ((G467 (cast <real> (if (< (cast <real> (identity c)) 32) 1 0)))) (if (eq? G467 0) (if (equal? (cast <real> (identity c)) 127) 1 0) G467)))))
(define-cfunclike-macro isGRAPH (c) (scm-cast (begin (let ((G481 (cast <real> (let ((G473 (cast <real> (let ((G472 (cast <real> (let ((G470 (cast <real> (let ((G468 (cast <real> (if (>= (cast <real> (identity c)) 65) 1 0)))) (if (eq? G468 0) G468 (if (<= (cast <real> (identity c)) 90) 1 0)))))) (if (eq? G470 0) (let ((G469 (cast <real> (if (>= (cast <real> (identity c)) 97) 1 0)))) (if (eq? G469 0) G469 (if (<= (cast <real> (identity c)) 122) 1 0))) G470))))) (if (eq? G472 0) (let ((G471 (cast <real> (if (>= (cast <real> (identity c)) 48) 1 0)))) (if (eq? G471 0) G471 (if (<= (cast <real> (identity c)) 57) 1 0))) G472))))) (if (eq? G473 0) (if (equal? (cast <real> (identity c)) 95) 1 0) G473))))) (if (eq? G481 0) (let ((G480 (cast <real> (let ((G478 (cast <real> (let ((G476 (cast <real> (let ((G474 (cast <real> (if (>= (cast <real> (identity c)) 33) 1 0)))) (if (eq? G474 0) G474 (if (<= (cast <real> (identity c)) 47) 1 0)))))) (if (eq? G476 0) (let ((G475 (cast <real> (if (>= (cast <real> (identity c)) 58) 1 0)))) (if (eq? G475 0) G475 (if (<= (cast <real> (identity c)) 64) 1 0))) G476))))) (if (eq? G478 0) (let ((G477 (cast <real> (if (>= (cast <real> (identity c)) 91) 1 0)))) (if (eq? G477 0) G477 (if (<= (cast <real> (identity c)) 96) 1 0))) G478))))) (if (eq? G480 0) (let ((G479 (cast <real> (if (>= (cast <real> (identity c)) 123) 1 0)))) (if (eq? G479 0) G479 (if (<= (cast <real> (identity c)) 126) 1 0))) G480)) G481)))))
(define-cfunclike-macro isPRINT (c) (scm-cast (begin (let ((G483 (cast <real> (let ((G482 (cast <real> (if (> (cast <real> (identity c)) 32) 1 0)))) (if (eq? G482 0) G482 (if (< (cast <real> (identity c)) 127) 1 0)))))) (if (eq? G483 0) (if (equal? (cast <real> (identity c)) 32) 1 0) G483)))))
(define-cfunclike-macro isPUNCT (c) (scm-cast (begin (let ((G490 (cast <real> (let ((G488 (cast <real> (let ((G486 (cast <real> (let ((G484 (cast <real> (if (>= (cast <real> (identity c)) 33) 1 0)))) (if (eq? G484 0) G484 (if (<= (cast <real> (identity c)) 47) 1 0)))))) (if (eq? G486 0) (let ((G485 (cast <real> (if (>= (cast <real> (identity c)) 58) 1 0)))) (if (eq? G485 0) G485 (if (<= (cast <real> (identity c)) 64) 1 0))) G486))))) (if (eq? G488 0) (let ((G487 (cast <real> (if (>= (cast <real> (identity c)) 91) 1 0)))) (if (eq? G487 0) G487 (if (<= (cast <real> (identity c)) 96) 1 0))) G488))))) (if (eq? G490 0) (let ((G489 (cast <real> (if (>= (cast <real> (identity c)) 123) 1 0)))) (if (eq? G489 0) G489 (if (<= (cast <real> (identity c)) 126) 1 0))) G490)))))
(define-cfunclike-macro isXDIGIT (c) (scm-cast (begin (let ((G495 (cast <real> (let ((G493 (cast <real> (let ((G491 (cast <real> (if (>= (cast <real> (identity c)) 48) 1 0)))) (if (eq? G491 0) G491 (if (<= (cast <real> (identity c)) 57) 1 0)))))) (if (eq? G493 0) (let ((G492 (cast <real> (if (>= (cast <real> (identity c)) 97) 1 0)))) (if (eq? G492 0) G492 (if (<= (cast <real> (identity c)) 102) 1 0))) G493))))) (if (eq? G495 0) (let ((G494 (cast <real> (if (>= (cast <real> (identity c)) 65) 1 0)))) (if (eq? G494 0) G494 (if (<= (cast <real> (identity c)) 70) 1 0))) G495)))))
(define-cfunclike-macro toUPPER (c) (scm-cast (begin (if (eq? (cast <real> (let ((G496 (cast <real> (if (>= (cast <real> (identity c)) 97) 1 0)))) (if (eq? G496 0) G496 (if (<= (cast <real> (identity c)) 122) 1 0)))) 0) (identity c) (if (is-a? (identity c) <c-ptr>) (c-ptr- (identity c) 32) (- (cast <real> (identity c)) 32))))))
(define-cfunclike-macro toLOWER (c) (scm-cast (begin (if (eq? (cast <real> (let ((G497 (cast <real> (if (>= (cast <real> (identity c)) 65) 1 0)))) (if (eq? G497 0) G497 (if (<= (cast <real> (identity c)) 90) 1 0)))) 0) (identity c) (if (is-a? (identity c) <c-ptr>) (c-ptr+ (identity c) 32) (+ (cast <real> (identity c)) 32))))))
(define-cfunclike-macro isALNUM_LC (c) (scm-cast (begin (let ((G498 (cast <real> (__istype (cast <c-uchar> (identity c)) 1280)))) (if (eq? G498 0) (if (equal? (cast <real> (cast <c-char> (identity c))) 95) 1 0) G498)))))
(define-cfunclike-macro isIDFIRST_LC (c) (scm-cast (begin (let ((G499 (cast <real> (__istype (cast <c-uchar> (identity c)) 256)))) (if (eq? G499 0) (if (equal? (cast <real> (cast <c-char> (identity c))) 95) 1 0) G499)))))
(define-cfunclike-macro isALPHA_LC (c) (scm-cast (begin (__istype (cast <c-uchar> (identity c)) 256))))
(define-cfunclike-macro isSPACE_LC (c) (scm-cast (begin (__istype (cast <c-uchar> (identity c)) 16384))))
(define-cfunclike-macro isDIGIT_LC (c) (scm-cast (begin (__isctype (cast <c-uchar> (identity c)) 1024))))
(define-cfunclike-macro isUPPER_LC (c) (scm-cast (begin (__istype (cast <c-uchar> (identity c)) 32768))))
(define-cfunclike-macro isLOWER_LC (c) (scm-cast (begin (__istype (cast <c-uchar> (identity c)) 4096))))
(define-cfunclike-macro isALNUMC_LC (c) (scm-cast (begin (__istype (cast <c-uchar> (identity c)) 1280))))
(define-cfunclike-macro isCNTRL_LC (c) (scm-cast (begin (__istype (cast <c-uchar> (identity c)) 512))))
(define-cfunclike-macro isGRAPH_LC (c) (scm-cast (begin (__istype (cast <c-uchar> (identity c)) 2048))))
(define-cfunclike-macro isPRINT_LC (c) (scm-cast (begin (__istype (cast <c-uchar> (identity c)) 262144))))
(define-cfunclike-macro isPUNCT_LC (c) (scm-cast (begin (__istype (cast <c-uchar> (identity c)) 8192))))
(define-cfunclike-macro toUPPER_LC (c) (scm-cast (begin (__toupper (cast <c-uchar> (identity c))))))
(define-cfunclike-macro toLOWER_LC (c) (scm-cast (begin (__tolower (cast <c-uchar> (identity c))))))
(define-cfunclike-macro isPSXSPC_LC (c) (scm-cast (begin (let ((G500 (cast <real> (__istype (cast <c-uchar> (identity c)) 16384)))) (if (eq? G500 0) (if (equal? (cast <real> (identity c)) 11) 1 0) G500)))))
(define-cfunclike-macro isBLANK_LC (c) (scm-cast (begin (let ((G501 (cast <real> (if (equal? (cast <real> (identity c)) 32) 1 0)))) (if (eq? G501 0) (if (equal? (cast <real> (identity c)) 9) 1 0) G501)))))
(define-cfunclike-macro isBLANK_uni (c) (scm-cast (begin (let ((G502 (cast <real> (if (equal? (cast <real> (identity c)) 32) 1 0)))) (if (eq? G502 0) (if (equal? (cast <real> (identity c)) 9) 1 0) G502)))))
(define-cfunclike-macro isBLANK_LC_uni (c) (scm-cast (begin (let ((G505 (cast <real> (if (equal? (cast <real> (identity c)) 32) 1 0)))) (if (eq? G505 0) (if (equal? (cast <real> (identity c)) 9) 1 0) G505)))))
(define-cfunclike-macro isBLANK_utf8 (c) (scm-cast (begin (let ((G506 (cast <real> (if (equal? (cast <real> (identity c)) 32) 1 0)))) (if (eq? G506 0) (if (equal? (cast <real> (identity c)) 9) 1 0) G506)))))
(define-cfunclike-macro isBLANK_LC_utf8 (c) (scm-cast (begin (let ((G507 (cast <real> (if (equal? (cast <real> (identity c)) 32) 1 0)))) (if (eq? G507 0) (if (equal? (cast <real> (identity c)) 9) 1 0) G507)))))
(define-cfunclike-macro toCTRL (c) (scm-cast (begin (logxor (cast <integer> (if (eq? (cast <real> (let ((G508 (cast <real> (if (>= (cast <real> (identity c)) 97) 1 0)))) (if (eq? G508 0) G508 (if (<= (cast <real> (identity c)) 122) 1 0)))) 0) (identity c) (if (is-a? (identity c) <c-ptr>) (c-ptr- (identity c) 32) (- (cast <real> (identity c)) 32)))) 64))))
(define-cmacro NOLINE (scm-cast (begin (cast <line_t> 4294967295))))
(define-cfunclike-macro MEM_WRAP_CHECK (n t) (scm-cast (begin (cast <c-void> (if (eq? (cast <real> (if (> (cast <real> (identity n)) (cast <real> (/ (cast <real> (cast <size_t> -1)) (cast <real> (c-sizeof (identity t)))))) 1 0)) 0) 0 (begin (Perl_croak_nocontext PL_memory_wrap) 0))))))
(define-cfunclike-macro MEM_WRAP_CHECK_1 (n t a) (scm-cast (begin (cast <c-void> (if (eq? (cast <real> (if (> (cast <real> (identity n)) (cast <real> (/ (cast <real> (cast <size_t> -1)) (cast <real> (c-sizeof (identity t)))))) 1 0)) 0) 0 (begin (Perl_croak_nocontext a) 0))))))
(define-cfunclike-macro MEM_WRAP_CHECK_2 (n t a b) (scm-cast (begin (cast <c-void> (if (eq? (cast <real> (if (> (cast <real> (identity n)) (cast <real> (/ (cast <real> (cast <size_t> -1)) (cast <real> (c-sizeof (identity t)))))) 1 0)) 0) 0 (begin (Perl_croak_nocontext a b) 0))))))
(define-cfunclike-macro Safefree (d) (scm-cast (begin (Perl_safesysfree (cast (ptr <c-void>) (identity d))))))
(define-cfunclike-macro Move (s d n t) (scm-cast (begin (begin (cast <c-void> (if (eq? (cast <real> (if (> (cast <real> (identity n)) (cast <real> (/ (cast <real> (cast <size_t> -1)) (cast <real> (c-sizeof (identity t)))))) 1 0)) 0) 0 (begin (Perl_croak_nocontext PL_memory_wrap) 0))) (cast <c-void> (memmove (cast (ptr <c-char>) (identity d)) (cast (ptr <c-char>) (identity s)) (* (cast <real> (identity n)) (cast <real> (c-sizeof (identity t))))))))))
(define-cfunclike-macro Copy (s d n t) (scm-cast (begin (begin (cast <c-void> (if (eq? (cast <real> (if (> (cast <real> (identity n)) (cast <real> (/ (cast <real> (cast <size_t> -1)) (cast <real> (c-sizeof (identity t)))))) 1 0)) 0) 0 (begin (Perl_croak_nocontext PL_memory_wrap) 0))) (cast <c-void> (memcpy (cast (ptr <c-char>) (identity d)) (cast (ptr <c-char>) (identity s)) (* (cast <real> (identity n)) (cast <real> (c-sizeof (identity t))))))))))
(define-cfunclike-macro Zero (d n t) (scm-cast (begin (begin (cast <c-void> (if (eq? (cast <real> (if (> (cast <real> (identity n)) (cast <real> (/ (cast <real> (cast <size_t> -1)) (cast <real> (c-sizeof (identity t)))))) 1 0)) 0) 0 (begin (Perl_croak_nocontext PL_memory_wrap) 0))) (cast <c-void> (memset (cast (ptr <c-char>) (identity d)) 0 (* (cast <real> (identity n)) (cast <real> (c-sizeof (identity t))))))))))
(define-cfunclike-macro MoveD (s d n t) (scm-cast (begin (begin (cast <c-void> (if (eq? (cast <real> (if (> (cast <real> (identity n)) (cast <real> (/ (cast <real> (cast <size_t> -1)) (cast <real> (c-sizeof (identity t)))))) 1 0)) 0) 0 (begin (Perl_croak_nocontext PL_memory_wrap) 0))) (memmove (cast (ptr <c-char>) (identity d)) (cast (ptr <c-char>) (identity s)) (* (cast <real> (identity n)) (cast <real> (c-sizeof (identity t)))))))))
(define-cfunclike-macro CopyD (s d n t) (scm-cast (begin (begin (cast <c-void> (if (eq? (cast <real> (if (> (cast <real> (identity n)) (cast <real> (/ (cast <real> (cast <size_t> -1)) (cast <real> (c-sizeof (identity t)))))) 1 0)) 0) 0 (begin (Perl_croak_nocontext PL_memory_wrap) 0))) (memcpy (cast (ptr <c-char>) (identity d)) (cast (ptr <c-char>) (identity s)) (* (cast <real> (identity n)) (cast <real> (c-sizeof (identity t)))))))))
(define-cfunclike-macro ZeroD (d n t) (scm-cast (begin (begin (cast <c-void> (if (eq? (cast <real> (if (> (cast <real> (identity n)) (cast <real> (/ (cast <real> (cast <size_t> -1)) (cast <real> (c-sizeof (identity t)))))) 1 0)) 0) 0 (begin (Perl_croak_nocontext PL_memory_wrap) 0))) (memset (cast (ptr <c-char>) (identity d)) 0 (* (cast <real> (identity n)) (cast <real> (c-sizeof (identity t)))))))))
(define-cfunclike-macro Poison (d n t) (scm-cast (begin (begin (cast <c-void> (if (eq? (cast <real> (if (> (cast <real> (identity n)) (cast <real> (/ (cast <real> (cast <size_t> -1)) (cast <real> (c-sizeof (identity t)))))) 1 0)) 0) 0 (begin (Perl_croak_nocontext PL_memory_wrap) 0))) (cast <c-void> (memset (cast (ptr <c-char>) (identity d)) 171 (* (cast <real> (identity n)) (cast <real> (c-sizeof (identity t))))))))))
(define-cfunclike-macro C_ARRAY_LENGTH (a) (scm-cast (begin (/ (cast <real> (c-sizeof (identity a))) (cast <real> (c-sizeof (ref (identity a) 0)))))))
(define-cmacro pTHX_FORMAT "Perl interpreter: 0x%p")
(define-cmacro pTHX__FORMAT ", Perl interpreter: 0x%p")
(define-cmacro USE_64_BIT_RAWIO 0)
(define-cmacro FSEEKSIZE 8)
(define-cmacro USE_64_BIT_STDIO 0)
(define-cmacro HAS_IOCTL 0)
(define-cmacro HAS_UTIME 0)
(define-cmacro HAS_GROUP 0)
(define-cmacro HAS_PASSWD 0)
(define-cmacro HAS_KILL 0)
(define-cmacro HAS_WAIT 0)
(define-cmacro USE_STAT_RDEV 0)
(define-cmacro fwrite1 (scm-cast (begin fwrite)))
(define-cfunclike-macro Stat (fname bufptr) (scm-cast (begin (stat (identity fname) (identity bufptr)))))
(define-cfunclike-macro Fstat (fd bufptr) (scm-cast (begin (fstat (identity fd) (identity bufptr)))))
(define-cfunclike-macro Fflush (fp) (scm-cast (begin (fflush fp))))
(define-cfunclike-macro Mkdir (path mode) (scm-cast (begin (mkdir (identity path) (identity mode)))))
(define-cfunclike-macro PERL_SYS_INIT (c v) (scm-cast (begin (let ((%v (signal 8 (cast (make-c-func-ptr <c-void> (list)) 1)))) (set! (ref PL_sigfpe_saved) %v) %v) 0)))
(define-cmacro BIT_BUCKET "/dev/null")
(define-cmacro dXSUB_SYS 0)
(define-cmacro USE_ENVIRON_ARRAY 0)
(define-cmacro ISHISH "unix")
(define-cmacro USE_ENVIRON_ARRAY 0)
(define-cfunclike-macro PERL_SYS_INIT3 (argvp argcp envp) (scm-cast (begin (let ((%v (signal 8 (cast (make-c-func-ptr <c-void> (list)) 1)))) (set! (ref PL_sigfpe_saved) %v) %v) 0)))
(define-cmacro _POSIX_PTHREAD_H 0)
(define-cmacro _PTHREAD_IMPL_H_ 0)
(define-cmacro _PTHREAD_MUTEX_SIG_init 850045863)
(define-cmacro _PTHREAD_COND_SIG_init 1018212795)
(define-cmacro _PTHREAD_ONCE_SIG_init 816954554)
(define-cmacro SCHED_OTHER 1)
(define-cmacro SCHED_FIFO 4)
(define-cmacro SCHED_RR 2)
(define-cmacro __SCHED_PARAM_SIZE__ 4)
(define-cmacro _SCHED_H_ 0)
(define-cmacro _MACH_PORT_T 0)
(define-cmacro PTHREAD_CREATE_JOINABLE 1)
(define-cmacro PTHREAD_CREATE_DETACHED 2)
(define-cmacro PTHREAD_INHERIT_SCHED 1)
(define-cmacro PTHREAD_EXPLICIT_SCHED 2)
(define-cmacro PTHREAD_CANCEL_ENABLE 1)
(define-cmacro PTHREAD_CANCEL_DISABLE 0)
(define-cmacro PTHREAD_CANCEL_DEFERRED 2)
(define-cmacro PTHREAD_CANCEL_ASYNCHRONOUS 0)
(define-cmacro PTHREAD_CANCELED (scm-cast (begin (cast (ptr <c-void>) 1))))
(define-cmacro PTHREAD_SCOPE_SYSTEM 1)
(define-cmacro PTHREAD_SCOPE_PROCESS 2)
(define-cmacro PTHREAD_PROCESS_SHARED 1)
(define-cmacro PTHREAD_PROCESS_PRIVATE 2)
(define-cmacro PTHREAD_PRIO_NONE 0)
(define-cmacro PTHREAD_PRIO_INHERIT 1)
(define-cmacro PTHREAD_PRIO_PROTECT 2)
(define-cmacro PTHREAD_MUTEX_NORMAL 0)
(define-cmacro PTHREAD_MUTEX_ERRORCHECK 1)
(define-cmacro PTHREAD_MUTEX_RECURSIVE 2)
(define-cmacro PTHREAD_MUTEX_DEFAULT 0)
(define-cmacro PERL_EXIT_EXPECTED 1)
(define-cmacro PERL_EXIT_DESTRUCT_END 2)
(define-cfunclike-macro MEMBER_TO_FPTR (name) (scm-cast (begin name)))
(define-cmacro PERL_FS_VER_FMT "%d.%d.%d")
(define-cmacro PERL_WAIT_FOR_CHILDREN (scm-cast (begin (cast <c-void> 0))))
(define-cfunclike-macro PERL_SET_INTERP (i) (scm-cast (begin (let ((%v (cast (ptr <PerlInterpreter>) (identity i)))) (set! (ref PL_curinterp) %v) %v))))
(define-cmacro PERL_GET_INTERP (scm-cast (begin (identity PL_curinterp))))
(define-cfunclike-macro PERL_SET_THX (t) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_setspecific PL_thr_key (cast (ptr <c-void>) (identity t))))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: pthread_setspecific (%d) [%s:%d]" _eC_ "<stdin>" 4206)))))))
(define-cmacro SVf "_")
(define-cmacro UVf "Vu")
(define-cmacro VDf "vd")
(define-cmacro Nullformat (scm-cast (begin (cast (ptr <c-char>) (cast (ptr <c-void>) 0)))))
(define-cfunclike-macro __attribute__format__ (x y z) 0)
(define-cmacro Pause (scm-cast (begin pause)))
(define-cmacro ARGSproto 0)
(define-cmacro __Inc__IPerl___ 0)
(define-cmacro _PERLIO_H 0)
(define-cmacro _STDIO_H_ 0)
(define-cmacro _FSTDIO 0)
(define-cmacro __SLBF 1)
(define-cmacro __SNBF 2)
(define-cmacro __SRD 4)
(define-cmacro __SWR 8)
(define-cmacro __SRW 16)
(define-cmacro __SEOF 32)
(define-cmacro __SERR 64)
(define-cmacro __SMBF 128)
(define-cmacro __SAPP 256)
(define-cmacro __SSTR 512)
(define-cmacro __SOPT 1024)
(define-cmacro __SNPT 2048)
(define-cmacro __SOFF 4096)
(define-cmacro __SMOD 8192)
(define-cmacro __SALC 16384)
(define-cmacro __SIGN 32768)
(define-cmacro _IOFBF 0)
(define-cmacro _IOLBF 1)
(define-cmacro _IONBF 2)
(define-cmacro BUFSIZ 1024)
(define-cmacro EOF -1)
(define-cmacro FOPEN_MAX 20)
(define-cmacro FILENAME_MAX 1024)
(define-cmacro P_tmpdir "/var/tmp/")
(define-cmacro L_tmpnam 1024)
(define-cmacro TMP_MAX 308915776)
(define-cmacro stdin (scm-cast (begin (ptr (ref __sF 0)))))
(define-cmacro stdout (scm-cast (begin (ptr (ref __sF 1)))))
(define-cmacro stderr (scm-cast (begin (ptr (ref __sF 2)))))
(define-cmacro L_cuserid 9)
(define-cmacro L_ctermid 1024)
(define-cfunclike-macro fropen (cookie fn) (scm-cast (begin (funopen cookie fn 0 0 0))))
(define-cfunclike-macro fwopen (cookie fn) (scm-cast (begin (funopen cookie 0 fn 0 0))))
(define-cfunclike-macro __sgetc (p) (scm-cast (begin (if (eq? (cast <real> (if (< (cast <real> (pre-- (raw-ref (deref (identity p)) '_r))) 0) 1 0)) 0) (cast <c-int> (deref (post++ (raw-ref (deref (identity p)) '_p)))) (__srget p)))))
(define-cfunclike-macro __sfeof (p) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) 32)) 0) 0 1))))
(define-cfunclike-macro __sferror (p) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) 64)) 0) 0 1))))
(define-cfunclike-macro __sclearerr (p) (scm-cast (begin (cast <c-void> (let ((%v (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) -97))) (set! (ref (deref (identity p)) '_flags) %v) %v)))))
(define-cfunclike-macro __sfileno (p) (scm-cast (begin (raw-ref (deref (identity p)) '_file))))
(define-cfunclike-macro feof_unlocked (p) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) 32)) 0) 0 1))))
(define-cfunclike-macro ferror_unlocked (p) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) 64)) 0) 0 1))))
(define-cfunclike-macro clearerr_unlocked (p) (scm-cast (begin (cast <c-void> (let ((%v (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) -97))) (set! (ref (deref (identity p)) '_flags) %v) %v)))))
(define-cfunclike-macro fileno_unlocked (p) (scm-cast (begin (raw-ref (deref (identity p)) '_file))))
(define-cfunclike-macro getc_unlocked (fp) (scm-cast (begin (if (eq? (cast <real> (if (< (cast <real> (pre-- (raw-ref (deref (identity fp)) '_r))) 0) 1 0)) 0) (cast <c-int> (deref (post++ (raw-ref (deref (identity fp)) '_p)))) (__srget fp)))))
(define-cfunclike-macro putc_unlocked (x fp) (scm-cast (begin (__sputc x fp))))
(define-cmacro getchar_unlocked (scm-cast (begin getchar_unlocked)))
(define-cfunclike-macro putchar_unlocked (x) (scm-cast (begin (__sputc x (ptr (ref __sF 1))))))
(define-cmacro ftell (scm-cast (begin ftello)))
(define-cmacro fseek (scm-cast (begin fseeko)))
(define-cmacro PERLIO_LAYERS 1)
(define-cmacro PERLIO_NOT_STDIO 0)
(define-cfunclike-macro specialCopIO (sv) (scm-cast (begin (if (equal? (cast <real> (identity sv)) (cast <real> (cast (ptr <SV>) (cast (ptr <c-void>) 0)))) 1 0))))
(define-cmacro PERLIO_DUP_CLONE 1)
(define-cmacro PERLIO_DUP_FD 2)
(define-cmacro PerlSIO_stdin (scm-cast (begin (ptr (ref __sF 0)))))
(define-cmacro PerlSIO_stdout (scm-cast (begin (ptr (ref __sF 1)))))
(define-cmacro PerlSIO_stderr (scm-cast (begin (ptr (ref __sF 2)))))
(define-cfunclike-macro PerlSIO_fopen (x y) (scm-cast (begin (fopen x y))))
(define-cfunclike-macro PerlSIO_fclose (f) (scm-cast (begin (fclose f))))
(define-cfunclike-macro PerlSIO_feof (f) (scm-cast (begin (feof f))))
(define-cfunclike-macro PerlSIO_ferror (f) (scm-cast (begin (ferror f))))
(define-cfunclike-macro PerlSIO_clearerr (f) (scm-cast (begin (clearerr f))))
(define-cfunclike-macro PerlSIO_fgetc (f) (scm-cast (begin (fgetc f))))
(define-cfunclike-macro PerlSIO_get_base (f) (scm-cast (begin (if (eq? (cast <real> (raw-ref (raw-ref (deref (identity f)) '_ub) '_base)) 0) (raw-ref (raw-ref (deref (identity f)) '_bf) '_base) (raw-ref (raw-ref (deref (identity f)) '_ub) '_base)))))
(define-cfunclike-macro PerlSIO_get_bufsiz (f) (scm-cast (begin (if (eq? (cast <real> (raw-ref (raw-ref (deref (identity f)) '_ub) '_base)) 0) (raw-ref (raw-ref (deref (identity f)) '_bf) '_size) (raw-ref (raw-ref (deref (identity f)) '_ub) '_size)))))
(define-cfunclike-macro PerlSIO_get_cnt (f) (scm-cast (begin (raw-ref (deref (identity f)) '_r))))
(define-cfunclike-macro PerlSIO_get_ptr (f) (scm-cast (begin (raw-ref (deref (identity f)) '_p))))
(define-cfunclike-macro PerlSIO_fputc (f c) (scm-cast (begin (fputc c f))))
(define-cfunclike-macro PerlSIO_fputs (f s) (scm-cast (begin (fputs s f))))
(define-cfunclike-macro PerlSIO_fflush (f) (scm-cast (begin (fflush f))))
(define-cfunclike-macro PerlSIO_fgets (s n fp) (scm-cast (begin (fgets s n fp))))
(define-cfunclike-macro PerlSIO_ungetc (c f) (scm-cast (begin (ungetc c f))))
(define-cfunclike-macro PerlSIO_fileno (f) (scm-cast (begin (fileno f))))
(define-cfunclike-macro PerlSIO_fdopen (f s) (scm-cast (begin (fdopen f s))))
(define-cfunclike-macro PerlSIO_freopen (p m f) (scm-cast (begin (freopen p m f))))
(define-cfunclike-macro PerlSIO_fread (buf sz count f) (scm-cast (begin (fread buf sz count f))))
(define-cfunclike-macro PerlSIO_fwrite (buf sz count f) (scm-cast (begin (fwrite buf sz count f))))
(define-cfunclike-macro PerlSIO_setbuf (f b) (scm-cast (begin (setbuf f b))))
(define-cfunclike-macro PerlSIO_setvbuf (f b t s) (scm-cast (begin (setvbuf f b t s))))
(define-cfunclike-macro PerlSIO_set_cnt (f c) (scm-cast (begin (let ((%v (identity c))) (set! (ref (deref (identity f)) '_r) %v) %v))))
(define-cfunclike-macro PerlSIO_set_ptr (f p) (scm-cast (begin (let ((%v (identity p))) (set! (ref (deref (identity f)) '_p) %v) %v))))
(define-cfunclike-macro PerlSIO_setlinebuf (f) (scm-cast (begin (setlinebuf f))))
(define-cmacro PerlSIO_printf (scm-cast (begin fprintf)))
(define-cmacro PerlSIO_stdoutf (scm-cast (begin printf)))
(define-cfunclike-macro PerlSIO_vprintf (f fmt a) (scm-cast (begin (vfprintf f fmt a))))
(define-cfunclike-macro PerlSIO_ftell (f) (scm-cast (begin (ftello f))))
(define-cfunclike-macro PerlSIO_fseek (f o w) (scm-cast (begin (fseeko f o w))))
(define-cfunclike-macro PerlSIO_fgetpos (f p) (scm-cast (begin (fgetpos f p))))
(define-cfunclike-macro PerlSIO_fsetpos (f p) (scm-cast (begin (fsetpos f p))))
(define-cfunclike-macro PerlSIO_rewind (f) (scm-cast (begin (rewind f))))
(define-cfunclike-macro PerlSIO_fdupopen (f) (scm-cast (begin (identity f))))
(define-cfunclike-macro PerlDir_mkdir (name mode) (scm-cast (begin (mkdir (identity name) (identity mode)))))
(define-cfunclike-macro PerlDir_chdir (name) (scm-cast (begin (chdir (identity name)))))
(define-cfunclike-macro PerlDir_rmdir (name) (scm-cast (begin (rmdir (identity name)))))
(define-cfunclike-macro PerlDir_close (dir) (scm-cast (begin (closedir (identity dir)))))
(define-cfunclike-macro PerlDir_open (name) (scm-cast (begin (opendir (identity name)))))
(define-cfunclike-macro PerlDir_rewind (dir) (scm-cast (begin (rewinddir (identity dir)))))
(define-cfunclike-macro PerlDir_seek (dir loc) (scm-cast (begin (seekdir (identity dir) (identity loc)))))
(define-cfunclike-macro PerlDir_tell (dir) (scm-cast (begin (telldir (identity dir)))))
(define-cfunclike-macro PerlEnv_putenv (str) (scm-cast (begin (putenv (identity str)))))
(define-cfunclike-macro PerlEnv_getenv (str) (scm-cast (begin (getenv (identity str)))))
(define-cfunclike-macro PerlEnv_ENVgetenv (str) (scm-cast (begin (getenv (identity str)))))
(define-cfunclike-macro PerlLIO_access (file mode) (scm-cast (begin (access (identity file) (identity mode)))))
(define-cfunclike-macro PerlLIO_chmod (file mode) (scm-cast (begin (chmod (identity file) (identity mode)))))
(define-cfunclike-macro PerlLIO_chown (file owner grp) (scm-cast (begin (chown (identity file) (identity owner) (identity grp)))))
(define-cfunclike-macro PerlLIO_close (fd) (scm-cast (begin (close (identity fd)))))
(define-cfunclike-macro PerlLIO_dup (fd) (scm-cast (begin (dup (identity fd)))))
(define-cfunclike-macro PerlLIO_dup2 (fd1 fd2) (scm-cast (begin (dup2 (identity fd1) (identity fd2)))))
(define-cfunclike-macro PerlLIO_fstat (fd buf) (scm-cast (begin (fstat (identity fd) (identity buf)))))
(define-cfunclike-macro PerlLIO_ioctl (fd u buf) (scm-cast (begin (ioctl (identity fd) (identity u) (identity buf)))))
(define-cfunclike-macro PerlLIO_isatty (fd) (scm-cast (begin (isatty (identity fd)))))
(define-cfunclike-macro PerlLIO_link (oldname newname) (scm-cast (begin (link (identity oldname) (identity newname)))))
(define-cfunclike-macro PerlLIO_lseek (fd offset mode) (scm-cast (begin (lseek (identity fd) (identity offset) (identity mode)))))
(define-cfunclike-macro PerlLIO_stat (name buf) (scm-cast (begin (stat (identity name) (identity buf)))))
(define-cfunclike-macro PerlLIO_lstat (name buf) (scm-cast (begin (lstat (identity name) (identity buf)))))
(define-cfunclike-macro PerlLIO_mktemp (file) (scm-cast (begin (mktemp (identity file)))))
(define-cfunclike-macro PerlLIO_mkstemp (file) (scm-cast (begin (mkstemp (identity file)))))
(define-cfunclike-macro PerlLIO_open (file flag) (scm-cast (begin (open (identity file) (identity flag)))))
(define-cfunclike-macro PerlLIO_open3 (file flag perm) (scm-cast (begin (open (identity file) (identity flag) (identity perm)))))
(define-cfunclike-macro PerlLIO_read (fd buf count) (scm-cast (begin (read (identity fd) (identity buf) (identity count)))))
(define-cfunclike-macro PerlLIO_rename (old new) (scm-cast (begin (rename (identity old) (identity new)))))
(define-cfunclike-macro PerlLIO_setmode (fd mode) (scm-cast (begin (setmode (identity fd) (identity mode)))))
(define-cfunclike-macro PerlLIO_tmpnam (str) (scm-cast (begin (tmpnam (identity str)))))
(define-cfunclike-macro PerlLIO_umask (mode) (scm-cast (begin (umask (identity mode)))))
(define-cfunclike-macro PerlLIO_unlink (file) (scm-cast (begin (unlink (identity file)))))
(define-cfunclike-macro PerlLIO_write (fd buf count) (scm-cast (begin (write (identity fd) (identity buf) (identity count)))))
(define-cfunclike-macro PerlMem_malloc (size) (scm-cast (begin (malloc (identity size)))))
(define-cfunclike-macro PerlMem_realloc (buf size) (scm-cast (begin (realloc (identity buf) (identity size)))))
(define-cfunclike-macro PerlMem_free (buf) (scm-cast (begin (free (identity buf)))))
(define-cfunclike-macro PerlMem_calloc (num size) (scm-cast (begin (calloc (identity num) (identity size)))))
(define-cfunclike-macro PerlMemShared_malloc (size) (scm-cast (begin (malloc (identity size)))))
(define-cfunclike-macro PerlMemShared_realloc (buf size) (scm-cast (begin (realloc (identity buf) (identity size)))))
(define-cfunclike-macro PerlMemShared_free (buf) (scm-cast (begin (free (identity buf)))))
(define-cfunclike-macro PerlMemShared_calloc (num size) (scm-cast (begin (calloc (identity num) (identity size)))))
(define-cfunclike-macro PerlMemParse_malloc (size) (scm-cast (begin (malloc (identity size)))))
(define-cfunclike-macro PerlMemParse_realloc (buf size) (scm-cast (begin (realloc (identity buf) (identity size)))))
(define-cfunclike-macro PerlMemParse_free (buf) (scm-cast (begin (free (identity buf)))))
(define-cfunclike-macro PerlMemParse_calloc (num size) (scm-cast (begin (calloc (identity num) (identity size)))))
(define-cfunclike-macro PerlProc_crypt (c s) (scm-cast (begin (crypt (identity c) (identity s)))))
(define-cfunclike-macro PerlProc_exit (s) (scm-cast (begin (exit (identity s)))))
(define-cfunclike-macro PerlProc__exit (s) (scm-cast (begin (_exit (identity s)))))
(define-cfunclike-macro PerlProc_execl (c w x y z) (scm-cast (begin (execl (identity c) (identity w) (identity x) (identity y) (identity z)))))
(define-cfunclike-macro PerlProc_execv (c a) (scm-cast (begin (execv (identity c) (identity a)))))
(define-cfunclike-macro PerlProc_execvp (c a) (scm-cast (begin (execvp (identity c) (identity a)))))
(define-cfunclike-macro PerlProc_kill (i a) (scm-cast (begin (kill (identity i) (identity a)))))
(define-cfunclike-macro PerlProc_killpg (i a) (scm-cast (begin (killpg (identity i) (identity a)))))
(define-cfunclike-macro PerlProc_pipe (fd) (scm-cast (begin (pipe (identity fd)))))
(define-cfunclike-macro PerlProc_setuid (u) (scm-cast (begin (setuid (identity u)))))
(define-cfunclike-macro PerlProc_setgid (g) (scm-cast (begin (setgid (identity g)))))
(define-cfunclike-macro PerlProc_sleep (t) (scm-cast (begin (sleep (identity t)))))
(define-cfunclike-macro PerlProc_times (t) (scm-cast (begin (times (identity t)))))
(define-cfunclike-macro PerlProc_wait (t) (scm-cast (begin (wait (identity t)))))
(define-cfunclike-macro PerlProc_waitpid (p s f) (scm-cast (begin (waitpid (identity p) (identity s) (identity f)))))
(define-cfunclike-macro PerlProc_setjmp (b n) (scm-cast (begin (sigsetjmp (identity b) (identity n)))))
(define-cfunclike-macro PerlProc_longjmp (b n) (scm-cast (begin (siglongjmp (identity b) (identity n)))))
(define-cfunclike-macro PerlProc_signal (n h) (scm-cast (begin (signal (identity n) (identity h)))))
(define-cfunclike-macro PerlProc_gettimeofday (t z) (scm-cast (begin (gettimeofday (identity t) (identity z)))))
(define-cfunclike-macro PerlSock_accept (s a l) (scm-cast (begin (accept s a l))))
(define-cfunclike-macro PerlSock_bind (s n l) (scm-cast (begin (bind s n l))))
(define-cfunclike-macro PerlSock_connect (s n l) (scm-cast (begin (connect s n l))))
(define-cfunclike-macro PerlSock_gethostbyaddr (a l t) (scm-cast (begin (gethostbyaddr a l t))))
(define-cfunclike-macro PerlSock_gethostbyname (n) (scm-cast (begin (gethostbyname n))))
(define-cmacro PerlSock_gethostent (scm-cast (begin gethostent)))
(define-cmacro PerlSock_endhostent (scm-cast (begin endhostent)))
(define-cfunclike-macro PerlSock_gethostname (n l) (scm-cast (begin (gethostname n l))))
(define-cfunclike-macro PerlSock_getnetbyaddr (n t) (scm-cast (begin (getnetbyaddr n t))))
(define-cfunclike-macro PerlSock_getnetbyname (n) (scm-cast (begin (getnetbyname n))))
(define-cmacro PerlSock_getnetent (scm-cast (begin getnetent)))
(define-cmacro PerlSock_endnetent (scm-cast (begin endnetent)))
(define-cfunclike-macro PerlSock_getpeername (s n l) (scm-cast (begin (getpeername s n l))))
(define-cfunclike-macro PerlSock_getprotobyname (n) (scm-cast (begin (getprotobyname n))))
(define-cfunclike-macro PerlSock_getprotobynumber (n) (scm-cast (begin (getprotobynumber n))))
(define-cmacro PerlSock_getprotoent (scm-cast (begin getprotoent)))
(define-cmacro PerlSock_endprotoent (scm-cast (begin endprotoent)))
(define-cfunclike-macro PerlSock_getservbyname (n p) (scm-cast (begin (getservbyname n p))))
(define-cfunclike-macro PerlSock_getservbyport (port p) (scm-cast (begin (getservbyport port p))))
(define-cmacro PerlSock_getservent (scm-cast (begin getservent)))
(define-cmacro PerlSock_endservent (scm-cast (begin endservent)))
(define-cfunclike-macro PerlSock_getsockname (s n l) (scm-cast (begin (getsockname s n l))))
(define-cfunclike-macro PerlSock_getsockopt (s l n v i) (scm-cast (begin (getsockopt s l n v i))))
(define-cfunclike-macro PerlSock_inet_addr (c) (scm-cast (begin (inet_addr c))))
(define-cfunclike-macro PerlSock_inet_ntoa (i) (scm-cast (begin (inet_ntoa i))))
(define-cfunclike-macro PerlSock_listen (s b) (scm-cast (begin (listen s b))))
(define-cfunclike-macro PerlSock_recv (s b l f) (scm-cast (begin (recv s b l f))))
(define-cfunclike-macro PerlSock_recvfrom (s b l f from fromlen) (scm-cast (begin (recvfrom s b l f from fromlen))))
(define-cfunclike-macro PerlSock_select (n r w e t) (scm-cast (begin (select n r w e t))))
(define-cfunclike-macro PerlSock_send (s b l f) (scm-cast (begin (send s b l f))))
(define-cfunclike-macro PerlSock_sendto (s b l f t tlen) (scm-cast (begin (sendto s b l f t tlen))))
(define-cfunclike-macro PerlSock_sethostent (f) (scm-cast (begin (sethostent f))))
(define-cfunclike-macro PerlSock_setnetent (f) (scm-cast (begin (setnetent f))))
(define-cfunclike-macro PerlSock_setprotoent (f) (scm-cast (begin (setprotoent f))))
(define-cfunclike-macro PerlSock_setservent (f) (scm-cast (begin (setservent f))))
(define-cfunclike-macro PerlSock_setsockopt (s l n v len) (scm-cast (begin (setsockopt s l n v len))))
(define-cfunclike-macro PerlSock_shutdown (s h) (scm-cast (begin (shutdown s h))))
(define-cfunclike-macro PerlSock_socket (a t p) (scm-cast (begin (socket a t p))))
(define-cfunclike-macro PerlSock_socketpair (a t p f) (scm-cast (begin (socketpair a t p f))))
(define-cmacro USE_HASH_SEED 0)
(define-cmacro ROPT_ANCH 15)
(define-cmacro ROPT_ANCH_SINGLE 12)
(define-cmacro ROPT_ANCH_BOL 1)
(define-cmacro ROPT_ANCH_MBOL 2)
(define-cmacro ROPT_ANCH_SBOL 4)
(define-cmacro ROPT_ANCH_GPOS 8)
(define-cmacro ROPT_SKIP 16)
(define-cmacro ROPT_IMPLICIT 32)
(define-cmacro ROPT_NOSCAN 64)
(define-cmacro ROPT_GPOS_SEEN 128)
(define-cmacro ROPT_CHECK_ALL 256)
(define-cmacro ROPT_LOOKBEHIND_SEEN 512)
(define-cmacro ROPT_EVAL_SEEN 1024)
(define-cmacro ROPT_CANY_SEEN 2048)
(define-cmacro ROPT_SANY_SEEN 2048)
(define-cmacro ROPT_UTF8 65536)
(define-cmacro ROPT_NAUGHTY 131072)
(define-cmacro ROPT_COPY_DONE 262144)
(define-cmacro ROPT_TAINTED_SEEN 524288)
(define-cmacro ROPT_MATCH_UTF8 268435456)
(define-cmacro RE_USE_INTUIT_NOML 1048576)
(define-cmacro RE_USE_INTUIT_ML 2097152)
(define-cmacro REINT_AUTORITATIVE_NOML 4194304)
(define-cmacro REINT_AUTORITATIVE_ML 8388608)
(define-cmacro REINT_ONCE_NOML 16777216)
(define-cmacro REINT_ONCE_ML 33554432)
(define-cmacro RE_INTUIT_ONECHAR 67108864)
(define-cmacro RE_INTUIT_TAIL 134217728)
(define-cmacro RE_USE_INTUIT 3145728)
(define-cmacro REINT_AUTORITATIVE 12582912)
(define-cmacro REINT_ONCE 50331648)
(define-cfunclike-macro RX_MATCH_TAINTED (prog) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) 524288))))
(define-cfunclike-macro RX_MATCH_TAINTED_on (prog) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) 524288))) (set! (ref (deref (identity prog)) 'reganch) %v) %v))))
(define-cfunclike-macro RX_MATCH_TAINTED_off (prog) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) -524289))) (set! (ref (deref (identity prog)) 'reganch) %v) %v))))
(define-cfunclike-macro RX_MATCH_TAINTED_set (prog t) (scm-cast (begin (if (eq? (cast <real> (identity t)) 0) (let ((%v (logand (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) -524289))) (set! (ref (deref (identity prog)) 'reganch) %v) %v) (let ((%v (logior (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) 524288))) (set! (ref (deref (identity prog)) 'reganch) %v) %v)))))
(define-cfunclike-macro RX_MATCH_COPIED (prog) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) 262144))))
(define-cfunclike-macro RX_MATCH_COPIED_on (prog) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) 262144))) (set! (ref (deref (identity prog)) 'reganch) %v) %v))))
(define-cfunclike-macro RX_MATCH_COPIED_off (prog) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) -262145))) (set! (ref (deref (identity prog)) 'reganch) %v) %v))))
(define-cfunclike-macro RX_MATCH_COPIED_set (prog t) (scm-cast (begin (if (eq? (cast <real> (identity t)) 0) (let ((%v (logand (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) -262145))) (set! (ref (deref (identity prog)) 'reganch) %v) %v) (let ((%v (logior (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) 262144))) (set! (ref (deref (identity prog)) 'reganch) %v) %v)))))
(define-cfunclike-macro RX_MATCH_UTF8 (prog) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) 268435456))))
(define-cfunclike-macro RX_MATCH_UTF8_on (prog) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) 268435456))) (set! (ref (deref (identity prog)) 'reganch) %v) %v))))
(define-cfunclike-macro RX_MATCH_UTF8_off (prog) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity prog)) 'reganch)) -268435457))) (set! (ref (deref (identity prog)) 'reganch) %v) %v))))
(define-cmacro REXEC_COPY_STR 1)
(define-cmacro REXEC_CHECKED 2)
(define-cmacro REXEC_SCREAM 4)
(define-cmacro REXEC_IGNOREPOS 8)
(define-cmacro REXEC_NOT_FIRST 16)
(define-cmacro REXEC_ML 32)
(define-cfunclike-macro ReREFCNT_inc (re) (scm-cast (begin (begin (cast <c-void> (let ((G509 (cast <real> re))) (if (eq? G509 0) G509 (post++ (raw-ref (deref re) 'refcnt))))) re))))
(define-cmacro FBMcf_TAIL_DOLLAR 1)
(define-cmacro FBMcf_TAIL_DOLLARM 2)
(define-cmacro FBMcf_TAIL_Z 4)
(define-cmacro FBMcf_TAIL_z 8)
(define-cmacro FBMcf_TAIL 15)
(define-cmacro FBMrf_MULTILINE 1)
(define-cfunclike-macro SvANY (sv) (scm-cast (begin (raw-ref (deref (identity sv)) 'sv_any))))
(define-cfunclike-macro SvFLAGS (sv) (scm-cast (begin (raw-ref (deref (identity sv)) 'sv_flags))))
(define-cfunclike-macro SvREFCNT (sv) (scm-cast (begin (raw-ref (deref (identity sv)) 'sv_refcnt))))
(define-cfunclike-macro ATOMIC_INC (count) (scm-cast (begin (pre++ count))))
(define-cfunclike-macro ATOMIC_DEC_AND_TEST (res count) (scm-cast (begin (let ((%v (if (equal? (cast <real> (pre-- count)) 0) 1 0))) (set! (ref res) %v) %v))))
(define-cfunclike-macro SvREFCNT_inc (sv) (scm-cast (begin (begin let* ((_sv (make (ptr <SV>)))) (set! (ref _sv) (cast (ptr <SV>) (identity sv))) (if (eq? (cast <real> _sv) 0) 0 (pre++ (raw-ref (deref (identity _sv)) 'sv_refcnt))) _sv))))
(define-cmacro SVTYPEMASK 255)
(define-cfunclike-macro SvTYPE (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 255))))
(define-cmacro SVs_PADBUSY 256)
(define-cmacro SVs_PADTMP 512)
(define-cmacro SVs_PADMY 1024)
(define-cmacro SVs_TEMP 2048)
(define-cmacro SVs_OBJECT 4096)
(define-cmacro SVs_GMG 8192)
(define-cmacro SVs_SMG 16384)
(define-cmacro SVs_RMG 32768)
(define-cmacro SVf_IOK 65536)
(define-cmacro SVf_NOK 131072)
(define-cmacro SVf_POK 262144)
(define-cmacro SVf_ROK 524288)
(define-cmacro SVf_FAKE 1048576)
(define-cmacro SVf_OOK 2097152)
(define-cmacro SVf_BREAK 4194304)
(define-cmacro SVf_READONLY 8388608)
(define-cmacro SVp_IOK 16777216)
(define-cmacro SVp_NOK 33554432)
(define-cmacro SVp_POK 67108864)
(define-cmacro SVp_SCREAM 134217728)
(define-cmacro SVf_UTF8 536870912)
(define-cmacro SVf_THINKFIRST 9961472)
(define-cmacro SVf_OK 118423552)
(define-cmacro SVf_AMAGIC 268435456)
(define-cmacro PRIVSHIFT 8)
(define-cmacro SVpad_OUR 2147483648)
(define-cmacro SVpad_TYPED 1073741824)
(define-cmacro SVf_IVisUV 2147483648)
(define-cmacro SVpfm_COMPILED 2147483648)
(define-cmacro SVpbm_VALID 2147483648)
(define-cmacro SVpbm_TAIL 1073741824)
(define-cmacro SVrepl_EVAL 1073741824)
(define-cmacro SVphv_REHASH 268435456)
(define-cmacro SVphv_SHAREKEYS 536870912)
(define-cmacro SVphv_LAZYDEL 1073741824)
(define-cmacro SVphv_HASKFLAGS 2147483648)
(define-cmacro SVprv_WEAKREF 2147483648)
(define-cmacro IOf_ARGV 1)
(define-cmacro IOf_START 2)
(define-cmacro IOf_FLUSH 4)
(define-cmacro IOf_DIDTOP 8)
(define-cmacro IOf_UNTAINT 16)
(define-cmacro IOf_NOLINE 32)
(define-cmacro IOf_FAKE_DIRP 64)
(define-cfunclike-macro SvNIOK (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 196608))))
(define-cfunclike-macro SvNIOKp (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 50331648))))
(define-cfunclike-macro SvNIOK_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -2198011905))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvOK (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 118423552))))
(define-cfunclike-macro SvOKp (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 117440512))))
(define-cfunclike-macro SvIOKp (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 16777216))))
(define-cfunclike-macro SvNOKp (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 33554432))))
(define-cfunclike-macro SvNOKp_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 33554432))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvPOKp (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 67108864))))
(define-cfunclike-macro SvPOKp_on (sv) (scm-cast (begin (begin (begin begin 0) (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 67108864))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v)))))
(define-cfunclike-macro SvIOK (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 65536))))
(define-cfunclike-macro SvIOK_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -2164326401))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvIOK_UV (sv) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2147549184)) 2147549184) 1 0))))
(define-cfunclike-macro SvUOK (sv) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2147549184)) 2147549184) 1 0))))
(define-cfunclike-macro SvIOK_notUV (sv) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2147549184)) 65536) 1 0))))
(define-cfunclike-macro SvIsUV (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2147483648))))
(define-cfunclike-macro SvIsUV_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2147483648))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvIsUV_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -2147483649))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvNOK (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 131072))))
(define-cfunclike-macro SvNOK_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 33685504))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvNOK_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -33685505))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvUTF8 (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 536870912))))
(define-cfunclike-macro SvUTF8_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 536870912))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvUTF8_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -536870913))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvPOK (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 262144))))
(define-cfunclike-macro SvPOK_on (sv) (scm-cast (begin (begin (begin begin 0) (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 67371008))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v)))))
(define-cfunclike-macro SvPOK_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -67371009))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvPOK_only (sv) (scm-cast (begin (begin (begin (begin begin 0) (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -3071213569))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v)) (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 67371008))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v)))))
(define-cfunclike-macro SvPOK_only_UTF8 (sv) (scm-cast (begin (begin (begin (begin begin 0) (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -2534342657))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v)) (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 67371008))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v)))))
(define-cfunclike-macro SvOOK (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2097152))))
(define-cfunclike-macro SvOOK_on (sv) (scm-cast (begin (begin (cast <c-void> (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -2164326401))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v)) (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2097152))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v)))))
(define-cfunclike-macro SvFAKE (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 1048576))))
(define-cfunclike-macro SvFAKE_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 1048576))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvFAKE_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -1048577))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvROK (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 524288))))
(define-cfunclike-macro SvROK_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 524288))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvROK_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -268959745))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvMAGICAL (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 57344))))
(define-cfunclike-macro SvMAGICAL_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 57344))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvMAGICAL_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -57345))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvGMAGICAL (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 8192))))
(define-cfunclike-macro SvGMAGICAL_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 8192))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvGMAGICAL_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -8193))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvSMAGICAL (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 16384))))
(define-cfunclike-macro SvSMAGICAL_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 16384))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvSMAGICAL_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -16385))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvRMAGICAL (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 32768))))
(define-cfunclike-macro SvRMAGICAL_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 32768))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvRMAGICAL_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -32769))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvAMAGIC (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 268435456))))
(define-cfunclike-macro SvAMAGIC_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 268435456))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvAMAGIC_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -268435457))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvGAMAGIC (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 268443648))))
(define-cfunclike-macro SvWEAKREF (sv) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2148007936)) 2148007936) 1 0))))
(define-cfunclike-macro SvWEAKREF_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2148007936))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvWEAKREF_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -2148007937))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvTHINKFIRST (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 9961472))))
(define-cfunclike-macro SvPADBUSY (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 256))))
(define-cfunclike-macro SvPADTMP (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 512))))
(define-cfunclike-macro SvPADTMP_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 768))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvPADTMP_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -513))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvPADMY (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 1024))))
(define-cfunclike-macro SvPADMY_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 1280))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvTEMP (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2048))))
(define-cfunclike-macro SvTEMP_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2048))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvTEMP_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -2049))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvOBJECT (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 4096))))
(define-cfunclike-macro SvOBJECT_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 4096))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvOBJECT_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -4097))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvREADONLY (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 8388608))))
(define-cfunclike-macro SvREADONLY_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 8388608))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvREADONLY_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -8388609))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvSCREAM (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 134217728))))
(define-cfunclike-macro SvSCREAM_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 134217728))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvSCREAM_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -134217729))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvCOMPILED (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2147483648))))
(define-cfunclike-macro SvCOMPILED_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2147483648))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvCOMPILED_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -2147483649))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvEVALED (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 1073741824))))
(define-cfunclike-macro SvEVALED_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 1073741824))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvEVALED_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -1073741825))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvTAIL (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 1073741824))))
(define-cfunclike-macro SvTAIL_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 1073741824))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvTAIL_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -1073741825))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvVALID (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2147483648))))
(define-cfunclike-macro SvVALID_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 2147483648))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvVALID_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -2147483649))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvREPADTMP (sv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 1048576))))
(define-cfunclike-macro SvREPADTMP_on (sv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 1048576))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvREPADTMP_off (sv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) -1048577))) (set! (ref (deref (identity sv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro SvRV (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XRV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xrv_rv))))
(define-cfunclike-macro SvRVx (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XRV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xrv_rv))))
(define-cfunclike-macro SvIVX (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xiv_iv))))
(define-cfunclike-macro SvIVXx (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xiv_iv))))
(define-cfunclike-macro SvUVX (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVUV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xuv_uv))))
(define-cfunclike-macro SvUVXx (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVUV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xuv_uv))))
(define-cfunclike-macro SvNVX (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVNV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xnv_nv))))
(define-cfunclike-macro SvNVXx (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVNV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xnv_nv))))
(define-cfunclike-macro SvPVX (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_pv))))
(define-cfunclike-macro SvPVXx (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_pv))))
(define-cfunclike-macro SvCUR (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_cur))))
(define-cfunclike-macro SvLEN (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_len))))
(define-cfunclike-macro SvLENx (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_len))))
(define-cfunclike-macro SvEND (sv) (scm-cast (begin (if (is-a? (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_pv) <c-ptr>) (c-ptr+ (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_pv) (cast <real> (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_cur))) (+ (cast <real> (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_pv)) (cast <real> (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_cur)))))))
(define-cfunclike-macro SvMAGIC (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVMG>) (raw-ref (deref (identity sv)) 'sv_any))) 'xmg_magic))))
(define-cfunclike-macro SvSTASH (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVMG>) (raw-ref (deref (identity sv)) 'sv_any))) 'xmg_stash))))
(define-cfunclike-macro SvIV_set (sv val) (scm-cast (begin (cast <c-void> (begin begin 0 (let ((%v (identity val))) (set! (ref (deref (cast (ptr <XPVIV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xiv_iv) %v) %v))))))
(define-cfunclike-macro SvNV_set (sv val) (scm-cast (begin (cast <c-void> (begin begin 0 (let ((%v (identity val))) (set! (ref (deref (cast (ptr <XPVNV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xnv_nv) %v) %v))))))
(define-cfunclike-macro SvPV_set (sv val) (scm-cast (begin (cast <c-void> (begin begin 0 (let ((%v (identity val))) (set! (ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_pv) %v) %v))))))
(define-cfunclike-macro SvCUR_set (sv val) (scm-cast (begin (cast <c-void> (begin begin 0 (let ((%v (identity val))) (set! (ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_cur) %v) %v))))))
(define-cfunclike-macro SvLEN_set (sv val) (scm-cast (begin (cast <c-void> (begin begin 0 (let ((%v (identity val))) (set! (ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_len) %v) %v))))))
(define-cfunclike-macro SvEND_set (sv val) (scm-cast (begin (cast <c-void> (begin begin 0 (let ((%v (if (is-a? (identity val) <c-ptr>) (c-ptr- (identity val) (cast <real> (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_pv))) (- (cast <real> (identity val)) (cast <real> (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_pv)))))) (set! (ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_cur) %v) %v))))))
(define-cfunclike-macro BmRARE (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVBM>) (raw-ref (deref (identity sv)) 'sv_any))) 'xbm_rare))))
(define-cfunclike-macro BmUSEFUL (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVBM>) (raw-ref (deref (identity sv)) 'sv_any))) 'xbm_useful))))
(define-cfunclike-macro BmPREVIOUS (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVBM>) (raw-ref (deref (identity sv)) 'sv_any))) 'xbm_previous))))
(define-cfunclike-macro FmLINES (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVFM>) (raw-ref (deref (identity sv)) 'sv_any))) 'xfm_lines))))
(define-cfunclike-macro LvTYPE (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVLV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xlv_type))))
(define-cfunclike-macro LvTARG (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVLV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xlv_targ))))
(define-cfunclike-macro LvTARGOFF (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVLV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xlv_targoff))))
(define-cfunclike-macro LvTARGLEN (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVLV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xlv_targlen))))
(define-cfunclike-macro IoIFP (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_ifp))))
(define-cfunclike-macro IoOFP (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_ofp))))
(define-cfunclike-macro IoDIRP (sv) (scm-cast (begin (raw-ref (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_dirpu) 'xiou_dirp))))
(define-cfunclike-macro IoANY (sv) (scm-cast (begin (raw-ref (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_dirpu) 'xiou_any))))
(define-cfunclike-macro IoLINES (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_lines))))
(define-cfunclike-macro IoPAGE (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_page))))
(define-cfunclike-macro IoPAGE_LEN (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_page_len))))
(define-cfunclike-macro IoLINES_LEFT (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_lines_left))))
(define-cfunclike-macro IoTOP_NAME (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_top_name))))
(define-cfunclike-macro IoTOP_GV (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_top_gv))))
(define-cfunclike-macro IoFMT_NAME (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_fmt_name))))
(define-cfunclike-macro IoFMT_GV (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_fmt_gv))))
(define-cfunclike-macro IoBOTTOM_NAME (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_bottom_name))))
(define-cfunclike-macro IoBOTTOM_GV (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_bottom_gv))))
(define-cfunclike-macro IoSUBPROCESS (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_subprocess))))
(define-cfunclike-macro IoTYPE (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_type))))
(define-cfunclike-macro IoFLAGS (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVIO>) (raw-ref (deref (identity sv)) 'sv_any))) 'xio_flags))))
(define-cmacro IoTYPE_RDONLY 60)
(define-cmacro IoTYPE_WRONLY 62)
(define-cmacro IoTYPE_RDWR 43)
(define-cmacro IoTYPE_APPEND 97)
(define-cmacro IoTYPE_PIPE 124)
(define-cmacro IoTYPE_STD 45)
(define-cmacro IoTYPE_SOCKET 115)
(define-cmacro IoTYPE_CLOSED 32)
(define-cmacro IoTYPE_IMPLICIT 73)
(define-cmacro IoTYPE_NUMERIC 35)
(define-cfunclike-macro SvIsCOW (sv) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 9437184)) 9437184) 1 0))))
(define-cfunclike-macro SvIsCOW_shared_hash (sv) (scm-cast (begin (let ((G518 (cast <real> (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 9437184)) 9437184) 1 0)))) (if (eq? G518 0) G518 (if (equal? (cast <real> (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_len)) 0) 1 0))))))
(define-cmacro SV_IMMEDIATE_UNREF 1)
(define-cmacro SV_GMAGIC 2)
(define-cmacro SV_COW_DROP_PV 4)
(define-cmacro SV_UTF8_NO_ENCODING 8)
(define-cmacro SV_NOSTEAL 16)
(define-cfunclike-macro isGV (sv) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 255)) (cast <real> SVt_PVGV)) 1 0))))
(define-cmacro CLONEf_COPY_STACKS 1)
(define-cmacro CLONEf_KEEP_PTR_TABLE 2)
(define-cmacro CLONEf_CLONE_HOST 4)
(define-cmacro CLONEf_JOIN_IN 8)
(define-cfunclike-macro PERL_FILE_IS_ABSOLUTE (f) (scm-cast (begin (if (equal? (cast <real> (deref (identity f))) 47) 1 0))))
(define-cmacro FF_END 0)
(define-cmacro FF_LINEMARK 1)
(define-cmacro FF_LITERAL 2)
(define-cmacro FF_SKIP 3)
(define-cmacro FF_FETCH 4)
(define-cmacro FF_CHECKNL 5)
(define-cmacro FF_CHECKCHOP 6)
(define-cmacro FF_SPACE 7)
(define-cmacro FF_HALFSPACE 8)
(define-cmacro FF_ITEM 9)
(define-cmacro FF_CHOP 10)
(define-cmacro FF_LINEGLOB 11)
(define-cmacro FF_DECIMAL 12)
(define-cmacro FF_NEWLINE 13)
(define-cmacro FF_BLANK 14)
(define-cmacro FF_MORE 15)
(define-cmacro FF_0DECIMAL 16)
(define-cmacro FF_LINESNGL 17)
(define-cfunclike-macro GvXPVGV (gv) (scm-cast (begin (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any)))))
(define-cfunclike-macro GvGP (gv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp))))
(define-cfunclike-macro GvNAME (gv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_name))))
(define-cfunclike-macro GvNAMELEN (gv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_namelen))))
(define-cfunclike-macro GvSTASH (gv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_stash))))
(define-cfunclike-macro GvFLAGS (gv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags))))
(define-cfunclike-macro GvSV (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_sv))))
(define-cfunclike-macro GvREFCNT (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_refcnt))))
(define-cfunclike-macro GvIO (gv) (scm-cast (begin (if (eq? (cast <real> (let ((G520 (cast <real> (let ((G519 (cast <real> (identity gv)))) (if (eq? G519 0) G519 (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (cast (ptr <SV>) gv)) 'sv_flags)) 255)) (cast <real> SVt_PVGV)) 1 0)))))) (if (eq? G520 0) G520 (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)))) 0) 0 (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_io)))))
(define-cfunclike-macro GvIOp (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_io))))
(define-cfunclike-macro GvFORM (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_form))))
(define-cfunclike-macro GvAV (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_av))))
(define-cfunclike-macro GvREFCNT_inc (gv) (scm-cast (begin (cast (ptr <GV>) (begin let* ((_sv (make (ptr <SV>)))) (set! (ref _sv) (cast (ptr <SV>) (identity gv))) (if (eq? (cast <real> _sv) 0) 0 (pre++ (raw-ref (deref (identity _sv)) 'sv_refcnt))) _sv)))))
(define-cfunclike-macro GvHV (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_hv))))
(define-cfunclike-macro GvCV (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_cv))))
(define-cfunclike-macro GvCVGEN (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_cvgen))))
(define-cfunclike-macro GvCVu (gv) (scm-cast (begin (if (eq? (cast <real> (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_cvgen)) 0) (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_cv) (cast (ptr <CV>) (cast (ptr <c-void>) 0))))))
(define-cfunclike-macro GvGPFLAGS (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_flags))))
(define-cfunclike-macro GvLINE (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_line))))
(define-cfunclike-macro GvFILE (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_file))))
(define-cfunclike-macro GvEGV (gv) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_egv))))
(define-cfunclike-macro GvENAME (gv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (if (eq? (cast <real> (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_egv)) 0) gv (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_egv))) 'sv_any))) 'xgv_name))))
(define-cfunclike-macro GvESTASH (gv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (if (eq? (cast <real> (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_egv)) 0) gv (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_egv))) 'sv_any))) 'xgv_stash))))
(define-cmacro GVf_INTRO 1)
(define-cmacro GVf_MULTI 2)
(define-cmacro GVf_ASSUMECV 4)
(define-cmacro GVf_IN_PAD 8)
(define-cmacro GVf_IMPORTED 240)
(define-cmacro GVf_IMPORTED_SV 16)
(define-cmacro GVf_IMPORTED_AV 32)
(define-cmacro GVf_IMPORTED_HV 64)
(define-cmacro GVf_IMPORTED_CV 128)
(define-cfunclike-macro GvINTRO (gv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 1))))
(define-cfunclike-macro GvINTRO_on (gv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 1))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvINTRO_off (gv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) -2))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvMULTI (gv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 2))))
(define-cfunclike-macro GvMULTI_on (gv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 2))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvMULTI_off (gv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) -3))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvASSUMECV (gv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 4))))
(define-cfunclike-macro GvASSUMECV_on (gv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 4))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvASSUMECV_off (gv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) -5))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIMPORTED (gv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 240))))
(define-cfunclike-macro GvIMPORTED_on (gv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 240))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIMPORTED_off (gv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) -241))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIMPORTED_SV (gv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 16))))
(define-cfunclike-macro GvIMPORTED_SV_on (gv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 16))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIMPORTED_SV_off (gv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) -17))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIMPORTED_AV (gv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 32))))
(define-cfunclike-macro GvIMPORTED_AV_on (gv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 32))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIMPORTED_AV_off (gv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) -33))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIMPORTED_HV (gv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 64))))
(define-cfunclike-macro GvIMPORTED_HV_on (gv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 64))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIMPORTED_HV_off (gv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) -65))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIMPORTED_CV (gv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 128))))
(define-cfunclike-macro GvIMPORTED_CV_on (gv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 128))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIMPORTED_CV_off (gv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) -129))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIN_PAD (gv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 8))))
(define-cfunclike-macro GvIN_PAD_on (gv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) 8))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cfunclike-macro GvIN_PAD_off (gv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags)) -9))) (set! (ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_flags) %v) %v))))
(define-cmacro GVf_UNIQUE 1)
(define-cfunclike-macro GvUNIQUE (gv) (scm-cast (begin (let ((G523 (cast <real> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)))) (if (eq? G523 0) G523 (logand (cast <integer> (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_flags)) 1))))))
(define-cfunclike-macro GvUNIQUE_on (gv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_flags)) 1))) (set! (ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_flags) %v) %v))))
(define-cfunclike-macro GvUNIQUE_off (gv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_flags)) -2))) (set! (ref (deref (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity gv)) 'sv_any))) 'xgv_gp)) 'gp_flags) %v) %v))))
(define-cmacro GV_UNIQUE_CHECK 0)
(define-cmacro Nullgv (scm-cast (begin (cast (ptr <GV>) (cast (ptr <c-void>) 0)))))
(define-cmacro DM_UID 3)
(define-cmacro DM_RUID 1)
(define-cmacro DM_EUID 2)
(define-cmacro DM_GID 48)
(define-cmacro DM_RGID 16)
(define-cmacro DM_EGID 32)
(define-cmacro DM_DELAY 256)
(define-cmacro GV_ADD 1)
(define-cmacro GV_ADDMULTI 2)
(define-cmacro GV_ADDWARN 4)
(define-cmacro GV_ADDINEVAL 8)
(define-cmacro GV_NOINIT 16)
(define-cmacro NOT_IN_PAD (scm-cast (begin (cast <PADOFFSET> -1))))
(define-cmacro padnew_CLONE 1)
(define-cmacro padnew_SAVE 2)
(define-cmacro padnew_SAVESUB 4)
(define-cfunclike-macro ASSERT_CURPAD_LEGAL (label) 0)
(define-cfunclike-macro ASSERT_CURPAD_ACTIVE (label) 0)
(define-cfunclike-macro PAD_BASE_SV (padlist po) (scm-cast (begin (if (eq? (cast <real> (ref (cast (ptr (ptr <SV>)) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity padlist)) 'sv_any))) 'xav_array)) 1)) 0) (cast (ptr <SV>) (cast (ptr <c-void>) 0)) (ref (cast (ptr (ptr <SV>)) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (cast (ptr <AV>) (ref (cast (ptr (ptr <SV>)) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity padlist)) 'sv_any))) 'xav_array)) 1))) 'sv_any))) 'xav_array)) (cast <integer> po))) 0)))
(define-cfunclike-macro CX_CURPAD_SV (block po) (scm-cast (begin (ref (cast (ptr (ptr <SV>)) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (cast (ptr <AV>) (raw-ref (identity block) 'oldcomppad))) 'sv_any))) 'xav_array)) (cast <integer> po)))))
(define-cmacro Nullcv (scm-cast (begin (cast (ptr <CV>) (cast (ptr <c-void>) 0)))))
(define-cfunclike-macro CvSTASH (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_stash))))
(define-cfunclike-macro CvSTART (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_start))))
(define-cfunclike-macro CvROOT (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_root))))
(define-cfunclike-macro CvXSUB (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_xsub))))
(define-cfunclike-macro CvXSUBANY (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_xsubany))))
(define-cfunclike-macro CvGV (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_gv))))
(define-cfunclike-macro CvFILE (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_file))))
(define-cfunclike-macro CvDEPTH (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_depth))))
(define-cfunclike-macro CvPADLIST (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_padlist))))
(define-cfunclike-macro CvOUTSIDE (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_outside))))
(define-cfunclike-macro CvFLAGS (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_flags))))
(define-cfunclike-macro CvOUTSIDE_SEQ (sv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xcv_outside_seq))))
(define-cmacro CVf_CLONE 1)
(define-cmacro CVf_CLONED 2)
(define-cmacro CVf_ANON 4)
(define-cmacro CVf_OLDSTYLE 8)
(define-cmacro CVf_UNIQUE 16)
(define-cmacro CVf_NODEBUG 32)
(define-cmacro CVf_METHOD 64)
(define-cmacro CVf_LOCKED 128)
(define-cmacro CVf_LVALUE 256)
(define-cmacro CVf_CONST 512)
(define-cmacro CVf_WEAKOUTSIDE 1024)
(define-cmacro CVf_BUILTIN_ATTRS 448)
(define-cfunclike-macro CvCLONE (cv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 1))))
(define-cfunclike-macro CvCLONE_on (cv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 1))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvCLONE_off (cv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -2))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvCLONED (cv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 2))))
(define-cfunclike-macro CvCLONED_on (cv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 2))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvCLONED_off (cv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -3))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvANON (cv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 4))))
(define-cfunclike-macro CvANON_on (cv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 4))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvANON_off (cv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -5))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvUNIQUE (cv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 16))))
(define-cfunclike-macro CvUNIQUE_on (cv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 16))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvUNIQUE_off (cv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -17))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvNODEBUG (cv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 32))))
(define-cfunclike-macro CvNODEBUG_on (cv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 32))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvNODEBUG_off (cv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -33))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvMETHOD (cv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 64))))
(define-cfunclike-macro CvMETHOD_on (cv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 64))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvMETHOD_off (cv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -65))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvLOCKED (cv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 128))))
(define-cfunclike-macro CvLOCKED_on (cv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 128))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvLOCKED_off (cv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -129))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvLVALUE (cv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 256))))
(define-cfunclike-macro CvLVALUE_on (cv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 256))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvLVALUE_off (cv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -257))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvEVAL (cv) (scm-cast (begin (let ((G525 (cast <real> (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 16)))) (if (eq? G525 0) G525 (if (eq? (cast <real> (logand (cast <integer> (raw-ref (deref (identity cv)) 'sv_flags)) 1048576)) 0) 1 0))))))
(define-cfunclike-macro CvEVAL_on (cv) (scm-cast (begin (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 16))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v) (let ((%v (logand (cast <integer> (raw-ref (deref (identity cv)) 'sv_flags)) -1048577))) (set! (ref (deref (identity cv)) 'sv_flags) %v) %v)))))
(define-cfunclike-macro CvEVAL_off (cv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -17))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvSPECIAL (cv) (scm-cast (begin (let ((G526 (cast <real> (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 16)))) (if (eq? G526 0) G526 (logand (cast <integer> (raw-ref (deref (identity cv)) 'sv_flags)) 1048576))))))
(define-cfunclike-macro CvSPECIAL_on (cv) (scm-cast (begin (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 16))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v) (let ((%v (logior (cast <integer> (raw-ref (deref (identity cv)) 'sv_flags)) 1048576))) (set! (ref (deref (identity cv)) 'sv_flags) %v) %v)))))
(define-cfunclike-macro CvSPECIAL_off (cv) (scm-cast (begin (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -17))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v) (let ((%v (logand (cast <integer> (raw-ref (deref (identity cv)) 'sv_flags)) -1048577))) (set! (ref (deref (identity cv)) 'sv_flags) %v) %v)))))
(define-cfunclike-macro CvCONST (cv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 512))))
(define-cfunclike-macro CvCONST_on (cv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 512))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvCONST_off (cv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -513))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvWEAKOUTSIDE (cv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 1024))))
(define-cfunclike-macro CvWEAKOUTSIDE_on (cv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) 1024))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cfunclike-macro CvWEAKOUTSIDE_off (cv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags)) -1025))) (set! (ref (deref (cast (ptr <XPVCV>) (raw-ref (deref (identity cv)) 'sv_any))) 'xcv_flags) %v) %v))))
(define-cmacro MAXO 352)
(define-cmacro OP_phoney_INPUT_ONLY -1)
(define-cmacro OP_phoney_OUTPUT_ONLY -2)
(define-cfunclike-macro OP_IS_SOCKET (op) (scm-cast (begin (let ((G538 (cast <real> (let ((G537 (cast <real> (let ((G536 (cast <real> (let ((G535 (cast <real> (let ((G534 (cast <real> (let ((G533 (cast <real> (let ((G532 (cast <real> (let ((G531 (cast <real> (let ((G530 (cast <real> (let ((G529 (cast <real> (let ((G528 (cast <real> (let ((G527 (cast <real> (if (equal? (cast <real> (identity op)) (cast <real> OP_ACCEPT)) 1 0)))) (if (eq? G527 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_BIND)) 1 0) G527))))) (if (eq? G528 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_CONNECT)) 1 0) G528))))) (if (eq? G529 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_GETPEERNAME)) 1 0) G529))))) (if (eq? G530 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_GETSOCKNAME)) 1 0) G530))))) (if (eq? G531 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_GSOCKOPT)) 1 0) G531))))) (if (eq? G532 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_LISTEN)) 1 0) G532))))) (if (eq? G533 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_RECV)) 1 0) G533))))) (if (eq? G534 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_SEND)) 1 0) G534))))) (if (eq? G535 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_SHUTDOWN)) 1 0) G535))))) (if (eq? G536 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_SOCKET)) 1 0) G536))))) (if (eq? G537 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_SOCKPAIR)) 1 0) G537))))) (if (eq? G538 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_SSOCKOPT)) 1 0) G538)))))
(define-cfunclike-macro OP_IS_FILETEST (op) (scm-cast (begin (let ((G564 (cast <real> (let ((G563 (cast <real> (let ((G562 (cast <real> (let ((G561 (cast <real> (let ((G560 (cast <real> (let ((G559 (cast <real> (let ((G558 (cast <real> (let ((G557 (cast <real> (let ((G556 (cast <real> (let ((G555 (cast <real> (let ((G554 (cast <real> (let ((G553 (cast <real> (let ((G552 (cast <real> (let ((G551 (cast <real> (let ((G550 (cast <real> (let ((G549 (cast <real> (let ((G548 (cast <real> (let ((G547 (cast <real> (let ((G546 (cast <real> (let ((G545 (cast <real> (let ((G544 (cast <real> (let ((G543 (cast <real> (let ((G542 (cast <real> (let ((G541 (cast <real> (let ((G540 (cast <real> (let ((G539 (cast <real> (if (equal? (cast <real> (identity op)) (cast <real> OP_FTATIME)) 1 0)))) (if (eq? G539 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTBINARY)) 1 0) G539))))) (if (eq? G540 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTBLK)) 1 0) G540))))) (if (eq? G541 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTCHR)) 1 0) G541))))) (if (eq? G542 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTCTIME)) 1 0) G542))))) (if (eq? G543 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTDIR)) 1 0) G543))))) (if (eq? G544 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTEEXEC)) 1 0) G544))))) (if (eq? G545 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTEOWNED)) 1 0) G545))))) (if (eq? G546 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTEREAD)) 1 0) G546))))) (if (eq? G547 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTEWRITE)) 1 0) G547))))) (if (eq? G548 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTFILE)) 1 0) G548))))) (if (eq? G549 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTIS)) 1 0) G549))))) (if (eq? G550 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTLINK)) 1 0) G550))))) (if (eq? G551 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTMTIME)) 1 0) G551))))) (if (eq? G552 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTPIPE)) 1 0) G552))))) (if (eq? G553 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTREXEC)) 1 0) G553))))) (if (eq? G554 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTROWNED)) 1 0) G554))))) (if (eq? G555 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTRREAD)) 1 0) G555))))) (if (eq? G556 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTRWRITE)) 1 0) G556))))) (if (eq? G557 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTSGID)) 1 0) G557))))) (if (eq? G558 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTSIZE)) 1 0) G558))))) (if (eq? G559 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTSOCK)) 1 0) G559))))) (if (eq? G560 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTSUID)) 1 0) G560))))) (if (eq? G561 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTSVTX)) 1 0) G561))))) (if (eq? G562 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTTEXT)) 1 0) G562))))) (if (eq? G563 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTTTY)) 1 0) G563))))) (if (eq? G564 0) (if (equal? (cast <real> (identity op)) (cast <real> OP_FTZERO)) 1 0) G564)))))
(define-cfunclike-macro OP_GIMME (op dfl) (scm-cast (begin (if (eq? (cast <real> (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity op)) 'op_flags)) 3)) 1) 1 0)) 0) (if (eq? (cast <real> (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity op)) 'op_flags)) 3)) 2) 1 0)) 0) (if (eq? (cast <real> (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity op)) 'op_flags)) 3)) 3) 1 0)) 0) dfl 1) 0) 128))))
(define-cmacro OPf_WANT 3)
(define-cmacro OPf_WANT_VOID 1)
(define-cmacro OPf_WANT_SCALAR 2)
(define-cmacro OPf_WANT_LIST 3)
(define-cmacro OPf_KIDS 4)
(define-cmacro OPf_PARENS 8)
(define-cmacro OPf_REF 16)
(define-cmacro OPf_MOD 32)
(define-cmacro OPf_STACKED 64)
(define-cmacro OPf_SPECIAL 128)
(define-cmacro OPf_LIST 3)
(define-cmacro OPf_KNOW 3)
(define-cmacro OPpLVAL_INTRO 128)
(define-cmacro OPpREFCOUNTED 64)
(define-cmacro OPpASSIGN_COMMON 64)
(define-cmacro OPpASSIGN_HASH 32)
(define-cmacro OPpASSIGN_BACKWARDS 64)
(define-cmacro OPpRUNTIME 64)
(define-cmacro OPpTRANS_FROM_UTF 1)
(define-cmacro OPpTRANS_TO_UTF 2)
(define-cmacro OPpTRANS_IDENTICAL 4)
(define-cmacro OPpTRANS_SQUASH 8)
(define-cmacro OPpTRANS_DELETE 16)
(define-cmacro OPpTRANS_COMPLEMENT 32)
(define-cmacro OPpTRANS_GROWS 64)
(define-cmacro OPpREPEAT_DOLIST 64)
(define-cmacro OPpDEREF 96)
(define-cmacro OPpDEREF_AV 32)
(define-cmacro OPpDEREF_HV 64)
(define-cmacro OPpDEREF_SV 96)
(define-cmacro OPpENTERSUB_DB 16)
(define-cmacro OPpENTERSUB_HASTARG 32)
(define-cmacro OPpENTERSUB_NOMOD 64)
(define-cmacro OPpENTERSUB_AMPER 8)
(define-cmacro OPpENTERSUB_NOPAREN 128)
(define-cmacro OPpENTERSUB_INARGS 4)
(define-cmacro OPpEARLY_CV 32)
(define-cmacro OPpLVAL_DEFER 16)
(define-cmacro OPpOUR_INTRO 16)
(define-cmacro OPpMAYBE_LVSUB 8)
(define-cmacro OPpTARGET_MY 16)
(define-cmacro OPpITER_REVERSED 4)
(define-cmacro OPpCONST_SHORTCIRCUIT 4)
(define-cmacro OPpCONST_STRICT 8)
(define-cmacro OPpCONST_ENTERED 16)
(define-cmacro OPpCONST_ARYBASE 32)
(define-cmacro OPpCONST_BARE 64)
(define-cmacro OPpCONST_WARNING 128)
(define-cmacro OPpFLIP_LINENUM 64)
(define-cmacro OPpLIST_GUESSED 64)
(define-cmacro OPpSLICE 64)
(define-cmacro OPpEXISTS_SUB 64)
(define-cmacro OPpSORT_NUMERIC 1)
(define-cmacro OPpSORT_INTEGER 2)
(define-cmacro OPpSORT_REVERSE 4)
(define-cmacro OPpSORT_INPLACE 8)
(define-cmacro OPpSORT_DESCEND 16)
(define-cmacro OPpDONE_SVREF 64)
(define-cmacro OPpOPEN_IN_RAW 16)
(define-cmacro OPpOPEN_IN_CRLF 32)
(define-cmacro OPpOPEN_OUT_RAW 64)
(define-cmacro OPpOPEN_OUT_CRLF 128)
(define-cmacro OPpHUSH_VMSISH 64)
(define-cmacro OPpEXIT_VMSISH 128)
(define-cmacro OPpFT_ACCESS 2)
(define-cfunclike-macro OP_IS_FILETEST_ACCESS (op) (scm-cast (begin (let ((G569 (cast <real> (let ((G568 (cast <real> (let ((G567 (cast <real> (let ((G566 (cast <real> (let ((G565 (cast <real> (if (equal? (cast <real> (raw-ref (deref (identity op)) 'op_type)) (cast <real> OP_FTRREAD)) 1 0)))) (if (eq? G565 0) (if (equal? (cast <real> (raw-ref (deref (identity op)) 'op_type)) (cast <real> OP_FTRWRITE)) 1 0) G565))))) (if (eq? G566 0) (if (equal? (cast <real> (raw-ref (deref (identity op)) 'op_type)) (cast <real> OP_FTREXEC)) 1 0) G566))))) (if (eq? G567 0) (if (equal? (cast <real> (raw-ref (deref (identity op)) 'op_type)) (cast <real> OP_FTEREAD)) 1 0) G567))))) (if (eq? G568 0) (if (equal? (cast <real> (raw-ref (deref (identity op)) 'op_type)) (cast <real> OP_FTEWRITE)) 1 0) G568))))) (if (eq? G569 0) (if (equal? (cast <real> (raw-ref (deref (identity op)) 'op_type)) (cast <real> OP_FTEEXEC)) 1 0) G569)))))
(define-cmacro PMdf_USED 1)
(define-cmacro PMdf_TAINTED 2)
(define-cmacro PMdf_UTF8 4)
(define-cmacro PMdf_DYN_UTF8 8)
(define-cmacro PMdf_CMP_UTF8 12)
(define-cmacro PMf_RETAINT 1)
(define-cmacro PMf_ONCE 2)
(define-cmacro PMf_UNUSED 4)
(define-cmacro PMf_MAYBE_CONST 8)
(define-cmacro PMf_SKIPWHITE 16)
(define-cmacro PMf_WHITE 32)
(define-cmacro PMf_CONST 64)
(define-cmacro PMf_KEEP 128)
(define-cmacro PMf_GLOBAL 256)
(define-cmacro PMf_CONTINUE 512)
(define-cmacro PMf_EVAL 1024)
(define-cmacro PMf_LOCALE 2048)
(define-cmacro PMf_MULTILINE 4096)
(define-cmacro PMf_SINGLELINE 8192)
(define-cmacro PMf_FOLD 16384)
(define-cmacro PMf_EXTENDED 32768)
(define-cmacro PMf_COMPILETIME 63488)
(define-cfunclike-macro PmopSTASHPV (o) (scm-cast (begin (raw-ref (deref (identity o)) 'op_pmstashpv))))
(define-cfunclike-macro PmopSTASH_free (o) (scm-cast (begin (free (raw-ref (deref (identity o)) 'op_pmstashpv)))))
(define-cfunclike-macro cUNOPx (o) (scm-cast (begin (cast (ptr <UNOP>) o))))
(define-cfunclike-macro cBINOPx (o) (scm-cast (begin (cast (ptr <BINOP>) o))))
(define-cfunclike-macro cLISTOPx (o) (scm-cast (begin (cast (ptr <LISTOP>) o))))
(define-cfunclike-macro cLOGOPx (o) (scm-cast (begin (cast (ptr <LOGOP>) o))))
(define-cfunclike-macro cPMOPx (o) (scm-cast (begin (cast (ptr <PMOP>) o))))
(define-cfunclike-macro cSVOPx (o) (scm-cast (begin (cast (ptr <SVOP>) o))))
(define-cfunclike-macro cPADOPx (o) (scm-cast (begin (cast (ptr <PADOP>) o))))
(define-cfunclike-macro cPVOPx (o) (scm-cast (begin (cast (ptr <PVOP>) o))))
(define-cfunclike-macro cCOPx (o) (scm-cast (begin (cast (ptr <COP>) o))))
(define-cfunclike-macro cLOOPx (o) (scm-cast (begin (cast (ptr <LOOP>) o))))
(define-cfunclike-macro IS_PADGV (v) (scm-cast (begin (let ((G571 (cast <real> (let ((G570 (cast <real> v))) (if (eq? G570 0) G570 (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity v)) 'sv_flags)) 255)) (cast <real> SVt_PVGV)) 1 0)))))) (if (eq? G571 0) G571 (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVGV>) (raw-ref (deref (identity v)) 'sv_any))) 'xgv_flags)) 8))))))
(define-cfunclike-macro IS_PADCONST (v) (scm-cast (begin (let ((G572 (cast <real> v))) (if (eq? G572 0) G572 (logand (cast <integer> (raw-ref (deref (identity v)) 'sv_flags)) 8388608))))))
(define-cmacro Nullop (scm-cast (begin (cast (ptr <OP>) (cast (ptr <c-void>) 0)))))
(define-cmacro OA_MARK 1)
(define-cmacro OA_FOLDCONST 2)
(define-cmacro OA_RETSCALAR 4)
(define-cmacro OA_TARGET 8)
(define-cmacro OA_RETINTEGER 16)
(define-cmacro OA_OTHERINT 32)
(define-cmacro OA_DANGEROUS 64)
(define-cmacro OA_DEFGV 128)
(define-cmacro OA_TARGLEX 256)
(define-cmacro OCSHIFT 9)
(define-cmacro OA_CLASS_MASK 7680)
(define-cmacro OA_BASEOP 0)
(define-cmacro OA_UNOP 512)
(define-cmacro OA_BINOP 1024)
(define-cmacro OA_LOGOP 1536)
(define-cmacro OA_LISTOP 2048)
(define-cmacro OA_PMOP 2560)
(define-cmacro OA_SVOP 3072)
(define-cmacro OA_PADOP 3584)
(define-cmacro OA_PVOP_OR_SVOP 4096)
(define-cmacro OA_LOOP 4608)
(define-cmacro OA_COP 5120)
(define-cmacro OA_BASEOP_OR_UNOP 5632)
(define-cmacro OA_FILESTATOP 6144)
(define-cmacro OA_LOOPEXOP 6656)
(define-cmacro OASHIFT 13)
(define-cmacro OA_SCALAR 1)
(define-cmacro OA_LIST 2)
(define-cmacro OA_AVREF 3)
(define-cmacro OA_HVREF 4)
(define-cmacro OA_CVREF 5)
(define-cmacro OA_FILEREF 6)
(define-cmacro OA_SCALARREF 7)
(define-cmacro OA_OPTIONAL 8)
(define-cfunclike-macro OpREFCNT_set (o n) (scm-cast (begin (let ((%v (identity n))) (set! (ref (deref (identity o)) 'op_targ) %v) %v))))
(define-cfunclike-macro OpREFCNT_inc (o) (scm-cast (begin (if (eq? (cast <real> (identity o)) 0) (cast (ptr <OP>) (cast (ptr <c-void>) 0)) (begin (pre++ (raw-ref (deref (identity o)) 'op_targ)) (identity o))))))
(define-cfunclike-macro OpREFCNT_dec (o) (scm-cast (begin (pre-- (raw-ref (deref (identity o)) 'op_targ)))))
(define-cmacro PERL_LOADMOD_DENY 1)
(define-cmacro PERL_LOADMOD_NOIMPORT 2)
(define-cmacro PERL_LOADMOD_IMPORT_OPS 4)
(define-cmacro REENTR_H 0)
(define-cmacro _PWD_H_ 0)
(define-cmacro _PATH_PWD "/etc")
(define-cmacro _PATH_PASSWD "/etc/passwd")
(define-cmacro _PASSWD "passwd")
(define-cmacro _PATH_MASTERPASSWD "/etc/master.passwd")
(define-cmacro _PATH_MASTERPASSWD_LOCK "/etc/ptmp")
(define-cmacro _MASTERPASSWD "master.passwd")
(define-cmacro _PATH_MP_DB "/etc/pwd.db")
(define-cmacro _MP_DB "pwd.db")
(define-cmacro _PATH_SMP_DB "/etc/spwd.db")
(define-cmacro _SMP_DB "spwd.db")
(define-cmacro _PATH_PWD_MKDB "/usr/sbin/pwd_mkdb")
(define-cmacro _PW_KEYBYNAME 49)
(define-cmacro _PW_KEYBYNUM 50)
(define-cmacro _PW_KEYBYUID 51)
(define-cmacro _PASSWORD_EFMT1 95)
(define-cmacro _PASSWORD_LEN 128)
(define-cmacro _PASSWORD_NOUID 1)
(define-cmacro _PASSWORD_NOGID 2)
(define-cmacro _PASSWORD_NOCHG 4)
(define-cmacro _PASSWORD_NOEXP 8)
(define-cmacro _PASSWORD_WARNDAYS 14)
(define-cmacro _PASSWORD_CHGNOW -1)
(define-cmacro _GRP_H_ 0)
(define-cmacro _PATH_GROUP "/etc/group")
(define-cmacro REENTRANT_PROTO_B_B 1)
(define-cmacro REENTRANT_PROTO_B_BI 2)
(define-cmacro REENTRANT_PROTO_B_BW 3)
(define-cmacro REENTRANT_PROTO_B_CCD 4)
(define-cmacro REENTRANT_PROTO_B_CCS 5)
(define-cmacro REENTRANT_PROTO_B_IBI 6)
(define-cmacro REENTRANT_PROTO_B_IBW 7)
(define-cmacro REENTRANT_PROTO_B_SB 8)
(define-cmacro REENTRANT_PROTO_B_SBI 9)
(define-cmacro REENTRANT_PROTO_I_BI 10)
(define-cmacro REENTRANT_PROTO_I_BW 11)
(define-cmacro REENTRANT_PROTO_I_CCSBWR 12)
(define-cmacro REENTRANT_PROTO_I_CCSD 13)
(define-cmacro REENTRANT_PROTO_I_CII 14)
(define-cmacro REENTRANT_PROTO_I_CIISD 15)
(define-cmacro REENTRANT_PROTO_I_CSBI 16)
(define-cmacro REENTRANT_PROTO_I_CSBIR 17)
(define-cmacro REENTRANT_PROTO_I_CSBWR 18)
(define-cmacro REENTRANT_PROTO_I_CSBWRE 19)
(define-cmacro REENTRANT_PROTO_I_CSD 20)
(define-cmacro REENTRANT_PROTO_I_CWISBWRE 21)
(define-cmacro REENTRANT_PROTO_I_CWISD 22)
(define-cmacro REENTRANT_PROTO_I_D 23)
(define-cmacro REENTRANT_PROTO_I_H 24)
(define-cmacro REENTRANT_PROTO_I_IBI 25)
(define-cmacro REENTRANT_PROTO_I_IBW 26)
(define-cmacro REENTRANT_PROTO_I_ICBI 27)
(define-cmacro REENTRANT_PROTO_I_ICSBWR 28)
(define-cmacro REENTRANT_PROTO_I_ICSD 29)
(define-cmacro REENTRANT_PROTO_I_ID 30)
(define-cmacro REENTRANT_PROTO_I_IISD 31)
(define-cmacro REENTRANT_PROTO_I_ISBWR 32)
(define-cmacro REENTRANT_PROTO_I_ISD 33)
(define-cmacro REENTRANT_PROTO_I_LISBI 34)
(define-cmacro REENTRANT_PROTO_I_LISD 35)
(define-cmacro REENTRANT_PROTO_I_LS 36)
(define-cmacro REENTRANT_PROTO_I_SB 37)
(define-cmacro REENTRANT_PROTO_I_SBI 38)
(define-cmacro REENTRANT_PROTO_I_SBIE 39)
(define-cmacro REENTRANT_PROTO_I_SBIH 40)
(define-cmacro REENTRANT_PROTO_I_SBIR 41)
(define-cmacro REENTRANT_PROTO_I_SBWR 42)
(define-cmacro REENTRANT_PROTO_I_SBWRE 43)
(define-cmacro REENTRANT_PROTO_I_SD 44)
(define-cmacro REENTRANT_PROTO_I_ST 45)
(define-cmacro REENTRANT_PROTO_I_St 46)
(define-cmacro REENTRANT_PROTO_I_TISD 47)
(define-cmacro REENTRANT_PROTO_I_TS 48)
(define-cmacro REENTRANT_PROTO_I_TSBI 49)
(define-cmacro REENTRANT_PROTO_I_TSBIR 50)
(define-cmacro REENTRANT_PROTO_I_TSBWR 51)
(define-cmacro REENTRANT_PROTO_I_TSR 52)
(define-cmacro REENTRANT_PROTO_I_TsISBWRE 53)
(define-cmacro REENTRANT_PROTO_I_UISBWRE 54)
(define-cmacro REENTRANT_PROTO_I_iS 55)
(define-cmacro REENTRANT_PROTO_I_lS 56)
(define-cmacro REENTRANT_PROTO_I_uISBWRE 57)
(define-cmacro REENTRANT_PROTO_S_CBI 58)
(define-cmacro REENTRANT_PROTO_S_CCSBI 59)
(define-cmacro REENTRANT_PROTO_S_CIISBIE 60)
(define-cmacro REENTRANT_PROTO_S_CSBI 61)
(define-cmacro REENTRANT_PROTO_S_CSBIE 62)
(define-cmacro REENTRANT_PROTO_S_CWISBIE 63)
(define-cmacro REENTRANT_PROTO_S_CWISBWIE 64)
(define-cmacro REENTRANT_PROTO_S_ICSBI 65)
(define-cmacro REENTRANT_PROTO_S_ISBI 66)
(define-cmacro REENTRANT_PROTO_S_LISBI 67)
(define-cmacro REENTRANT_PROTO_S_SBI 68)
(define-cmacro REENTRANT_PROTO_S_SBIE 69)
(define-cmacro REENTRANT_PROTO_S_SBW 70)
(define-cmacro REENTRANT_PROTO_S_TISBI 71)
(define-cmacro REENTRANT_PROTO_S_TS 72)
(define-cmacro REENTRANT_PROTO_S_TSBI 73)
(define-cmacro REENTRANT_PROTO_S_TSBIE 74)
(define-cmacro REENTRANT_PROTO_S_TWISBIE 75)
(define-cmacro REENTRANT_PROTO_V_D 76)
(define-cmacro REENTRANT_PROTO_V_H 77)
(define-cmacro REENTRANT_PROTO_V_ID 78)
(define-cmacro GETGRGID_R_HAS_BUFFER 0)
(define-cmacro GETGRNAM_R_HAS_BUFFER 0)
(define-cmacro USE_GRENT_BUFFER 0)
(define-cmacro GETGRGID_R_HAS_PTR 0)
(define-cmacro GETGRNAM_R_HAS_PTR 0)
(define-cmacro USE_GRENT_PTR 0)
(define-cmacro GETPWNAM_R_HAS_PTR 0)
(define-cmacro GETPWUID_R_HAS_PTR 0)
(define-cmacro USE_PWENT_PTR 0)
(define-cmacro GETPWNAM_R_HAS_BUFFER 0)
(define-cmacro USE_PWENT_BUFFER 0)
(define-cfunclike-macro NewOpSz (m var size) (scm-cast (begin (begin (let ((%v (cast (ptr <OP>) (Perl_safesysmalloc size)))) (set! (ref var) %v) %v) (memset var 0 size)))))
(define-cfunclike-macro FreeOp (p) (scm-cast (begin (Perl_safesysfree (cast (ptr <c-void>) (identity p))))))
(define-cmacro Nullcop (scm-cast (begin (cast (ptr <COP>) (cast (ptr <c-void>) 0)))))
(define-cfunclike-macro CopFILE (c) (scm-cast (begin (raw-ref (deref (identity c)) 'cop_file))))
(define-cfunclike-macro CopSTASHPV (c) (scm-cast (begin (raw-ref (deref (identity c)) 'cop_stashpv))))
(define-cfunclike-macro CopSTASH_eq (c hv) (scm-cast (begin (let ((G576 (cast <real> (identity hv)))) (if (eq? G576 0) G576 (let ((G575 (cast <real> (if (equal? (cast <real> (raw-ref (deref (identity c)) 'cop_stashpv)) (cast <real> (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_name))) 1 0)))) (if (eq? G575 0) (let ((G574 (cast <real> (let ((G573 (cast <real> (raw-ref (deref (identity c)) 'cop_stashpv)))) (if (eq? G573 0) G573 (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_name)))))) (if (eq? G574 0) G574 (if (eq? (cast <real> (strcmp (raw-ref (deref (identity c)) 'cop_stashpv) (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_name))) 0) 1 0))) G575)))))))
(define-cfunclike-macro CopSTASH_free (c) (scm-cast (begin (free (raw-ref (deref (identity c)) 'cop_stashpv)))))
(define-cfunclike-macro CopFILE_free (c) (scm-cast (begin (begin (free (raw-ref (deref (identity c)) 'cop_file)) (let ((%v (cast (ptr <c-char>) (cast (ptr <c-void>) 0)))) (set! (ref (deref (identity c)) 'cop_file) %v) %v)))))
(define-cfunclike-macro CopSTASH_ne (c hv) (scm-cast (begin (if (eq? (cast <real> (let ((G580 (cast <real> (identity hv)))) (if (eq? G580 0) G580 (let ((G579 (cast <real> (if (equal? (cast <real> (raw-ref (deref (identity c)) 'cop_stashpv)) (cast <real> (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_name))) 1 0)))) (if (eq? G579 0) (let ((G578 (cast <real> (let ((G577 (cast <real> (raw-ref (deref (identity c)) 'cop_stashpv)))) (if (eq? G577 0) G577 (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_name)))))) (if (eq? G578 0) G578 (if (eq? (cast <real> (strcmp (raw-ref (deref (identity c)) 'cop_stashpv) (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_name))) 0) 1 0))) G579))))) 0) 1 0))))
(define-cfunclike-macro CopLINE (c) (scm-cast (begin (raw-ref (deref (identity c)) 'cop_line))))
(define-cfunclike-macro CopLINE_inc (c) (scm-cast (begin (pre++ (raw-ref (deref (identity c)) 'cop_line)))))
(define-cfunclike-macro CopLINE_dec (c) (scm-cast (begin (pre-- (raw-ref (deref (identity c)) 'cop_line)))))
(define-cfunclike-macro CopLINE_set (c l) (scm-cast (begin (let ((%v (identity l))) (set! (ref (deref (identity c)) 'cop_line) %v) %v))))
(define-cfunclike-macro OutCopFILE (c) (scm-cast (begin (raw-ref (deref (identity c)) 'cop_file))))
(define-cfunclike-macro CLEAR_ARGARRAY (ary) (scm-cast (begin (cast <c-void> (begin begin (let ((%v (if (is-a? (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_max) <c-ptr>) (c-ptr+ (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_max) (cast <real> (if (is-a? (cast (ptr (ptr <SV>)) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_array)) <c-ptr>) (c-ptr- (cast (ptr (ptr <SV>)) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_array)) (cast <real> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_alloc))) (- (cast <real> (cast (ptr (ptr <SV>)) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_array))) (cast <real> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_alloc)))))) (+ (cast <real> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_max)) (cast <real> (if (is-a? (cast (ptr (ptr <SV>)) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_array)) <c-ptr>) (c-ptr- (cast (ptr (ptr <SV>)) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_array)) (cast <real> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_alloc))) (- (cast <real> (cast (ptr (ptr <SV>)) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_array))) (cast <real> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_alloc))))))))) (set! (ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_max) %v) %v) (let ((%v (cast (ptr <c-char>) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_alloc)))) (set! (ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xpv_pv) %v) %v) (let ((%v -1)) (set! (ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity ary)) 'sv_any))) 'xav_fill) %v) %v))))))
(define-cmacro CXTYPEMASK 255)
(define-cmacro CXt_NULL 0)
(define-cmacro CXt_SUB 1)
(define-cmacro CXt_EVAL 2)
(define-cmacro CXt_LOOP 3)
(define-cmacro CXt_SUBST 4)
(define-cmacro CXt_BLOCK 5)
(define-cmacro CXt_FORMAT 6)
(define-cmacro CXp_REAL 256)
(define-cmacro CXp_TRYBLOCK 512)
(define-cmacro CXp_PADVAR 256)
(define-cfunclike-macro CxPADLOOP (c) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity c)) 'cx_type)) 259)) 259) 1 0))))
(define-cfunclike-macro CxTYPE (c) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity c)) 'cx_type)) 255))))
(define-cfunclike-macro CxREALEVAL (c) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity c)) 'cx_type)) 258)) 258) 1 0))))
(define-cfunclike-macro CxTRYBLOCK (c) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (raw-ref (deref (identity c)) 'cx_type)) 514)) 514) 1 0))))
(define-cmacro G_SCALAR 0)
(define-cmacro G_ARRAY 1)
(define-cmacro G_VOID 128)
(define-cmacro G_DISCARD 2)
(define-cmacro G_EVAL 4)
(define-cmacro G_NOARGS 8)
(define-cmacro G_KEEPERR 16)
(define-cmacro G_NODEBUG 32)
(define-cmacro G_METHOD 64)
(define-cmacro EVAL_NULL 0)
(define-cmacro EVAL_INEVAL 1)
(define-cmacro EVAL_WARNONLY 2)
(define-cmacro EVAL_KEEPERR 4)
(define-cmacro EVAL_INREQUIRE 8)
(define-cmacro PERLSI_UNKNOWN -1)
(define-cmacro PERLSI_UNDEF 0)
(define-cmacro PERLSI_MAIN 1)
(define-cmacro PERLSI_MAGIC 2)
(define-cmacro PERLSI_SORT 3)
(define-cmacro PERLSI_SIGNAL 4)
(define-cmacro PERLSI_OVERLOAD 5)
(define-cmacro PERLSI_DESTROY 6)
(define-cmacro PERLSI_WARNHOOK 7)
(define-cmacro PERLSI_DIEHOOK 8)
(define-cmacro PERLSI_REQUIRE 9)
(define-cmacro SET_MARK_OFFSET (scm-cast (begin (cast <c-void> 0))))
(define-cmacro AVf_REAL 1)
(define-cmacro AVf_REIFY 2)
(define-cmacro AVf_REUSED 4)
(define-cmacro Nullav (scm-cast (begin (cast (ptr <AV>) (cast (ptr <c-void>) 0)))))
(define-cfunclike-macro AvARRAY (av) (scm-cast (begin (cast (ptr (ptr <SV>)) (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_array)))))
(define-cfunclike-macro AvALLOC (av) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_alloc))))
(define-cfunclike-macro AvMAX (av) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_max))))
(define-cfunclike-macro AvFILLp (av) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_fill))))
(define-cfunclike-macro AvARYLEN (av) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_arylen))))
(define-cfunclike-macro AvFLAGS (av) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags))))
(define-cfunclike-macro AvREAL (av) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags)) 1))))
(define-cfunclike-macro AvREAL_on (av) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags)) 1))) (set! (ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags) %v) %v))))
(define-cfunclike-macro AvREAL_off (av) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags)) -2))) (set! (ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags) %v) %v))))
(define-cfunclike-macro AvREIFY (av) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags)) 2))))
(define-cfunclike-macro AvREIFY_on (av) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags)) 2))) (set! (ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags) %v) %v))))
(define-cfunclike-macro AvREIFY_off (av) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags)) -3))) (set! (ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags) %v) %v))))
(define-cfunclike-macro AvREUSED (av) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags)) 4))))
(define-cfunclike-macro AvREUSED_on (av) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags)) 4))) (set! (ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags) %v) %v))))
(define-cfunclike-macro AvREUSED_off (av) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags)) -5))) (set! (ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags) %v) %v))))
(define-cfunclike-macro AvREALISH (av) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (cast (ptr <XPVAV>) (raw-ref (deref (identity av)) 'sv_any))) 'xav_flags)) 3))))
(define-cmacro NEGATIVE_INDICES_VAR "NEGATIVE_INDICES")
(define-cmacro HEf_SVKEY -2)
(define-cmacro Nullhv (scm-cast (begin (cast (ptr <HV>) (cast (ptr <c-void>) 0)))))
(define-cfunclike-macro HvARRAY (hv) (scm-cast (begin (deref (cast (ptr (ptr (ptr <HE>))) (ptr (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_array)))))))
(define-cfunclike-macro HvFILL (hv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_fill))))
(define-cfunclike-macro HvMAX (hv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_max))))
(define-cfunclike-macro HvRITER (hv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_riter))))
(define-cfunclike-macro HvEITER (hv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_eiter))))
(define-cfunclike-macro HvPMROOT (hv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_pmroot))))
(define-cfunclike-macro HvNAME (hv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_name))))
(define-cfunclike-macro XHvTOTALKEYS (xhv) (scm-cast (begin (raw-ref (deref (identity xhv)) 'xhv_keys))))
(define-cfunclike-macro XHvPLACEHOLDERS (xhv) (scm-cast (begin (raw-ref (deref (identity xhv)) 'xnv_nv))))
(define-cfunclike-macro XHvUSEDKEYS (xhv) (scm-cast (begin (if (is-a? (raw-ref (deref (identity xhv)) 'xhv_keys) <c-ptr>) (c-ptr- (raw-ref (deref (identity xhv)) 'xhv_keys) (cast <real> (cast <IV> (raw-ref (deref (identity xhv)) 'xnv_nv)))) (- (cast <real> (raw-ref (deref (identity xhv)) 'xhv_keys)) (cast <real> (cast <IV> (raw-ref (deref (identity xhv)) 'xnv_nv))))))))
(define-cfunclike-macro HvKEYS (hv) (scm-cast (begin (if (is-a? (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_keys) <c-ptr>) (c-ptr- (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_keys) (cast <real> (cast <IV> (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xnv_nv)))) (- (cast <real> (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_keys)) (cast <real> (cast <IV> (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xnv_nv))))))))
(define-cfunclike-macro HvUSEDKEYS (hv) (scm-cast (begin (if (is-a? (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_keys) <c-ptr>) (c-ptr- (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_keys) (cast <real> (cast <IV> (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xnv_nv)))) (- (cast <real> (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_keys)) (cast <real> (cast <IV> (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xnv_nv))))))))
(define-cfunclike-macro HvTOTALKEYS (hv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xhv_keys))))
(define-cfunclike-macro HvPLACEHOLDERS (hv) (scm-cast (begin (raw-ref (deref (cast (ptr <XPVHV>) (raw-ref (deref (identity hv)) 'sv_any))) 'xnv_nv))))
(define-cfunclike-macro HvSHAREKEYS (hv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) 536870912))))
(define-cfunclike-macro HvSHAREKEYS_on (hv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) 536870912))) (set! (ref (deref (identity hv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro HvSHAREKEYS_off (hv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) -536870913))) (set! (ref (deref (identity hv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro HvHASKFLAGS (hv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) 2147483648))))
(define-cfunclike-macro HvHASKFLAGS_on (hv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) 2147483648))) (set! (ref (deref (identity hv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro HvHASKFLAGS_off (hv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) -2147483649))) (set! (ref (deref (identity hv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro HvLAZYDEL (hv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) 1073741824))))
(define-cfunclike-macro HvLAZYDEL_on (hv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) 1073741824))) (set! (ref (deref (identity hv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro HvLAZYDEL_off (hv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) -1073741825))) (set! (ref (deref (identity hv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro HvREHASH (hv) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) 268435456))))
(define-cfunclike-macro HvREHASH_on (hv) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) 268435456))) (set! (ref (deref (identity hv)) 'sv_flags) %v) %v))))
(define-cfunclike-macro HvREHASH_off (hv) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity hv)) 'sv_flags)) -268435457))) (set! (ref (deref (identity hv)) 'sv_flags) %v) %v))))
(define-cmacro Nullhe (scm-cast (begin (cast (ptr <HE>) (cast (ptr <c-void>) 0)))))
(define-cfunclike-macro HeNEXT (he) (scm-cast (begin (raw-ref (deref (identity he)) 'hent_next))))
(define-cfunclike-macro HeKEY_hek (he) (scm-cast (begin (raw-ref (deref (identity he)) 'hent_hek))))
(define-cfunclike-macro HeKEY (he) (scm-cast (begin (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))))
(define-cfunclike-macro HeKEY_sv (he) (scm-cast (begin (deref (cast (ptr (ptr <SV>)) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))))))
(define-cfunclike-macro HeKLEN (he) (scm-cast (begin (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))))
(define-cfunclike-macro HeKUTF8 (he) (scm-cast (begin (logand (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))))) 1)))) 1))))
(define-cfunclike-macro HeKWASUTF8 (he) (scm-cast (begin (logand (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))))) 1)))) 2))))
(define-cfunclike-macro HeKREHASH (he) (scm-cast (begin (logand (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))))) 1)))) 4))))
(define-cfunclike-macro HeKLEN_UTF8 (he) (scm-cast (begin (if (eq? (cast <real> (logand (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))))) 1)))) 1)) 0) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len) (if (is-a? 0 <c-ptr>) (c-ptr- 0 (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (- (cast <real> 0) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))))))))
(define-cfunclike-macro HeKFLAGS (he) (scm-cast (begin (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len))))) 1))))))
(define-cfunclike-macro HeVAL (he) (scm-cast (begin (raw-ref (deref (identity he)) 'hent_val))))
(define-cfunclike-macro HeHASH (he) (scm-cast (begin (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_hash))))
(define-cfunclike-macro HeSVKEY (he) (scm-cast (begin (if (eq? (cast <real> (let ((G582 (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)))) (if (eq? G582 0) G582 (if (equal? (cast <real> (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len)) -2) 1 0)))) 0) (cast (ptr <SV>) (cast (ptr <c-void>) 0)) (deref (cast (ptr (ptr <SV>)) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key)))))))
(define-cfunclike-macro HeSVKEY_set (he sv) (scm-cast (begin (begin (let ((%v -2)) (set! (ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_len) %v) %v) (let ((%v sv)) (set! (deref (cast (ptr (ptr <SV>)) (raw-ref (deref (raw-ref (deref (identity he)) 'hent_hek)) 'hek_key))) %v) %v)))))
(define-cmacro Nullhek (scm-cast (begin (cast (ptr <HEK>) (cast (ptr <c-void>) 0)))))
(define-cfunclike-macro HEK_HASH (hek) (scm-cast (begin (raw-ref (deref (identity hek)) 'hek_hash))))
(define-cfunclike-macro HEK_LEN (hek) (scm-cast (begin (raw-ref (deref (identity hek)) 'hek_len))))
(define-cfunclike-macro HEK_KEY (hek) (scm-cast (begin (raw-ref (deref (identity hek)) 'hek_key))))
(define-cfunclike-macro HEK_FLAGS (hek) (scm-cast (begin (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1))))))
(define-cmacro HVhek_UTF8 1)
(define-cmacro HVhek_WASUTF8 2)
(define-cmacro HVhek_REHASH 4)
(define-cmacro HVhek_FREEKEY 256)
(define-cmacro HVhek_PLACEHOLD 512)
(define-cmacro HVhek_MASK 255)
(define-cmacro HVhek_ENABLEHVKFLAGS 251)
(define-cfunclike-macro HEK_UTF8 (hek) (scm-cast (begin (logand (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1)))) 1))))
(define-cfunclike-macro HEK_UTF8_on (hek) (scm-cast (begin (let ((%v (logior (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1)))) 1))) (set! (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1))) %v) %v))))
(define-cfunclike-macro HEK_UTF8_off (hek) (scm-cast (begin (let ((%v (logand (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1)))) -2))) (set! (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1))) %v) %v))))
(define-cfunclike-macro HEK_WASUTF8 (hek) (scm-cast (begin (logand (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1)))) 2))))
(define-cfunclike-macro HEK_WASUTF8_on (hek) (scm-cast (begin (let ((%v (logior (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1)))) 2))) (set! (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1))) %v) %v))))
(define-cfunclike-macro HEK_WASUTF8_off (hek) (scm-cast (begin (let ((%v (logand (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1)))) -3))) (set! (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1))) %v) %v))))
(define-cfunclike-macro HEK_REHASH (hek) (scm-cast (begin (logand (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1)))) 4))))
(define-cfunclike-macro HEK_REHASH_on (hek) (scm-cast (begin (let ((%v (logior (cast <integer> (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1)))) 4))) (set! (deref (if (is-a? (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) <c-ptr>) (c-ptr+ (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len)))) 1) (+ (cast <real> (if (is-a? (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) <c-ptr>) (c-ptr+ (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key)) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))) (+ (cast <real> (cast (ptr <c-uchar>) (raw-ref (deref (identity hek)) 'hek_key))) (cast <real> (raw-ref (deref (identity hek)) 'hek_len))))) 1))) %v) %v))))
(define-cmacro MALLOC_OVERHEAD 16)
(define-cfunclike-macro PERL_HV_ARRAY_ALLOC_BYTES (size) (scm-cast (begin (if (eq? (cast <real> (if (< (cast <real> (identity size)) 64) 1 0)) 0) (if (is-a? (* (cast <real> (* (cast <real> (identity size)) (cast <real> (c-sizeof (ptr <HE>))))) 2) <c-ptr>) (c-ptr- (* (cast <real> (* (cast <real> (identity size)) (cast <real> (c-sizeof (ptr <HE>))))) 2) 16) (- (cast <real> (* (cast <real> (* (cast <real> (identity size)) (cast <real> (c-sizeof (ptr <HE>))))) 2)) 16)) (* (cast <real> (identity size)) (cast <real> (c-sizeof (ptr <HE>))))))))
(define-cmacro HV_ITERNEXT_WANTPLACEHOLDERS 1)
(define-cmacro MGf_TAINTEDDIR 1)
(define-cmacro MGf_MINMATCH 1)
(define-cmacro MGf_REFCOUNTED 2)
(define-cmacro MGf_GSKIP 4)
(define-cmacro MGf_COPY 8)
(define-cmacro MGf_DUP 16)
(define-cfunclike-macro MgTAINTEDDIR (mg) (scm-cast (begin (logand (cast <integer> (raw-ref (deref mg) 'mg_flags)) 1))))
(define-cfunclike-macro MgTAINTEDDIR_on (mg) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref mg) 'mg_flags)) 1))) (set! (ref (deref mg) 'mg_flags) %v) %v))))
(define-cfunclike-macro MgTAINTEDDIR_off (mg) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref mg) 'mg_flags)) -2))) (set! (ref (deref mg) 'mg_flags) %v) %v))))
(define-cmacro SAVEt_ITEM 0)
(define-cmacro SAVEt_SV 1)
(define-cmacro SAVEt_AV 2)
(define-cmacro SAVEt_HV 3)
(define-cmacro SAVEt_INT 4)
(define-cmacro SAVEt_LONG 5)
(define-cmacro SAVEt_I32 6)
(define-cmacro SAVEt_IV 7)
(define-cmacro SAVEt_SPTR 8)
(define-cmacro SAVEt_APTR 9)
(define-cmacro SAVEt_HPTR 10)
(define-cmacro SAVEt_PPTR 11)
(define-cmacro SAVEt_NSTAB 12)
(define-cmacro SAVEt_SVREF 13)
(define-cmacro SAVEt_GP 14)
(define-cmacro SAVEt_FREESV 15)
(define-cmacro SAVEt_FREEOP 16)
(define-cmacro SAVEt_FREEPV 17)
(define-cmacro SAVEt_CLEARSV 18)
(define-cmacro SAVEt_DELETE 19)
(define-cmacro SAVEt_DESTRUCTOR 20)
(define-cmacro SAVEt_REGCONTEXT 21)
(define-cmacro SAVEt_STACK_POS 22)
(define-cmacro SAVEt_I16 23)
(define-cmacro SAVEt_AELEM 24)
(define-cmacro SAVEt_HELEM 25)
(define-cmacro SAVEt_OP 26)
(define-cmacro SAVEt_HINTS 27)
(define-cmacro SAVEt_ALLOC 28)
(define-cmacro SAVEt_GENERIC_SVREF 29)
(define-cmacro SAVEt_DESTRUCTOR_X 30)
(define-cmacro SAVEt_VPTR 31)
(define-cmacro SAVEt_I8 32)
(define-cmacro SAVEt_COMPPAD 33)
(define-cmacro SAVEt_GENERIC_PVREF 34)
(define-cmacro SAVEt_PADSV 35)
(define-cmacro SAVEt_MORTALIZESV 36)
(define-cmacro SAVEt_SHARED_PVREF 37)
(define-cmacro SAVEt_BOOL 38)
(define-cmacro SAVEt_SAVESWITCHSTACK 40)
(define-cmacro SCOPE_SAVES_SIGNAL_MASK 0)
(define-cmacro OP_REG_TO_MEM (scm-cast (begin (cast <c-void> 0))))
(define-cmacro OP_MEM_TO_REG (scm-cast (begin (cast <c-void> 0))))
(define-cfunclike-macro Off (x) (scm-cast (begin (/ (cast <real> (identity x)) 8))))
(define-cfunclike-macro Bit (x) (scm-cast (begin (ash 1 (cast <integer> (modulo (cast <integer> (identity x)) 8))))))
(define-cfunclike-macro IsSet (a x) (scm-cast (begin (logand (cast <integer> (ref (identity a) (cast <integer> (/ (cast <real> (identity x)) 8)))) (cast <integer> (ash 1 (cast <integer> (modulo (cast <integer> (identity x)) 8))))))))
(define-cmacro G_WARN_OFF 0)
(define-cmacro G_WARN_ON 1)
(define-cmacro G_WARN_ALL_ON 2)
(define-cmacro G_WARN_ALL_OFF 4)
(define-cmacro G_WARN_ONCE 8)
(define-cmacro G_WARN_ALL_MASK 6)
(define-cmacro pWARN_STD (scm-cast (begin (cast (ptr <SV>) (cast (ptr <c-void>) 0)))))
(define-cmacro pWARN_ALL (scm-cast (begin (if (is-a? (cast (ptr <SV>) (cast (ptr <c-void>) 0)) <c-ptr>) (c-ptr+ (cast (ptr <SV>) (cast (ptr <c-void>) 0)) 1) (+ (cast <real> (cast (ptr <SV>) (cast (ptr <c-void>) 0))) 1)))))
(define-cmacro pWARN_NONE (scm-cast (begin (if (is-a? (cast (ptr <SV>) (cast (ptr <c-void>) 0)) <c-ptr>) (c-ptr+ (cast (ptr <SV>) (cast (ptr <c-void>) 0)) 2) (+ (cast <real> (cast (ptr <SV>) (cast (ptr <c-void>) 0))) 2)))))
(define-cfunclike-macro specialWARN (x) (scm-cast (begin (let ((G584 (cast <real> (let ((G583 (cast <real> (if (equal? (cast <real> (identity x)) (cast <real> (cast (ptr <SV>) (cast (ptr <c-void>) 0)))) 1 0)))) (if (eq? G583 0) (if (equal? (cast <real> (identity x)) (cast <real> (if (is-a? (cast (ptr <SV>) (cast (ptr <c-void>) 0)) <c-ptr>) (c-ptr+ (cast (ptr <SV>) (cast (ptr <c-void>) 0)) 1) (+ (cast <real> (cast (ptr <SV>) (cast (ptr <c-void>) 0))) 1)))) 1 0) G583))))) (if (eq? G584 0) (if (equal? (cast <real> (identity x)) (cast <real> (if (is-a? (cast (ptr <SV>) (cast (ptr <c-void>) 0)) <c-ptr>) (c-ptr+ (cast (ptr <SV>) (cast (ptr <c-void>) 0)) 2) (+ (cast <real> (cast (ptr <SV>) (cast (ptr <c-void>) 0))) 2)))) 1 0) G584)))))
(define-cmacro WARN_ALL 0)
(define-cmacro WARN_CLOSURE 1)
(define-cmacro WARN_DEPRECATED 2)
(define-cmacro WARN_EXITING 3)
(define-cmacro WARN_GLOB 4)
(define-cmacro WARN_IO 5)
(define-cmacro WARN_CLOSED 6)
(define-cmacro WARN_EXEC 7)
(define-cmacro WARN_LAYER 8)
(define-cmacro WARN_NEWLINE 9)
(define-cmacro WARN_PIPE 10)
(define-cmacro WARN_UNOPENED 11)
(define-cmacro WARN_MISC 12)
(define-cmacro WARN_NUMERIC 13)
(define-cmacro WARN_ONCE 14)
(define-cmacro WARN_OVERFLOW 15)
(define-cmacro WARN_PACK 16)
(define-cmacro WARN_PORTABLE 17)
(define-cmacro WARN_RECURSION 18)
(define-cmacro WARN_REDEFINE 19)
(define-cmacro WARN_REGEXP 20)
(define-cmacro WARN_SEVERE 21)
(define-cmacro WARN_DEBUGGING 22)
(define-cmacro WARN_INPLACE 23)
(define-cmacro WARN_INTERNAL 24)
(define-cmacro WARN_MALLOC 25)
(define-cmacro WARN_SIGNAL 26)
(define-cmacro WARN_SUBSTR 27)
(define-cmacro WARN_SYNTAX 28)
(define-cmacro WARN_AMBIGUOUS 29)
(define-cmacro WARN_BAREWORD 30)
(define-cmacro WARN_DIGIT 31)
(define-cmacro WARN_PARENTHESIS 32)
(define-cmacro WARN_PRECEDENCE 33)
(define-cmacro WARN_PRINTF 34)
(define-cmacro WARN_PROTOTYPE 35)
(define-cmacro WARN_QW 36)
(define-cmacro WARN_RESERVED 37)
(define-cmacro WARN_SEMICOLON 38)
(define-cmacro WARN_TAINT 39)
(define-cmacro WARN_THREADS 40)
(define-cmacro WARN_UNINITIALIZED 41)
(define-cmacro WARN_UNPACK 42)
(define-cmacro WARN_UNTIE 43)
(define-cmacro WARN_UTF8 44)
(define-cmacro WARN_VOID 45)
(define-cmacro WARN_Y2K 46)
(define-cmacro WARNsize 12)
(define-cmacro WARN_ALLstring "UUUUUUUUUUUU")
(define-cmacro WARN_NONEstring "\0\0\0\0\0\0\0\0\0\0\0\0")
(define-cmacro WARN_TAINTstring "\0\0\0\0\0\0\0\0\0@\0\0")
(define-cfunclike-macro isWARN_on (c x) (scm-cast (begin (logand (cast <integer> (ref (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity c)) 'sv_any))) 'xpv_pv) (cast <integer> (/ (cast <real> (* 2 (cast <real> (identity x)))) 8)))) (cast <integer> (ash 1 (cast <integer> (modulo (cast <integer> (* 2 (cast <real> (identity x)))) 8))))))))
(define-cfunclike-macro isWARNf_on (c x) (scm-cast (begin (logand (cast <integer> (ref (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity c)) 'sv_any))) 'xpv_pv) (cast <integer> (/ (cast <real> (if (is-a? (* 2 (cast <real> (identity x))) <c-ptr>) (c-ptr+ (* 2 (cast <real> (identity x))) 1) (+ (cast <real> (* 2 (cast <real> (identity x)))) 1))) 8)))) (cast <integer> (ash 1 (cast <integer> (modulo (cast <integer> (if (is-a? (* 2 (cast <real> (identity x))) <c-ptr>) (c-ptr+ (* 2 (cast <real> (identity x))) 1) (+ (cast <real> (* 2 (cast <real> (identity x)))) 1))) 8))))))))
(define-cfunclike-macro packWARN (a) (scm-cast (begin (identity a))))
(define-cfunclike-macro packWARN2 (a b) (scm-cast (begin (logior (cast <integer> (identity a)) (cast <integer> (ash (cast <integer> (identity b)) 8))))))
(define-cfunclike-macro packWARN3 (a b c) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (identity a)) (cast <integer> (ash (cast <integer> (identity b)) 8)))) (cast <integer> (ash (cast <integer> (identity c)) 16))))))
(define-cfunclike-macro packWARN4 (a b c d) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (identity a)) (cast <integer> (ash (cast <integer> (identity b)) 8)))) (cast <integer> (ash (cast <integer> (identity c)) 16)))) (cast <integer> (ash (cast <integer> (identity d)) 24))))))
(define-cfunclike-macro unpackWARN1 (x) (scm-cast (begin (logand (cast <integer> (identity x)) 255))))
(define-cfunclike-macro unpackWARN2 (x) (scm-cast (begin (logand (cast <integer> (ash (cast <integer> (identity x)) (- 8))) 255))))
(define-cfunclike-macro unpackWARN3 (x) (scm-cast (begin (logand (cast <integer> (ash (cast <integer> (identity x)) (- 16))) 255))))
(define-cfunclike-macro unpackWARN4 (x) (scm-cast (begin (logand (cast <integer> (ash (cast <integer> (identity x)) (- 24))) 255))))
(define-cfunclike-macro UTF8SKIP (s) (scm-cast (begin (ref PL_utf8skip (cast <integer> (deref (cast (ptr <U8>) s)))))))
(define-cfunclike-macro NATIVE_TO_ASCII (ch) (scm-cast (begin (identity ch))))
(define-cfunclike-macro ASCII_TO_NATIVE (ch) (scm-cast (begin (identity ch))))
(define-cfunclike-macro NATIVE_TO_UTF (ch) (scm-cast (begin (identity ch))))
(define-cfunclike-macro UTF_TO_NATIVE (ch) (scm-cast (begin (identity ch))))
(define-cfunclike-macro UNI_TO_NATIVE (ch) (scm-cast (begin (identity ch))))
(define-cfunclike-macro NATIVE_TO_UNI (ch) (scm-cast (begin (identity ch))))
(define-cfunclike-macro NATIVE_TO_NEED (enc ch) (scm-cast (begin (identity ch))))
(define-cfunclike-macro ASCII_TO_NEED (enc ch) (scm-cast (begin (identity ch))))
(define-cmacro Perl_utf8n_to_uvchr (scm-cast (begin Perl_utf8n_to_uvuni)))
(define-cmacro Perl_uvchr_to_utf8 (scm-cast (begin Perl_uvuni_to_utf8)))
(define-cfunclike-macro UNI_IS_INVARIANT (c) (scm-cast (begin (if (< (cast <real> (cast <UV> c)) 128) 1 0))))
(define-cfunclike-macro UTF8_IS_INVARIANT (c) (scm-cast (begin (if (< (cast <real> (cast <UV> (identity c))) 128) 1 0))))
(define-cfunclike-macro NATIVE_IS_INVARIANT (c) (scm-cast (begin (if (< (cast <real> (cast <UV> (identity c))) 128) 1 0))))
(define-cfunclike-macro UTF8_IS_START (c) (scm-cast (begin (let ((G585 (cast <real> (if (>= (cast <real> (cast <U8> c)) 192) 1 0)))) (if (eq? G585 0) G585 (if (<= (cast <real> (cast <U8> c)) 253) 1 0))))))
(define-cfunclike-macro UTF8_IS_CONTINUATION (c) (scm-cast (begin (let ((G586 (cast <real> (if (>= (cast <real> (cast <U8> c)) 128) 1 0)))) (if (eq? G586 0) G586 (if (<= (cast <real> (cast <U8> c)) 191) 1 0))))))
(define-cfunclike-macro UTF8_IS_CONTINUED (c) (scm-cast (begin (logand (cast <integer> (cast <U8> c)) 128))))
(define-cfunclike-macro UTF8_IS_DOWNGRADEABLE_START (c) (scm-cast (begin (if (equal? (cast <real> (logand (cast <integer> (cast <U8> c)) 252)) 192) 1 0))))
(define-cfunclike-macro UTF_START_MARK (len) (scm-cast (begin (if (eq? (cast <real> (if (> (cast <real> len) 7) 1 0)) 0) (ash 254 (cast <integer> (if (is-a? 7 <c-ptr>) (c-ptr- 7 (cast <real> len)) (- (cast <real> 7) (cast <real> len))))) 255))))
(define-cfunclike-macro UTF_START_MASK (len) (scm-cast (begin (if (eq? (cast <real> (if (>= (cast <real> len) 7) 1 0)) 0) (ash 31 (- (cast <integer> (if (is-a? len <c-ptr>) (c-ptr- len 2) (- (cast <real> len) 2))))) 0))))
(define-cmacro UTF_CONTINUATION_MARK 128)
(define-cmacro UTF_ACCUMULATION_SHIFT 6)
(define-cmacro UTF_CONTINUATION_MASK (scm-cast (begin (cast <U8> 63))))
(define-cfunclike-macro UTF8_ACCUMULATE (old new) (scm-cast (begin (logior (cast <integer> (ash (cast <integer> (identity old)) 6)) (cast <integer> (logand (cast <integer> (cast <U8> new)) (cast <integer> (cast <U8> 63))))))))
(define-cfunclike-macro UTF8_EIGHT_BIT_HI (c) (scm-cast (begin (logior (cast <integer> (ash (cast <integer> (cast <U8> (identity c))) (- 6))) (cast <integer> (if (eq? 0 0) 8128 255))))))
(define-cfunclike-macro UTF8_EIGHT_BIT_LO (c) (scm-cast (begin (logior (cast <integer> (logand (cast <integer> (cast <U8> (identity c))) (cast <integer> (cast <U8> 63)))) 128))))
(define-cfunclike-macro UNISKIP (uv) (scm-cast (begin (if (eq? (cast <real> (if (< (cast <real> (identity uv)) 128) 1 0)) 0) (if (eq? (cast <real> (if (< (cast <real> (identity uv)) 2048) 1 0)) 0) (if (eq? (cast <real> (if (< (cast <real> (identity uv)) 65536) 1 0)) 0) (if (eq? (cast <real> (if (< (cast <real> (identity uv)) 2097152) 1 0)) 0) (if (eq? (cast <real> (if (< (cast <real> (identity uv)) 67108864) 1 0)) 0) (if (eq? (cast <real> (if (< (cast <real> (identity uv)) 2147483648) 1 0)) 0) 7 6) 5) 4) 3) 2) 1))))
(define-cmacro UTF8_MAXLEN 13)
(define-cmacro UTF8_MAXLEN_UCLC_MULT 3)
(define-cmacro UTF8_MAXLEN_UCLC 39)
(define-cmacro UTF8_MAXLEN_FOLD_MULT 3)
(define-cmacro UTF8_MAXLEN_FOLD 39)
(define-cmacro UTF8_ALLOW_EMPTY 1)
(define-cmacro UTF8_ALLOW_CONTINUATION 2)
(define-cmacro UTF8_ALLOW_NON_CONTINUATION 4)
(define-cmacro UTF8_ALLOW_FE_FF 8)
(define-cmacro UTF8_ALLOW_SHORT 16)
(define-cmacro UTF8_ALLOW_SURROGATE 32)
(define-cmacro UTF8_ALLOW_FFFF 64)
(define-cmacro UTF8_ALLOW_LONG 128)
(define-cmacro UTF8_ALLOW_ANYUV 233)
(define-cmacro UTF8_ALLOW_ANY 255)
(define-cmacro UTF8_CHECK_ONLY 512)
(define-cmacro UNICODE_SURROGATE_FIRST 55296)
(define-cmacro UNICODE_SURROGATE_LAST 57343)
(define-cmacro UNICODE_REPLACEMENT 65533)
(define-cmacro UNICODE_BYTE_ORDER_MARK 65279)
(define-cmacro UNICODE_ILLEGAL 65535)
(define-cmacro PERL_UNICODE_MAX 1114111)
(define-cmacro UNICODE_ALLOW_SURROGATE 1)
(define-cmacro UNICODE_ALLOW_FDD0 2)
(define-cmacro UNICODE_ALLOW_FFFF 4)
(define-cmacro UNICODE_ALLOW_SUPER 8)
(define-cmacro UNICODE_ALLOW_ANY 15)
(define-cfunclike-macro UNICODE_IS_SURROGATE (c) (scm-cast (begin (let ((G611 (cast <real> (if (>= (cast <real> (identity c)) 55296) 1 0)))) (if (eq? G611 0) G611 (if (<= (cast <real> (identity c)) 57343) 1 0))))))
(define-cfunclike-macro UNICODE_IS_REPLACEMENT (c) (scm-cast (begin (if (equal? (cast <real> (identity c)) 65533) 1 0))))
(define-cfunclike-macro UNICODE_IS_BYTE_ORDER_MARK (c) (scm-cast (begin (if (equal? (cast <real> (identity c)) 65279) 1 0))))
(define-cfunclike-macro UNICODE_IS_ILLEGAL (c) (scm-cast (begin (if (equal? (cast <real> (identity c)) 65535) 1 0))))
(define-cfunclike-macro UTF8_IS_ASCII (c) (scm-cast (begin (if (< (cast <real> (cast <UV> (identity c))) 128) 1 0))))
(define-cmacro UNICODE_LATIN_SMALL_LETTER_SHARP_S 223)
(define-cmacro UNICODE_GREEK_CAPITAL_LETTER_SIGMA 931)
(define-cmacro UNICODE_GREEK_SMALL_LETTER_FINAL_SIGMA 962)
(define-cmacro UNICODE_GREEK_SMALL_LETTER_SIGMA 963)
(define-cmacro EBCDIC_LATIN_SMALL_LETTER_SHARP_S 89)
(define-cmacro UNI_DISPLAY_ISPRINT 1)
(define-cmacro UNI_DISPLAY_BACKSLASH 2)
(define-cmacro UNI_DISPLAY_QQ 3)
(define-cmacro UNI_DISPLAY_REGEX 3)
(define-cmacro SHARP_S_SKIP 2)
(define-cmacro I32_MAX_P1 (scm-cast (begin (* 2.0 (cast <real> (if (is-a? 1 <c-ptr>) (c-ptr+ 1 (cast <real> (ash (cast <integer> (cast <U32> 2147483647)) (- 1)))) (+ (cast <real> 1) (cast <real> (ash (cast <integer> (cast <U32> 2147483647)) (- 1))))))))))
(define-cmacro U32_MAX_P1 4.294967296e9)
(define-cmacro U32_MAX_P1_HALF 2.147483648e9)
(define-cmacro UV_MAX_P1 4.294967296e9)
(define-cmacro IV_MAX_P1 (scm-cast (begin (* 2.0 (cast <real> (if (is-a? 1 <c-ptr>) (c-ptr+ 1 (cast <real> (ash (cast <integer> (cast <UV> 2147483647)) (- 1)))) (+ (cast <real> 1) (cast <real> (ash (cast <integer> (cast <UV> 2147483647)) (- 1))))))))))
(define-cmacro UV_MAX_P1_HALF 2.147483648e9)
(define-cfunclike-macro CLUMP_2UV (iv) (scm-cast (begin (if (eq? (cast <real> (if (< (cast <real> (identity iv)) 0) 1 0)) 0) (cast <UV> (identity iv)) 0))))
(define-cfunclike-macro CLUMP_2IV (uv) (scm-cast (begin (if (eq? (cast <real> (if (> (cast <real> (identity uv)) (cast <real> (cast <UV> 2147483647))) 1 0)) 0) (cast <IV> (identity uv)) 2147483647))))
(define-cmacro MAXSYSFD 2)
(define-cmacro DEBUG_p_FLAG 1)
(define-cmacro DEBUG_s_FLAG 2)
(define-cmacro DEBUG_l_FLAG 4)
(define-cmacro DEBUG_t_FLAG 8)
(define-cmacro DEBUG_o_FLAG 16)
(define-cmacro DEBUG_c_FLAG 32)
(define-cmacro DEBUG_P_FLAG 64)
(define-cmacro DEBUG_m_FLAG 128)
(define-cmacro DEBUG_f_FLAG 256)
(define-cmacro DEBUG_r_FLAG 512)
(define-cmacro DEBUG_x_FLAG 1024)
(define-cmacro DEBUG_u_FLAG 2048)
(define-cmacro DEBUG_H_FLAG 8192)
(define-cmacro DEBUG_X_FLAG 16384)
(define-cmacro DEBUG_D_FLAG 32768)
(define-cmacro DEBUG_S_FLAG 65536)
(define-cmacro DEBUG_T_FLAG 131072)
(define-cmacro DEBUG_R_FLAG 262144)
(define-cmacro DEBUG_J_FLAG 524288)
(define-cmacro DEBUG_v_FLAG 1048576)
(define-cmacro DEBUG_MASK 2093055)
(define-cmacro DEBUG_DB_RECURSE_FLAG 1073741824)
(define-cmacro DEBUG_TOP_FLAG 2147483648)
(define-cmacro DEBUG_p_TEST 0)
(define-cmacro DEBUG_s_TEST 0)
(define-cmacro DEBUG_l_TEST 0)
(define-cmacro DEBUG_t_TEST 0)
(define-cmacro DEBUG_o_TEST 0)
(define-cmacro DEBUG_c_TEST 0)
(define-cmacro DEBUG_P_TEST 0)
(define-cmacro DEBUG_m_TEST 0)
(define-cmacro DEBUG_f_TEST 0)
(define-cmacro DEBUG_r_TEST 0)
(define-cmacro DEBUG_x_TEST 0)
(define-cmacro DEBUG_u_TEST 0)
(define-cmacro DEBUG_H_TEST 0)
(define-cmacro DEBUG_X_TEST 0)
(define-cmacro DEBUG_Xv_TEST 0)
(define-cmacro DEBUG_D_TEST 0)
(define-cmacro DEBUG_S_TEST 0)
(define-cmacro DEBUG_T_TEST 0)
(define-cmacro DEBUG_R_TEST 0)
(define-cmacro DEBUG_J_TEST 0)
(define-cmacro DEBUG_v_TEST 0)
(define-cfunclike-macro PERL_DEB (a) 0)
(define-cfunclike-macro PERL_DEBUG (a) 0)
(define-cfunclike-macro DEBUG_p (a) 0)
(define-cfunclike-macro DEBUG_s (a) 0)
(define-cfunclike-macro DEBUG_l (a) 0)
(define-cfunclike-macro DEBUG_t (a) 0)
(define-cfunclike-macro DEBUG_o (a) 0)
(define-cfunclike-macro DEBUG_c (a) 0)
(define-cfunclike-macro DEBUG_P (a) 0)
(define-cfunclike-macro DEBUG_m (a) 0)
(define-cfunclike-macro DEBUG_f (a) 0)
(define-cfunclike-macro DEBUG_r (a) 0)
(define-cfunclike-macro DEBUG_x (a) 0)
(define-cfunclike-macro DEBUG_u (a) 0)
(define-cfunclike-macro DEBUG_H (a) 0)
(define-cfunclike-macro DEBUG_X (a) 0)
(define-cfunclike-macro DEBUG_Xv (a) 0)
(define-cfunclike-macro DEBUG_D (a) 0)
(define-cfunclike-macro DEBUG_S (a) 0)
(define-cfunclike-macro DEBUG_T (a) 0)
(define-cfunclike-macro DEBUG_R (a) 0)
(define-cfunclike-macro DEBUG_v (a) 0)
(define-cfunclike-macro DEBUG_SCOPE (where) (scm-cast (begin 0 0)))
(define-cmacro PERL_MAGIC_sv 0)
(define-cmacro PERL_MAGIC_overload 65)
(define-cmacro PERL_MAGIC_overload_elem 97)
(define-cmacro PERL_MAGIC_overload_table 99)
(define-cmacro PERL_MAGIC_bm 66)
(define-cmacro PERL_MAGIC_regdata 68)
(define-cmacro PERL_MAGIC_regdatum 100)
(define-cmacro PERL_MAGIC_env 69)
(define-cmacro PERL_MAGIC_envelem 101)
(define-cmacro PERL_MAGIC_fm 102)
(define-cmacro PERL_MAGIC_regex_global 103)
(define-cmacro PERL_MAGIC_isa 73)
(define-cmacro PERL_MAGIC_isaelem 105)
(define-cmacro PERL_MAGIC_nkeys 107)
(define-cmacro PERL_MAGIC_dbfile 76)
(define-cmacro PERL_MAGIC_dbline 108)
(define-cmacro PERL_MAGIC_mutex 109)
(define-cmacro PERL_MAGIC_shared 78)
(define-cmacro PERL_MAGIC_shared_scalar 110)
(define-cmacro PERL_MAGIC_collxfrm 111)
(define-cmacro PERL_MAGIC_tied 80)
(define-cmacro PERL_MAGIC_tiedelem 112)
(define-cmacro PERL_MAGIC_tiedscalar 113)
(define-cmacro PERL_MAGIC_qr 114)
(define-cmacro PERL_MAGIC_sig 83)
(define-cmacro PERL_MAGIC_sigelem 115)
(define-cmacro PERL_MAGIC_taint 116)
(define-cmacro PERL_MAGIC_uvar 85)
(define-cmacro PERL_MAGIC_uvar_elem 117)
(define-cmacro PERL_MAGIC_vstring 86)
(define-cmacro PERL_MAGIC_vec 118)
(define-cmacro PERL_MAGIC_utf8 119)
(define-cmacro PERL_MAGIC_substr 120)
(define-cmacro PERL_MAGIC_defelem 121)
(define-cmacro PERL_MAGIC_glob 42)
(define-cmacro PERL_MAGIC_arylen 35)
(define-cmacro PERL_MAGIC_pos 46)
(define-cmacro PERL_MAGIC_backref 60)
(define-cmacro PERL_MAGIC_ext 126)
(define-cmacro YYMAXDEPTH 300)
(define-cfunclike-macro assert (what) 0)
(define-cmacro UNLINK (scm-cast (begin PerlLIO_unlink)))
(define-cmacro SCAN_DEF 0)
(define-cmacro SCAN_TR 1)
(define-cmacro SCAN_REPL 2)
(define-cmacro RUNOPS_DEFAULT (scm-cast (begin Perl_runops_standard)))
(define-cmacro MALLOC_INIT 0)
(define-cmacro MALLOC_TERM 0)
(define-cmacro THREADSV_NAMES "_123456789&`'+/.,\\\";^-%=|~:\x01\x05!@")
(define-cmacro LEX_NOTPARSING 11)
(define-cmacro HINT_PRIVATE_MASK 255)
(define-cmacro HINT_INTEGER 1)
(define-cmacro HINT_STRICT_REFS 2)
(define-cmacro HINT_LOCALE 4)
(define-cmacro HINT_BYTES 8)
(define-cmacro HINT_BLOCK_SCOPE 256)
(define-cmacro HINT_STRICT_SUBS 512)
(define-cmacro HINT_STRICT_VARS 1024)
(define-cmacro HINT_NEW_INTEGER 4096)
(define-cmacro HINT_NEW_FLOAT 8192)
(define-cmacro HINT_NEW_BINARY 16384)
(define-cmacro HINT_NEW_STRING 32768)
(define-cmacro HINT_NEW_RE 65536)
(define-cmacro HINT_LOCALIZE_HH 131072)
(define-cmacro HINT_RE_TAINT 1048576)
(define-cmacro HINT_RE_EVAL 2097152)
(define-cmacro HINT_FILETEST_ACCESS 4194304)
(define-cmacro HINT_UTF8 8388608)
(define-cmacro HINT_SORT_SORT_BITS 255)
(define-cmacro HINT_SORT_QUICKSORT 1)
(define-cmacro HINT_SORT_MERGESORT 2)
(define-cmacro HINT_SORT_STABLE 256)
(define-cfunclike-macro RsSNARF (sv) (scm-cast (begin (if (eq? (cast <real> (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 118423552)) 0) 1 0))))
(define-cfunclike-macro RsSIMPLE (sv) (scm-cast (begin (let ((G615 (cast <real> (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 118423552)))) (if (eq? G615 0) G615 (let ((G614 (cast <real> (if (eq? (cast <real> (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 262144)) 0) 1 0)))) (if (eq? G614 0) (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_cur) G614)))))))
(define-cfunclike-macro RsPARA (sv) (scm-cast (begin (let ((G616 (cast <real> (logand (cast <integer> (raw-ref (deref (identity sv)) 'sv_flags)) 262144)))) (if (eq? G616 0) G616 (if (eq? (cast <real> (raw-ref (deref (cast (ptr <XPV>) (raw-ref (deref (identity sv)) 'sv_any))) 'xpv_cur)) 0) 1 0))))))
(define-cmacro pthread_mutexattr_default (scm-cast (begin (cast (ptr <c-void>) 0))))
(define-cmacro pthread_condattr_default (scm-cast (begin (cast (ptr <c-void>) 0))))
(define-cfunclike-macro PTHREAD_CREATE (t a s d) (scm-cast (begin (pthread_create t (ptr (identity a)) s d))))
(define-cfunclike-macro PTHREAD_ATTR_SETDETACHSTATE (a s) (scm-cast (begin (pthread_attr_setdetachstate a s))))
(define-cfunclike-macro MUTEX_INIT (m) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_mutex_init (identity m) (cast (ptr <c-void>) 0)))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: MUTEX_INIT (%d) [%s:%d]" _eC_ "<stdin>" 6010)))))))
(define-cfunclike-macro MUTEX_LOCK (m) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_mutex_lock (identity m)))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: MUTEX_LOCK (%d) [%s:%d]" _eC_ "<stdin>" 6011)))))))
(define-cfunclike-macro MUTEX_UNLOCK (m) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_mutex_unlock (identity m)))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: MUTEX_UNLOCK (%d) [%s:%d]" _eC_ "<stdin>" 6012)))))))
(define-cfunclike-macro MUTEX_DESTROY (m) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_mutex_destroy (identity m)))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: MUTEX_DESTROY (%d) [%s:%d]" _eC_ "<stdin>" 6013)))))))
(define-cfunclike-macro COND_INIT (c) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_cond_init (identity c) (cast (ptr <c-void>) 0)))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: COND_INIT (%d) [%s:%d]" _eC_ "<stdin>" 6014)))))))
(define-cfunclike-macro COND_SIGNAL (c) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_cond_signal (identity c)))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: COND_SIGNAL (%d) [%s:%d]" _eC_ "<stdin>" 6015)))))))
(define-cfunclike-macro COND_BROADCAST (c) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_cond_broadcast (identity c)))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: COND_BROADCAST (%d) [%s:%d]" _eC_ "<stdin>" 6016)))))))
(define-cfunclike-macro COND_WAIT (c m) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_cond_wait (identity c) (identity m)))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: COND_WAIT (%d) [%s:%d]" _eC_ "<stdin>" 6017)))))))
(define-cfunclike-macro COND_DESTROY (c) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_cond_destroy (identity c)))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: COND_DESTROY (%d) [%s:%d]" _eC_ "<stdin>" 6018)))))))
(define-cfunclike-macro DETACH (t) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_detach (raw-ref (deref (identity t)) 'self)))) (set! (ref _eC_) %v) %v)) 0) 0 (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_mutex_unlock (ptr (raw-ref (deref (identity t)) 'mutex))))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: MUTEX_UNLOCK (%d) [%s:%d]" _eC_ "<stdin>" 6019)))) (Perl_croak_nocontext "panic: DETACH (%d) [%s:%d]" _eC_ "<stdin>" 6019))))))))
(define-cfunclike-macro JOIN (t avp) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_join (raw-ref (deref (identity t)) 'self) (cast (ptr (ptr <c-void>)) (identity avp))))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: pthread_join (%d) [%s:%d]" _eC_ "<stdin>" 6020)))))))
(define-cfunclike-macro PTHREAD_GETSPECIFIC (key) (scm-cast (begin (pthread_getspecific key))))
(define-cfunclike-macro PERL_SET_CONTEXT (t) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_setspecific PL_thr_key (cast (ptr <c-void>) (identity t))))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: pthread_setspecific (%d) [%s:%d]" _eC_ "<stdin>" 6023)))))))
(define-cfunclike-macro PTHREAD_ATFORK (prepare parent child) (scm-cast (begin (pthread_atfork prepare parent child))))
(define-cfunclike-macro THREAD_RET_CAST (p) (scm-cast (begin (cast (ptr <c-void>) (identity p)))))
(define-cmacro LOCK_SV_MUTEX 0)
(define-cmacro UNLOCK_SV_MUTEX 0)
(define-cmacro LOCK_STRTAB_MUTEX 0)
(define-cmacro UNLOCK_STRTAB_MUTEX 0)
(define-cmacro LOCK_CRED_MUTEX 0)
(define-cmacro UNLOCK_CRED_MUTEX 0)
(define-cmacro LOCK_FDPID_MUTEX 0)
(define-cmacro UNLOCK_FDPID_MUTEX 0)
(define-cmacro LOCK_SV_LOCK_MUTEX 0)
(define-cmacro UNLOCK_SV_LOCK_MUTEX 0)
(define-cfunclike-macro SET_THR (t) (scm-cast (begin (cast <c-void> (begin let* ((_eC_ (make <c-int>))) (if (eq? (cast <real> (let ((%v (pthread_setspecific PL_thr_key (cast (ptr <c-void>) (identity t))))) (set! (ref _eC_) %v) %v)) 0) 0 (Perl_croak_nocontext "panic: pthread_setspecific (%d) [%s:%d]" _eC_ "<stdin>" 6042)))))))
(define-cmacro INIT_THREADS (scm-cast (begin (cast <c-void> 0))))
(define-cmacro ARGS 0)
(define-cmacro dARGS 0)
(define-cmacro AMGf_noright 1)
(define-cmacro AMGf_noleft 2)
(define-cmacro AMGf_assign 4)
(define-cmacro AMGf_unary 8)
(define-cmacro PERL_CALLCONV 0)
(define-cmacro Perl_pp_i_preinc (scm-cast (begin Perl_pp_preinc)))
(define-cmacro Perl_pp_i_predec (scm-cast (begin Perl_pp_predec)))
(define-cmacro Perl_pp_i_postinc (scm-cast (begin Perl_pp_postinc)))
(define-cmacro Perl_pp_i_postdec (scm-cast (begin Perl_pp_postdec)))
(define-cmacro PL_GNo (scm-cast (begin PL_No)))
(define-cmacro PL_GYes (scm-cast (begin PL_Yes)))
(define-cmacro PL_Gcsighandlerp (scm-cast (begin PL_csighandlerp)))
(define-cmacro PL_Gcurinterp (scm-cast (begin PL_curinterp)))
(define-cmacro PL_Gdo_undump (scm-cast (begin PL_do_undump)))
(define-cmacro PL_Gdollarzero_mutex (scm-cast (begin PL_dollarzero_mutex)))
(define-cmacro PL_Ghexdigit (scm-cast (begin PL_hexdigit)))
(define-cmacro PL_Gop_mutex (scm-cast (begin PL_op_mutex)))
(define-cmacro PL_Gpatleave (scm-cast (begin PL_patleave)))
(define-cmacro PL_Gsh_path (scm-cast (begin PL_sh_path)))
(define-cmacro PL_Gsigfpe_saved (scm-cast (begin PL_sigfpe_saved)))
(define-cmacro PL_Gsv_placeholder (scm-cast (begin PL_sv_placeholder)))
(define-cmacro PL_Gthr_key (scm-cast (begin PL_thr_key)))
(define-cmacro PL_Guse_safe_putenv (scm-cast (begin PL_use_safe_putenv)))
(define-cmacro REENTRINC 0)
(define-cfunclike-macro ctermid (a) (scm-cast (begin (ctermid_r a))))
(define-cmacro getlogin (scm-cast (begin getlogin)))
(define-cmacro NofAMmeth (scm-cast (begin max_amg_code)))
(define-cfunclike-macro AMG_id2name (id) (scm-cast (begin (if (is-a? (cast (ptr <c-char>) (ref PL_AMG_names (cast <integer> id))) <c-ptr>) (c-ptr+ (cast (ptr <c-char>) (ref PL_AMG_names (cast <integer> id))) 1) (+ (cast <real> (cast (ptr <c-char>) (ref PL_AMG_names (cast <integer> id)))) 1)))))
(define-cmacro AMGfallNEVER 1)
(define-cmacro AMGfallNO 2)
(define-cmacro AMGfallYES 3)
(define-cmacro AMTf_AMAGIC 1)
(define-cmacro AMTf_OVERLOADED 2)
(define-cfunclike-macro AMT_AMAGIC (amt) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity amt)) 'flags)) 1))))
(define-cfunclike-macro AMT_AMAGIC_on (amt) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity amt)) 'flags)) 1))) (set! (ref (deref (identity amt)) 'flags) %v) %v))))
(define-cfunclike-macro AMT_AMAGIC_off (amt) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity amt)) 'flags)) -2))) (set! (ref (deref (identity amt)) 'flags) %v) %v))))
(define-cfunclike-macro AMT_OVERLOADED (amt) (scm-cast (begin (logand (cast <integer> (raw-ref (deref (identity amt)) 'flags)) 2))))
(define-cfunclike-macro AMT_OVERLOADED_on (amt) (scm-cast (begin (let ((%v (logior (cast <integer> (raw-ref (deref (identity amt)) 'flags)) 2))) (set! (ref (deref (identity amt)) 'flags) %v) %v))))
(define-cfunclike-macro AMT_OVERLOADED_off (amt) (scm-cast (begin (let ((%v (logand (cast <integer> (raw-ref (deref (identity amt)) 'flags)) -3))) (set! (ref (deref (identity amt)) 'flags) %v) %v))))
(define-cmacro PERLDB_ALL 831)
(define-cmacro PERLDBf_SUB 1)
(define-cmacro PERLDBf_LINE 2)
(define-cmacro PERLDBf_NOOPT 4)
(define-cmacro PERLDBf_INTER 8)
(define-cmacro PERLDBf_SUBLINE 16)
(define-cmacro PERLDBf_SINGLE 32)
(define-cmacro PERLDBf_NONAME 64)
(define-cmacro PERLDBf_GOTO 128)
(define-cmacro PERLDBf_NAMEEVAL 256)
(define-cmacro PERLDBf_NAMEANON 512)
(define-cmacro Strtol (scm-cast (begin strtol)))
(define-cmacro Atol (scm-cast (begin atol)))
(define-cmacro Strtoul (scm-cast (begin strtoul)))
(define-cfunclike-macro Atoul (s) (scm-cast (begin (strtoul s (cast (ptr (ptr <c-char>)) (cast (ptr <c-void>) 0)) 10))))
(define-cmacro PERL_SCRIPT_MODE "r")
(define-cfunclike-macro PERL_ALLOC_CHECK (p) (scm-cast (begin (cast <c-void> 0))))
(define-cmacro _SYS_IPC_H_ 0)
(define-cmacro IPC_CREAT 512)
(define-cmacro IPC_EXCL 1024)
(define-cmacro IPC_NOWAIT 2048)
(define-cmacro IPC_PRIVATE (scm-cast (begin (cast <key_t> 0))))
(define-cmacro IPC_RMID 0)
(define-cmacro IPC_SET 1)
(define-cmacro IPC_STAT 2)
(define-cmacro IPC_R 256)
(define-cmacro IPC_W 128)
(define-cmacro IPC_M 4096)
(define-cmacro _SYS_SEM_H_ 0)
(define-cmacro GETNCNT 3)
(define-cmacro GETPID 4)
(define-cmacro GETVAL 5)
(define-cmacro GETALL 6)
(define-cmacro GETZCNT 7)
(define-cmacro SETVAL 8)
(define-cmacro SETALL 9)
(define-cmacro SEM_UNDO 4096)
(define-cmacro MAX_SOPS 5)
(define-cmacro SEM_A 128)
(define-cmacro SEM_R 256)
(define-cfunclike-macro Semctl (id num cmd semun) (scm-cast (begin (semctl id num cmd semun))))
(define-cmacro START_MY_CXT 0)
(define-cmacro _SYS_FILE_H_ 0)
(define-cmacro _SYS_FCNTL_H_ 0)
(define-cmacro O_RDONLY 0)
(define-cmacro O_WRONLY 1)
(define-cmacro O_RDWR 2)
(define-cmacro O_ACCMODE 3)
(define-cmacro FREAD 1)
(define-cmacro FWRITE 2)
(define-cmacro O_NONBLOCK 4)
(define-cmacro O_APPEND 8)
(define-cmacro O_SYNC 128)
(define-cmacro O_SHLOCK 16)
(define-cmacro O_EXLOCK 32)
(define-cmacro O_ASYNC 64)
(define-cmacro O_FSYNC 128)
(define-cmacro O_NOFOLLOW 256)
(define-cmacro O_CREAT 512)
(define-cmacro O_TRUNC 1024)
(define-cmacro O_EXCL 2048)
(define-cmacro O_EVTONLY 32768)
(define-cmacro O_DIRECTORY 1048576)
(define-cmacro O_NOCTTY 0)
(define-cmacro FAPPEND 8)
(define-cmacro FASYNC 64)
(define-cmacro FFSYNC 128)
(define-cmacro FNONBLOCK 4)
(define-cmacro FNDELAY 4)
(define-cmacro O_NDELAY 4)
(define-cmacro CPF_OVERWRITE 1)
(define-cmacro CPF_IGNORE_MODE 2)
(define-cmacro CPF_MASK 3)
(define-cmacro F_DUPFD 0)
(define-cmacro F_GETFD 1)
(define-cmacro F_SETFD 2)
(define-cmacro F_GETFL 3)
(define-cmacro F_SETFL 4)
(define-cmacro F_GETOWN 5)
(define-cmacro F_SETOWN 6)
(define-cmacro F_GETLK 7)
(define-cmacro F_SETLK 8)
(define-cmacro F_SETLKW 9)
(define-cmacro F_CHKCLEAN 41)
(define-cmacro F_PREALLOCATE 42)
(define-cmacro F_SETSIZE 43)
(define-cmacro F_RDADVISE 44)
(define-cmacro F_RDAHEAD 45)
(define-cmacro F_READBOOTSTRAP 46)
(define-cmacro F_WRITEBOOTSTRAP 47)
(define-cmacro F_NOCACHE 48)
(define-cmacro F_LOG2PHYS 49)
(define-cmacro F_GETPATH 50)
(define-cmacro F_FULLFSYNC 51)
(define-cmacro F_PATHPKG_CHECK 52)
(define-cmacro F_FREEZE_FS 53)
(define-cmacro F_THAW_FS 54)
(define-cmacro F_GLOBAL_NOCACHE 55)
(define-cmacro FCNTL_FS_SPECIFIC_BASE 65536)
(define-cmacro FD_CLOEXEC 1)
(define-cmacro F_RDLCK 1)
(define-cmacro F_UNLCK 2)
(define-cmacro F_WRLCK 3)
(define-cmacro F_ALLOCATECONTIG 2)
(define-cmacro F_ALLOCATEALL 4)
(define-cmacro F_PEOFPOSMODE 3)
(define-cmacro F_VOLPOSMODE 4)
(define-cmacro LOCK_SH 1)
(define-cmacro LOCK_EX 2)
(define-cmacro LOCK_NB 4)
(define-cmacro LOCK_UN 8)
(define-cmacro O_POPUP 2147483648)
(define-cmacro O_ALERT 536870912)
(define-cmacro FILESEC_GUID (scm-cast (begin FILESEC_UUID)))
(define-cmacro _FILESEC_UNSET_PROPERTY (scm-cast (begin (cast (ptr <c-void>) 0))))
(define-cmacro _FILESEC_REMOVE_ACL (scm-cast (begin (cast (ptr <c-void>) 1))))
(define-cmacro _SYS_QUEUE_H_ 0)
(define-cfunclike-macro SLIST_EMPTY (head) (scm-cast (begin (if (equal? (cast <real> (raw-ref (deref (identity head)) 'slh_first)) (cast <real> (cast (ptr <c-void>) 0))) 1 0))))
(define-cfunclike-macro SLIST_FIRST (head) (scm-cast (begin (raw-ref (deref (identity head)) 'slh_first))))
(define-cfunclike-macro SLIST_INIT (head) (scm-cast (begin (begin (let ((%v (cast (ptr <c-void>) 0))) (set! (ref (deref (identity head)) 'slh_first) %v) %v)) 0)))
(define-cfunclike-macro SLIST_INSERT_AFTER (slistelm elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (raw-ref (raw-ref (deref (identity slistelm)) 'field) 'sle_next))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'sle_next) %v) %v) (let ((%v (identity elm))) (set! (ref (raw-ref (deref (identity slistelm)) 'field) 'sle_next) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro SLIST_INSERT_HEAD (head elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (raw-ref (deref (identity head)) 'slh_first))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'sle_next) %v) %v) (let ((%v (identity elm))) (set! (ref (deref (identity head)) 'slh_first) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro SLIST_NEXT (elm field) (scm-cast (begin (raw-ref (raw-ref (deref (identity elm)) 'field) 'sle_next))))
(define-cfunclike-macro SLIST_REMOVE_HEAD (head field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (raw-ref (raw-ref (deref (raw-ref (deref (identity head)) 'slh_first)) 'field) 'sle_next))) (set! (ref (deref (identity head)) 'slh_first) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-c-struct type)
(define-cfunclike-macro SLIST_REMOVE (head elm type field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (deref (identity head)) 'slh_first)) (cast <real> (identity elm))) 1 0)) 0) (let* ((curelm (make (ptr (c-struct 'type))))) (set! (ref curelm) (raw-ref (deref (identity head)) 'slh_first)) (call/cc (lambda (%break) (let %continue () (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (raw-ref (deref curelm) 'field) 'sle_next)) (cast <real> (identity elm))) 0 1)) 0) (%break 0) (begin (let ((%v (raw-ref (raw-ref (deref curelm) 'field) 'sle_next))) (set! (ref curelm) %v) %v) (%continue)))))) (let ((%v (raw-ref (raw-ref (deref (raw-ref (raw-ref (deref curelm) 'field) 'sle_next)) 'field) 'sle_next))) (set! (ref (raw-ref (deref curelm) 'field) 'sle_next) %v) %v)) (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (raw-ref (raw-ref (deref (raw-ref (deref (identity head)) 'slh_first)) 'field) 'sle_next))) (set! (ref (deref (identity head)) 'slh_first) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body))))))) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro STAILQ_EMPTY (head) (scm-cast (begin (if (equal? (cast <real> (raw-ref (deref (identity head)) 'stqh_first)) (cast <real> (cast (ptr <c-void>) 0))) 1 0))))
(define-cfunclike-macro STAILQ_INIT (head) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (cast (ptr <c-void>) 0))) (set! (ref (deref (identity head)) 'stqh_first) %v) %v) (let ((%v (ptr (raw-ref (deref (identity head)) 'stqh_first)))) (set! (ref (deref (identity head)) 'stqh_last) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro STAILQ_FIRST (head) (scm-cast (begin (raw-ref (deref (identity head)) 'stqh_first))))
(define-cfunclike-macro STAILQ_LAST (head) (scm-cast (begin (deref (raw-ref (deref (identity head)) 'stqh_last)))))
(define-cfunclike-macro STAILQ_INSERT_HEAD (head elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (let ((%v (raw-ref (deref (identity head)) 'stqh_first))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'stqe_next) %v) %v)) (cast <real> (cast (ptr <c-void>) 0))) 1 0)) 0) 0 (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'stqe_next)))) (set! (ref (deref (identity head)) 'stqh_last) %v) %v)) (let ((%v (identity elm))) (set! (ref (deref (identity head)) 'stqh_first) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro STAILQ_INSERT_TAIL (head elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (cast (ptr <c-void>) 0))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'stqe_next) %v) %v) (let ((%v (identity elm))) (set! (deref (raw-ref (deref (identity head)) 'stqh_last)) %v) %v) (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'stqe_next)))) (set! (ref (deref (identity head)) 'stqh_last) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro STAILQ_INSERT_AFTER (head tqelm elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (let ((%v (raw-ref (raw-ref (deref (identity tqelm)) 'field) 'stqe_next))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'stqe_next) %v) %v)) (cast <real> (cast (ptr <c-void>) 0))) 1 0)) 0) 0 (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'stqe_next)))) (set! (ref (deref (identity head)) 'stqh_last) %v) %v)) (let ((%v (identity elm))) (set! (ref (raw-ref (deref (identity tqelm)) 'field) 'stqe_next) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro STAILQ_NEXT (elm field) (scm-cast (begin (raw-ref (raw-ref (deref (identity elm)) 'field) 'stqe_next))))
(define-cfunclike-macro STAILQ_REMOVE_HEAD (head field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (let ((%v (raw-ref (raw-ref (deref (raw-ref (deref (identity head)) 'stqh_first)) 'field) 'stqe_next))) (set! (ref (deref (identity head)) 'stqh_first) %v) %v)) (cast <real> (cast (ptr <c-void>) 0))) 1 0)) 0) 0 (let ((%v (ptr (raw-ref (deref (identity head)) 'stqh_first)))) (set! (ref (deref (identity head)) 'stqh_last) %v) %v))) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro STAILQ_REMOVE_HEAD_UNTIL (head elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (let ((%v (raw-ref (raw-ref (deref (identity elm)) 'field) 'stqe_next))) (set! (ref (deref (identity head)) 'stqh_first) %v) %v)) (cast <real> (cast (ptr <c-void>) 0))) 1 0)) 0) 0 (let ((%v (ptr (raw-ref (deref (identity head)) 'stqh_first)))) (set! (ref (deref (identity head)) 'stqh_last) %v) %v))) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro STAILQ_REMOVE (head elm type field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (deref (identity head)) 'stqh_first)) (cast <real> (identity elm))) 1 0)) 0) (let* ((curelm (make (ptr (c-struct 'type))))) (set! (ref curelm) (raw-ref (deref (identity head)) 'stqh_first)) (call/cc (lambda (%break) (let %continue () (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (raw-ref (deref curelm) 'field) 'stqe_next)) (cast <real> (identity elm))) 0 1)) 0) (%break 0) (begin (let ((%v (raw-ref (raw-ref (deref curelm) 'field) 'stqe_next))) (set! (ref curelm) %v) %v) (%continue)))))) (if (eq? (cast <real> (if (equal? (cast <real> (let ((%v (raw-ref (raw-ref (deref (raw-ref (raw-ref (deref curelm) 'field) 'stqe_next)) 'field) 'stqe_next))) (set! (ref (raw-ref (deref curelm) 'field) 'stqe_next) %v) %v)) (cast <real> (cast (ptr <c-void>) 0))) 1 0)) 0) 0 (let ((%v (ptr (raw-ref (raw-ref (deref (identity curelm)) 'field) 'stqe_next)))) (set! (ref (deref (identity head)) 'stqh_last) %v) %v))) (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (let ((%v (raw-ref (raw-ref (deref (raw-ref (deref (identity head)) 'stqh_first)) 'field) 'stqe_next))) (set! (ref (deref (identity head)) 'stqh_first) %v) %v)) (cast <real> (cast (ptr <c-void>) 0))) 1 0)) 0) 0 (let ((%v (ptr (raw-ref (deref (identity head)) 'stqh_first)))) (set! (ref (deref (identity head)) 'stqh_last) %v) %v))) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body))))))) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro LIST_EMPTY (head) (scm-cast (begin (if (equal? (cast <real> (raw-ref (deref (identity head)) 'lh_first)) (cast <real> (cast (ptr <c-void>) 0))) 1 0))))
(define-cfunclike-macro LIST_FIRST (head) (scm-cast (begin (raw-ref (deref (identity head)) 'lh_first))))
(define-cfunclike-macro LIST_INIT (head) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (cast (ptr <c-void>) 0))) (set! (ref (deref (identity head)) 'lh_first) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro LIST_INSERT_AFTER (listelm elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (let ((%v (raw-ref (raw-ref (deref (identity listelm)) 'field) 'le_next))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'le_next) %v) %v)) (cast <real> (cast (ptr <c-void>) 0))) 0 1)) 0) 0 (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'le_next)))) (set! (ref (raw-ref (deref (raw-ref (raw-ref (deref (identity listelm)) 'field) 'le_next)) 'field) 'le_prev) %v) %v)) (let ((%v (identity elm))) (set! (ref (raw-ref (deref (identity listelm)) 'field) 'le_next) %v) %v) (let ((%v (ptr (raw-ref (raw-ref (deref (identity listelm)) 'field) 'le_next)))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'le_prev) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro LIST_INSERT_BEFORE (listelm elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (raw-ref (raw-ref (deref (identity listelm)) 'field) 'le_prev))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'le_prev) %v) %v) (let ((%v (identity listelm))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'le_next) %v) %v) (let ((%v (identity elm))) (set! (deref (raw-ref (raw-ref (deref (identity listelm)) 'field) 'le_prev)) %v) %v) (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'le_next)))) (set! (ref (raw-ref (deref (identity listelm)) 'field) 'le_prev) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro LIST_INSERT_HEAD (head elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (let ((%v (raw-ref (deref (identity head)) 'lh_first))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'le_next) %v) %v)) (cast <real> (cast (ptr <c-void>) 0))) 0 1)) 0) 0 (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'le_next)))) (set! (ref (raw-ref (deref (raw-ref (deref (identity head)) 'lh_first)) 'field) 'le_prev) %v) %v)) (let ((%v (identity elm))) (set! (ref (deref (identity head)) 'lh_first) %v) %v) (let ((%v (ptr (raw-ref (deref (identity head)) 'lh_first)))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'le_prev) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro LIST_NEXT (elm field) (scm-cast (begin (raw-ref (raw-ref (deref (identity elm)) 'field) 'le_next))))
(define-cfunclike-macro LIST_REMOVE (elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (raw-ref (deref (identity elm)) 'field) 'le_next)) (cast <real> (cast (ptr <c-void>) 0))) 0 1)) 0) 0 (let ((%v (raw-ref (raw-ref (deref (identity elm)) 'field) 'le_prev))) (set! (ref (raw-ref (deref (raw-ref (raw-ref (deref (identity elm)) 'field) 'le_next)) 'field) 'le_prev) %v) %v)) (let ((%v (raw-ref (raw-ref (deref (identity elm)) 'field) 'le_next))) (set! (deref (raw-ref (raw-ref (deref (identity elm)) 'field) 'le_prev)) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro TAILQ_EMPTY (head) (scm-cast (begin (if (equal? (cast <real> (raw-ref (deref (identity head)) 'tqh_first)) (cast <real> (cast (ptr <c-void>) 0))) 1 0))))
(define-cfunclike-macro TAILQ_FOREACH (var head field) (scm-cast (begin (call/cc (lambda (%break) (let ((%v (raw-ref (deref (identity head)) 'tqh_first))) (set! (ref var) %v) %v) (let %continue () (if (eq? (cast <real> var) 0) (%break 0) (begin 0 (let ((%v (raw-ref (raw-ref (deref (identity var)) 'field) 'tqe_next))) (set! (ref var) %v) %v) (%continue)))))))))
(define-c-struct headname)
(define-cfunclike-macro TAILQ_FOREACH_REVERSE (var head field headname) (scm-cast (begin (call/cc (lambda (%break) (let ((%v (deref (raw-ref (deref (cast (ptr (c-struct 'headname)) (raw-ref (deref (identity head)) 'tqh_last))) 'tqh_last)))) (set! (ref var) %v) %v) (let %continue () (if (eq? (cast <real> var) 0) (%break 0) (begin 0 (let ((%v (deref (raw-ref (deref (cast (ptr (c-struct 'headname)) (raw-ref (raw-ref (deref (identity var)) 'field) 'tqe_prev))) 'tqh_last)))) (set! (ref var) %v) %v) (%continue)))))))))
(define-cfunclike-macro TAILQ_FIRST (head) (scm-cast (begin (raw-ref (deref (identity head)) 'tqh_first))))
(define-cfunclike-macro TAILQ_LAST (head headname) (scm-cast (begin (deref (raw-ref (deref (cast (ptr (c-struct 'headname)) (raw-ref (deref (identity head)) 'tqh_last))) 'tqh_last)))))
(define-cfunclike-macro TAILQ_NEXT (elm field) (scm-cast (begin (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_next))))
(define-cfunclike-macro TAILQ_PREV (elm headname field) (scm-cast (begin (deref (raw-ref (deref (cast (ptr (c-struct 'headname)) (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_prev))) 'tqh_last)))))
(define-cfunclike-macro TAILQ_INIT (head) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (cast (ptr <c-void>) 0))) (set! (ref (deref (identity head)) 'tqh_first) %v) %v) (let ((%v (ptr (raw-ref (deref (identity head)) 'tqh_first)))) (set! (ref (deref (identity head)) 'tqh_last) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro TAILQ_INSERT_HEAD (head elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (let ((%v (raw-ref (deref (identity head)) 'tqh_first))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'tqe_next) %v) %v)) (cast <real> (cast (ptr <c-void>) 0))) 0 1)) 0) (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_next)))) (set! (ref (deref (identity head)) 'tqh_last) %v) %v) (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_next)))) (set! (ref (raw-ref (deref (raw-ref (deref (identity head)) 'tqh_first)) 'field) 'tqe_prev) %v) %v)) (let ((%v (identity elm))) (set! (ref (deref (identity head)) 'tqh_first) %v) %v) (let ((%v (ptr (raw-ref (deref (identity head)) 'tqh_first)))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'tqe_prev) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro TAILQ_INSERT_TAIL (head elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (cast (ptr <c-void>) 0))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'tqe_next) %v) %v) (let ((%v (raw-ref (deref (identity head)) 'tqh_last))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'tqe_prev) %v) %v) (let ((%v (identity elm))) (set! (deref (raw-ref (deref (identity head)) 'tqh_last)) %v) %v) (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_next)))) (set! (ref (deref (identity head)) 'tqh_last) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro TAILQ_INSERT_AFTER (head listelm elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (let ((%v (raw-ref (raw-ref (deref (identity listelm)) 'field) 'tqe_next))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'tqe_next) %v) %v)) (cast <real> (cast (ptr <c-void>) 0))) 0 1)) 0) (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_next)))) (set! (ref (deref (identity head)) 'tqh_last) %v) %v) (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_next)))) (set! (ref (raw-ref (deref (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_next)) 'field) 'tqe_prev) %v) %v)) (let ((%v (identity elm))) (set! (ref (raw-ref (deref (identity listelm)) 'field) 'tqe_next) %v) %v) (let ((%v (ptr (raw-ref (raw-ref (deref (identity listelm)) 'field) 'tqe_next)))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'tqe_prev) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro TAILQ_INSERT_BEFORE (listelm elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (raw-ref (raw-ref (deref (identity listelm)) 'field) 'tqe_prev))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'tqe_prev) %v) %v) (let ((%v (identity listelm))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'tqe_next) %v) %v) (let ((%v (identity elm))) (set! (deref (raw-ref (raw-ref (deref (identity listelm)) 'field) 'tqe_prev)) %v) %v) (let ((%v (ptr (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_next)))) (set! (ref (raw-ref (deref (identity listelm)) 'field) 'tqe_prev) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro TAILQ_REMOVE (head elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_next)) (cast <real> (cast (ptr <c-void>) 0))) 0 1)) 0) (let ((%v (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_prev))) (set! (ref (deref (identity head)) 'tqh_last) %v) %v) (let ((%v (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_prev))) (set! (ref (raw-ref (deref (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_next)) 'field) 'tqe_prev) %v) %v)) (let ((%v (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_next))) (set! (deref (raw-ref (raw-ref (deref (identity elm)) 'field) 'tqe_prev)) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro CIRCLEQ_EMPTY (head) (scm-cast (begin (if (equal? (cast <real> (raw-ref (deref (identity head)) 'cqh_first)) (cast <real> (cast (ptr <c-void>) (identity head)))) 1 0))))
(define-cfunclike-macro CIRCLEQ_FIRST (head) (scm-cast (begin (raw-ref (deref (identity head)) 'cqh_first))))
(define-cfunclike-macro CIRCLEQ_INIT (head) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (cast (ptr <c-void>) (identity head)))) (set! (ref (deref (identity head)) 'cqh_first) %v) %v) (let ((%v (cast (ptr <c-void>) (identity head)))) (set! (ref (deref (identity head)) 'cqh_last) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro CIRCLEQ_INSERT_AFTER (head listelm elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (raw-ref (raw-ref (deref (identity listelm)) 'field) 'cqe_next))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'cqe_next) %v) %v) (let ((%v (identity listelm))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'cqe_prev) %v) %v) (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (raw-ref (deref (identity listelm)) 'field) 'cqe_next)) (cast <real> (cast (ptr <c-void>) (identity head)))) 1 0)) 0) (let ((%v (identity elm))) (set! (ref (raw-ref (deref (raw-ref (raw-ref (deref (identity listelm)) 'field) 'cqe_next)) 'field) 'cqe_prev) %v) %v) (let ((%v (identity elm))) (set! (ref (deref (identity head)) 'cqh_last) %v) %v)) (let ((%v (identity elm))) (set! (ref (raw-ref (deref (identity listelm)) 'field) 'cqe_next) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro CIRCLEQ_INSERT_BEFORE (head listelm elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (identity listelm))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'cqe_next) %v) %v) (let ((%v (raw-ref (raw-ref (deref (identity listelm)) 'field) 'cqe_prev))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'cqe_prev) %v) %v) (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (raw-ref (deref (identity listelm)) 'field) 'cqe_prev)) (cast <real> (cast (ptr <c-void>) (identity head)))) 1 0)) 0) (let ((%v (identity elm))) (set! (ref (raw-ref (deref (raw-ref (raw-ref (deref (identity listelm)) 'field) 'cqe_prev)) 'field) 'cqe_next) %v) %v) (let ((%v (identity elm))) (set! (ref (deref (identity head)) 'cqh_first) %v) %v)) (let ((%v (identity elm))) (set! (ref (raw-ref (deref (identity listelm)) 'field) 'cqe_prev) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro CIRCLEQ_INSERT_HEAD (head elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (raw-ref (deref (identity head)) 'cqh_first))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'cqe_next) %v) %v) (let ((%v (cast (ptr <c-void>) (identity head)))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'cqe_prev) %v) %v) (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (deref (identity head)) 'cqh_last)) (cast <real> (cast (ptr <c-void>) (identity head)))) 1 0)) 0) (let ((%v (identity elm))) (set! (ref (raw-ref (deref (raw-ref (deref (identity head)) 'cqh_first)) 'field) 'cqe_prev) %v) %v) (let ((%v (identity elm))) (set! (ref (deref (identity head)) 'cqh_last) %v) %v)) (let ((%v (identity elm))) (set! (ref (deref (identity head)) 'cqh_first) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro CIRCLEQ_INSERT_TAIL (head elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (cast (ptr <c-void>) (identity head)))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'cqe_next) %v) %v) (let ((%v (raw-ref (deref (identity head)) 'cqh_last))) (set! (ref (raw-ref (deref (identity elm)) 'field) 'cqe_prev) %v) %v) (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (deref (identity head)) 'cqh_first)) (cast <real> (cast (ptr <c-void>) (identity head)))) 1 0)) 0) (let ((%v (identity elm))) (set! (ref (raw-ref (deref (raw-ref (deref (identity head)) 'cqh_last)) 'field) 'cqe_next) %v) %v) (let ((%v (identity elm))) (set! (ref (deref (identity head)) 'cqh_first) %v) %v)) (let ((%v (identity elm))) (set! (ref (deref (identity head)) 'cqh_last) %v) %v)) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cfunclike-macro CIRCLEQ_LAST (head) (scm-cast (begin (raw-ref (deref (identity head)) 'cqh_last))))
(define-cfunclike-macro CIRCLEQ_NEXT (elm field) (scm-cast (begin (raw-ref (raw-ref (deref (identity elm)) 'field) 'cqe_next))))
(define-cfunclike-macro CIRCLEQ_PREV (elm field) (scm-cast (begin (raw-ref (raw-ref (deref (identity elm)) 'field) 'cqe_prev))))
(define-cfunclike-macro CIRCLEQ_REMOVE (head elm field) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (raw-ref (deref (identity elm)) 'field) 'cqe_next)) (cast <real> (cast (ptr <c-void>) (identity head)))) 1 0)) 0) (let ((%v (raw-ref (raw-ref (deref (identity elm)) 'field) 'cqe_prev))) (set! (ref (raw-ref (deref (raw-ref (raw-ref (deref (identity elm)) 'field) 'cqe_next)) 'field) 'cqe_prev) %v) %v) (let ((%v (raw-ref (raw-ref (deref (identity elm)) 'field) 'cqe_prev))) (set! (ref (deref (identity head)) 'cqh_last) %v) %v)) (if (eq? (cast <real> (if (equal? (cast <real> (raw-ref (raw-ref (deref (identity elm)) 'field) 'cqe_prev)) (cast <real> (cast (ptr <c-void>) (identity head)))) 1 0)) 0) (let ((%v (raw-ref (raw-ref (deref (identity elm)) 'field) 'cqe_next))) (set! (ref (raw-ref (deref (raw-ref (raw-ref (deref (identity elm)) 'field) 'cqe_prev)) 'field) 'cqe_next) %v) %v) (let ((%v (raw-ref (raw-ref (deref (identity elm)) 'field) 'cqe_next))) (set! (ref (deref (identity head)) 'cqh_first) %v) %v))) (%continue))) (%continue (lambda () (if (eq? 0 0) (%break 0) (%body))))) (%body)))))))
(define-cmacro O_BINARY 0)
(define-cmacro O_TEXT 0)
(define-cfunclike-macro EXEC_ARGV_CAST (x) (scm-cast (begin x)))
(define-cmacro IS_NUMBER_IN_UV 1)
(define-cmacro IS_NUMBER_GREATER_THAN_UV_MAX 2)
(define-cmacro IS_NUMBER_NOT_INT 4)
(define-cmacro IS_NUMBER_NEG 8)
(define-cmacro IS_NUMBER_INFINITY 16)
(define-cmacro IS_NUMBER_NAN 32)
(define-cmacro PERL_SCAN_ALLOW_UNDERSCORES 1)
(define-cmacro PERL_SCAN_DISALLOW_PREFIX 2)
(define-cmacro PERL_SCAN_SILENT_ILLDIGIT 4)
(define-cmacro PERL_SCAN_GREATER_THAN_UV_MAX 2)
(define-cfunclike-macro PERL_GPROF_MONCONTROL (x) 0)
(define-cmacro NEXT_LINE_CHAR 133)
(define-cmacro UNICODE_LINE_SEPA_0 226)
(define-cmacro UNICODE_LINE_SEPA_1 128)
(define-cmacro UNICODE_LINE_SEPA_2 168)
(define-cmacro UNICODE_PARA_SEPA_0 226)
(define-cmacro UNICODE_PARA_SEPA_1 128)
(define-cmacro UNICODE_PARA_SEPA_2 169)
(define-cmacro PIPESOCK_MODE 0)
(define-cmacro SOCKET_OPEN_MODE 0)
(define-cmacro PIPE_OPEN_MODE 0)
(define-cmacro PERL_MAGIC_UTF8_CACHESIZE 2)
(define-cmacro PERL_UNICODE_STDIN_FLAG 1)
(define-cmacro PERL_UNICODE_STDOUT_FLAG 2)
(define-cmacro PERL_UNICODE_STDERR_FLAG 4)
(define-cmacro PERL_UNICODE_IN_FLAG 8)
(define-cmacro PERL_UNICODE_OUT_FLAG 16)
(define-cmacro PERL_UNICODE_ARGV_FLAG 32)
(define-cmacro PERL_UNICODE_LOCALE_FLAG 64)
(define-cmacro PERL_UNICODE_WIDESYSCALLS_FLAG 128)
(define-cmacro PERL_UNICODE_STD_FLAG 7)
(define-cmacro PERL_UNICODE_INOUT_FLAG 24)
(define-cmacro PERL_UNICODE_DEFAULT_FLAGS 95)
(define-cmacro PERL_UNICODE_ALL_FLAGS 255)
(define-cmacro PERL_UNICODE_STDIN 73)
(define-cmacro PERL_UNICODE_STDOUT 79)
(define-cmacro PERL_UNICODE_STDERR 69)
(define-cmacro PERL_UNICODE_STD 83)
(define-cmacro PERL_UNICODE_IN 105)
(define-cmacro PERL_UNICODE_OUT 111)
(define-cmacro PERL_UNICODE_INOUT 68)
(define-cmacro PERL_UNICODE_ARGV 65)
(define-cmacro PERL_UNICODE_LOCALE 76)
(define-cmacro PERL_UNICODE_WIDESYSCALLS 87)
(define-cmacro PERL_SIGNALS_UNSAFE_FLAG 1)
(define-cmacro PERL_BLOCK_SIGNALS 0)
(define-cfunclike-macro PERL_BLOCKSIG_BLOCK (set) (scm-cast (begin (sigprocmask 1 (ptr (identity set)) (cast (ptr <c-void>) 0)))))
(define-cfunclike-macro PERL_BLOCKSIG_UNBLOCK (set) (scm-cast (begin (sigprocmask 2 (ptr (identity set)) (cast (ptr <c-void>) 0)))))
(define-cfunclike-macro PERL_ABS (x) (scm-cast (begin (if (eq? (cast <real> (if (< (cast <real> (identity x)) 0) 1 0)) 0) (identity x) (if (is-a? 0 <c-ptr>) (c-ptr- 0 (cast <real> (identity x))) (- (cast <real> 0) (cast <real> (identity x))))))))
(define-cmacro PERL_REVISION 5)
(define-cmacro PERL_VERSION 8)
(define-cmacro PERL_SUBVERSION 6)
(define-cmacro PERL_API_REVISION 5)
(define-cmacro PERL_API_VERSION 8)
(define-cmacro PERL_API_SUBVERSION 0)
(define-cmacro __PATCHLEVEL_H_INCLUDED__ 0)
(define-cmacro PERL_XS_APIVERSION "5.8.3")
(define-cmacro PERL_PM_APIVERSION "5.005")

(provide "perl")

;; Local variables:
;; mode: scheme
;; end:
