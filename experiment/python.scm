;; generated by c-wrapper

(define-module python
  (use c-wrapper)
  
  (export-all)
  )

(select-module python)

(c-load-library '("/usr/lib/libpython.dylib") :option "")

(define <__int8_t> <c-char>)
(define <__uint8_t> <c-uchar>)
(define <__int16_t> <c-short>)
(define <__uint16_t> <c-ushort>)
(define <__int32_t> <c-int>)
(define <__uint32_t> <c-uint>)
(define <__int64_t> <c-longlong>)
(define <__uint64_t> <c-ulonglong>)
(define <__darwin_intptr_t> <c-long>)
(define <__darwin_natural_t> <c-uint>)
(define <__darwin_ct_rune_t> <c-int>)
(define-c-union G312)
(init-c-union! (c-union 'G312) (list (cons '__mbstate8 (make-c-array <c-char> (x->integer 128))) (cons '_mbstateL <c-longlong>)))
(define <__mbstate_t> <c-union:G312>)
(define <__darwin_mbstate_t> <__mbstate_t>)
(define <__darwin_ptrdiff_t> <c-int>)
(define <__darwin_size_t> <c-ulong>)
(define <__darwin_va_list> (ptr <c-void>))
(define <__darwin_wchar_t> <c-int>)
(define <__darwin_rune_t> <__darwin_wchar_t>)
(define <__darwin_wint_t> <c-int>)
(define <__darwin_clock_t> <c-ulong>)
(define <__darwin_socklen_t> <__uint32_t>)
(define <__darwin_ssize_t> <c-long>)
(define <__darwin_time_t> <c-long>)
(define-c-struct mcontext)
(define-c-struct mcontext64)
(define-c-struct __darwin_pthread_handler_rec)
(init-c-struct! (c-struct '__darwin_pthread_handler_rec) (list (cons '__routine (make-c-func-ptr <c-void> (list (ptr <c-void>)) (list '#f))) (cons '__arg (ptr <c-void>)) (cons '__next (ptr <c-struct:__darwin_pthread_handler_rec>))))
(define-c-struct _opaque_pthread_attr_t)
(init-c-struct! (c-struct '_opaque_pthread_attr_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> (x->integer 36)))))
(define-c-struct _opaque_pthread_cond_t)
(init-c-struct! (c-struct '_opaque_pthread_cond_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> (x->integer 24)))))
(define-c-struct _opaque_pthread_condattr_t)
(init-c-struct! (c-struct '_opaque_pthread_condattr_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> (x->integer 4)))))
(define-c-struct _opaque_pthread_mutex_t)
(init-c-struct! (c-struct '_opaque_pthread_mutex_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> (x->integer 40)))))
(define-c-struct _opaque_pthread_mutexattr_t)
(init-c-struct! (c-struct '_opaque_pthread_mutexattr_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> (x->integer 8)))))
(define-c-struct _opaque_pthread_once_t)
(init-c-struct! (c-struct '_opaque_pthread_once_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> (x->integer 4)))))
(define-c-struct _opaque_pthread_rwlock_t)
(init-c-struct! (c-struct '_opaque_pthread_rwlock_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> (x->integer 124)))))
(define-c-struct _opaque_pthread_rwlockattr_t)
(init-c-struct! (c-struct '_opaque_pthread_rwlockattr_t) (list (cons '__sig <c-long>) (cons '__opaque (make-c-array <c-char> (x->integer 12)))))
(define-c-struct _opaque_pthread_t)
(init-c-struct! (c-struct '_opaque_pthread_t) (list (cons '__sig <c-long>) (cons '__cleanup_stack (ptr <c-struct:__darwin_pthread_handler_rec>)) (cons '__opaque (make-c-array <c-char> (x->integer 596)))))
(define <__darwin_blkcnt_t> <__int64_t>)
(define <__darwin_blksize_t> <__int32_t>)
(define <__darwin_dev_t> <__int32_t>)
(define <__darwin_fsblkcnt_t> <c-uint>)
(define <__darwin_fsfilcnt_t> <c-uint>)
(define <__darwin_gid_t> <__uint32_t>)
(define <__darwin_id_t> <__uint32_t>)
(define <__darwin_ino_t> <__uint32_t>)
(define <__darwin_mach_port_name_t> <__darwin_natural_t>)
(define <__darwin_mach_port_t> <__darwin_mach_port_name_t>)
(define <__darwin_mcontext_t> (ptr <c-struct:mcontext>))
(define <__darwin_mcontext64_t> (ptr <c-struct:mcontext64>))
(define <__darwin_mode_t> <__uint16_t>)
(define <__darwin_off_t> <__int64_t>)
(define <__darwin_pid_t> <__int32_t>)
(define <__darwin_pthread_attr_t> <c-struct:_opaque_pthread_attr_t>)
(define <__darwin_pthread_cond_t> <c-struct:_opaque_pthread_cond_t>)
(define <__darwin_pthread_condattr_t> <c-struct:_opaque_pthread_condattr_t>)
(define <__darwin_pthread_key_t> <c-ulong>)
(define <__darwin_pthread_mutex_t> <c-struct:_opaque_pthread_mutex_t>)
(define <__darwin_pthread_mutexattr_t> <c-struct:_opaque_pthread_mutexattr_t>)
(define <__darwin_pthread_once_t> <c-struct:_opaque_pthread_once_t>)
(define <__darwin_pthread_rwlock_t> <c-struct:_opaque_pthread_rwlock_t>)
(define <__darwin_pthread_rwlockattr_t> <c-struct:_opaque_pthread_rwlockattr_t>)
(define <__darwin_pthread_t> (ptr <c-struct:_opaque_pthread_t>))
(define <__darwin_sigset_t> <__uint32_t>)
(define <__darwin_suseconds_t> <__int32_t>)
(define <__darwin_uid_t> <__uint32_t>)
(define <__darwin_useconds_t> <__uint32_t>)
(define <__darwin_uuid_t> (make-c-array <c-uchar> (x->integer 16)))
(define-c-struct sigaltstack)
(init-c-struct! (c-struct 'sigaltstack) (list (cons 'ss_sp (ptr <c-void>)) (cons 'ss_size <__darwin_size_t>) (cons 'ss_flags <c-int>)))
(define <__darwin_stack_t> <c-struct:sigaltstack>)
(define-c-struct ucontext)
(init-c-struct! (c-struct 'ucontext) (list (cons 'uc_onstack <c-int>) (cons 'uc_sigmask <__darwin_sigset_t>) (cons 'uc_stack <__darwin_stack_t>) (cons 'uc_link (ptr <c-struct:ucontext>)) (cons 'uc_mcsize <__darwin_size_t>) (cons 'uc_mcontext <__darwin_mcontext_t>)))
(define <__darwin_ucontext_t> <c-struct:ucontext>)
(define-c-struct ucontext64)
(init-c-struct! (c-struct 'ucontext64) (list (cons 'uc_onstack <c-int>) (cons 'uc_sigmask <__darwin_sigset_t>) (cons 'uc_stack <__darwin_stack_t>) (cons 'uc_link (ptr <c-struct:ucontext64>)) (cons 'uc_mcsize <__darwin_size_t>) (cons 'uc_mcontext64 <__darwin_mcontext64_t>)))
(define <__darwin_ucontext64_t> <c-struct:ucontext64>)
(define <__darwin_nl_item> <c-int>)
(define <__darwin_wctrans_t> <c-int>)
(define <__darwin_wctype_t> <c-ulong>)
(define <va_list> <__darwin_va_list>)
(define <size_t> <__darwin_size_t>)
(define <fpos_t> <__darwin_off_t>)
(define-c-struct __sbuf)
(init-c-struct! (c-struct '__sbuf) (list (cons '_base (ptr <c-uchar>)) (cons '_size <c-int>)))
(define-c-struct __sFILEX)
(define-c-struct __sFILE)
(init-c-struct! (c-struct '__sFILE) (list (cons '_p (ptr <c-uchar>)) (cons '_r <c-int>) (cons '_w <c-int>) (cons '_flags <c-short>) (cons '_file <c-short>) (cons '_bf <c-struct:__sbuf>) (cons '_lbfsize <c-int>) (cons '_cookie (ptr <c-void>)) (cons '_close (make-c-func-ptr <c-int> (list (ptr <c-void>)) (list '#f))) (cons '_read (make-c-func-ptr <c-int> (list (ptr <c-void>) (ptr <c-char>) <c-int>) (list '#f '#f '#f))) (cons '_seek (make-c-func-ptr <fpos_t> (list (ptr <c-void>) <fpos_t> <c-int>) (list '#f '#f '#f))) (cons '_write (make-c-func-ptr <c-int> (list (ptr <c-void>) (ptr <c-char>) <c-int>) (list '#f '#f '#f))) (cons '_ub <c-struct:__sbuf>) (cons '_extra (ptr <c-struct:__sFILEX>)) (cons '_ur <c-int>) (cons '_ubuf (make-c-array <c-uchar> (x->integer 3))) (cons '_nbuf (make-c-array <c-uchar> (x->integer 1))) (cons '_lb <c-struct:__sbuf>) (cons '_blksize <c-int>) (cons '_offset <fpos_t>)))
(define <FILE> <c-struct:__sFILE>)
(define __sF (deref (cast (ptr (make-c-array <FILE> #f)) (c-lookup-symbol '__sF))))
(define clearerr (make-c-func 'clearerr <c-void> (list (ptr <FILE>))))
(define fclose (make-c-func 'fclose <c-int> (list (ptr <FILE>))))
(define feof (make-c-func 'feof <c-int> (list (ptr <FILE>))))
(define ferror (make-c-func 'ferror <c-int> (list (ptr <FILE>))))
(define fflush (make-c-func 'fflush <c-int> (list (ptr <FILE>))))
(define fgetc (make-c-func 'fgetc <c-int> (list (ptr <FILE>))))
(define fgetpos (make-c-func 'fgetpos <c-int> (list (ptr <FILE>) (ptr <fpos_t>))))
(define fgets (make-c-func 'fgets (ptr <c-char>) (list (ptr <c-char>) <c-int> (ptr <FILE>))))
(define fopen (make-c-func 'fopen (ptr <FILE>) (list (ptr <c-char>) (ptr <c-char>))))
(define fprintf (make-c-func-vaargs 'fprintf <c-int> (list (ptr <FILE>) (ptr <c-char>))))
(define fputc (make-c-func 'fputc <c-int> (list <c-int> (ptr <FILE>))))
(define fputs (make-c-func 'fputs <c-int> (list (ptr <c-char>) (ptr <FILE>))))
(define fread (make-c-func 'fread <size_t> (list (ptr <c-void>) <size_t> <size_t> (ptr <FILE>))))
(define freopen (make-c-func 'freopen (ptr <FILE>) (list (ptr <c-char>) (ptr <c-char>) (ptr <FILE>))))
(define fscanf (make-c-func-vaargs 'fscanf <c-int> (list (ptr <FILE>) (ptr <c-char>))))
(define fseek (make-c-func 'fseek <c-int> (list (ptr <FILE>) <c-long> <c-int>)))
(define fsetpos (make-c-func 'fsetpos <c-int> (list (ptr <FILE>) (ptr <fpos_t>))))
(define ftell (make-c-func 'ftell <c-long> (list (ptr <FILE>))))
(define fwrite (make-c-func 'fwrite <size_t> (list (ptr <c-void>) <size_t> <size_t> (ptr <FILE>))))
(define getc (make-c-func 'getc <c-int> (list (ptr <FILE>))))
(define getchar (make-c-func 'getchar <c-int> (list)))
(define gets (make-c-func 'gets (ptr <c-char>) (list (ptr <c-char>))))
(define sys_nerr (deref (cast (ptr <c-int>) (c-lookup-symbol 'sys_nerr))))
(define sys_errlist (deref (cast (ptr (make-c-array (ptr <c-char>) #f)) (c-lookup-symbol 'sys_errlist))))
(define perror (make-c-func 'perror <c-void> (list (ptr <c-char>))))
(define printf (make-c-func-vaargs 'printf <c-int> (list (ptr <c-char>))))
(define putc (make-c-func 'putc <c-int> (list <c-int> (ptr <FILE>))))
(define putchar (make-c-func 'putchar <c-int> (list <c-int>)))
(define puts (make-c-func 'puts <c-int> (list (ptr <c-char>))))
(define remove (make-c-func 'remove <c-int> (list (ptr <c-char>))))
(define rename (make-c-func 'rename <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define rewind (make-c-func 'rewind <c-void> (list (ptr <FILE>))))
(define scanf (make-c-func-vaargs 'scanf <c-int> (list (ptr <c-char>))))
(define setbuf (make-c-func 'setbuf <c-void> (list (ptr <FILE>) (ptr <c-char>))))
(define setvbuf (make-c-func 'setvbuf <c-int> (list (ptr <FILE>) (ptr <c-char>) <c-int> <size_t>)))
(define sprintf (make-c-func-vaargs 'sprintf <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define sscanf (make-c-func-vaargs 'sscanf <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define tmpfile (make-c-func 'tmpfile (ptr <FILE>) (list)))
(define tmpnam (make-c-func 'tmpnam (ptr <c-char>) (list (ptr <c-char>))))
(define ungetc (make-c-func 'ungetc <c-int> (list <c-int> (ptr <FILE>))))
(define vfprintf (make-c-func 'vfprintf <c-int> (list (ptr <FILE>) (ptr <c-char>) <va_list>)))
(define vprintf (make-c-func 'vprintf <c-int> (list (ptr <c-char>) <va_list>)))
(define vsprintf (make-c-func 'vsprintf <c-int> (list (ptr <c-char>) (ptr <c-char>) <va_list>)))
(define asprintf (make-c-func-vaargs 'asprintf <c-int> (list (ptr (ptr <c-char>)) (ptr <c-char>))))
(define vasprintf (make-c-func 'vasprintf <c-int> (list (ptr (ptr <c-char>)) (ptr <c-char>) <va_list>)))
(define ctermid (make-c-func 'ctermid (ptr <c-char>) (list (ptr <c-char>))))
(define ctermid_r (make-c-func 'ctermid_r (ptr <c-char>) (list (ptr <c-char>))))
(define fdopen (make-c-func 'fdopen (ptr <FILE>) (list <c-int> (ptr <c-char>))))
(define fgetln (make-c-func 'fgetln (ptr <c-char>) (list (ptr <FILE>) (ptr <size_t>))))
(define fileno (make-c-func 'fileno <c-int> (list (ptr <FILE>))))
(define flockfile (make-c-func 'flockfile <c-void> (list (ptr <FILE>))))
(define fmtcheck (make-c-func 'fmtcheck (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define fpurge (make-c-func 'fpurge <c-int> (list (ptr <FILE>))))
(define fseeko (make-c-func 'fseeko <c-int> (list (ptr <FILE>) <fpos_t> <c-int>)))
(define ftello (make-c-func 'ftello <fpos_t> (list (ptr <FILE>))))
(define ftrylockfile (make-c-func 'ftrylockfile <c-int> (list (ptr <FILE>))))
(define funlockfile (make-c-func 'funlockfile <c-void> (list (ptr <FILE>))))
(define getc_unlocked (make-c-func 'getc_unlocked <c-int> (list (ptr <FILE>))))
(define getchar_unlocked (make-c-func 'getchar_unlocked <c-int> (list)))
(define getw (make-c-func 'getw <c-int> (list (ptr <FILE>))))
(define pclose (make-c-func 'pclose <c-int> (list (ptr <FILE>))))
(define popen (make-c-func 'popen (ptr <FILE>) (list (ptr <c-char>) (ptr <c-char>))))
(define putc_unlocked (make-c-func 'putc_unlocked <c-int> (list <c-int> (ptr <FILE>))))
(define putchar_unlocked (make-c-func 'putchar_unlocked <c-int> (list <c-int>)))
(define putw (make-c-func 'putw <c-int> (list <c-int> (ptr <FILE>))))
(define setbuffer (make-c-func 'setbuffer <c-void> (list (ptr <FILE>) (ptr <c-char>) <c-int>)))
(define setlinebuf (make-c-func 'setlinebuf <c-int> (list (ptr <FILE>))))
(define snprintf (make-c-func-vaargs 'snprintf <c-int> (list (ptr <c-char>) <size_t> (ptr <c-char>))))
(define tempnam (make-c-func 'tempnam (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define vfscanf (make-c-func 'vfscanf <c-int> (list (ptr <FILE>) (ptr <c-char>) <va_list>)))
(define vscanf (make-c-func 'vscanf <c-int> (list (ptr <c-char>) <va_list>)))
(define vsnprintf (make-c-func 'vsnprintf <c-int> (list (ptr <c-char>) <size_t> (ptr <c-char>) <va_list>)))
(define vsscanf (make-c-func 'vsscanf <c-int> (list (ptr <c-char>) (ptr <c-char>) <va_list>)))
(define funopen (make-c-func 'funopen (ptr <FILE>) (list (ptr <c-void>) (make-c-func-ptr <c-int> (list (ptr <c-void>) (ptr <c-char>) <c-int>) (list '#f '#f '#f)) (make-c-func-ptr <c-int> (list (ptr <c-void>) (ptr <c-char>) <c-int>) (list '#f '#f '#f)) (make-c-func-ptr <fpos_t> (list (ptr <c-void>) <fpos_t> <c-int>) (list '#f '#f '#f)) (make-c-func-ptr <c-int> (list (ptr <c-void>)) (list '#f)))))
(define __srget (make-c-func '__srget <c-int> (list (ptr <FILE>))))
(define __svfscanf (make-c-func '__svfscanf <c-int> (list (ptr <FILE>) (ptr <c-char>) <va_list>)))
(define __swbuf (make-c-func '__swbuf <c-int> (list <c-int> (ptr <FILE>))))
(define (__sputc . %args) (scm-cast (cast <c-int> (let ((_c (cast <c-int> (list-ref %args 0))) (_p (cast (ptr <FILE>) (list-ref %args 1)))) (call/cc (lambda (%return) (begin (c-if (cast <real> (c-or (cast <real> (c->= (cast <real> (pre-- (raw-ref (deref _p) '_w))) (cast <real> 0))) (c-and (cast <real> (c->= (cast <real> (raw-ref (deref _p) '_w)) (cast <real> (raw-ref (deref _p) '_lbfsize)))) (c-!= (cast <real> (cast <c-char> _c)) (cast <real> 10))))) (%return (let ((%v _c)) (set! (deref (post++ (raw-ref (deref _p) '_p))) %v) %v)) (%return (__swbuf _c _p))))))))))
(define <ssize_t> <__darwin_ssize_t>)
(define memchr (make-c-func 'memchr (ptr <c-void>) (list (ptr <c-void>) <c-int> <size_t>)))
(define memcmp (make-c-func 'memcmp <c-int> (list (ptr <c-void>) (ptr <c-void>) <size_t>)))
(define memcpy (make-c-func 'memcpy (ptr <c-void>) (list (ptr <c-void>) (ptr <c-void>) <size_t>)))
(define memmove (make-c-func 'memmove (ptr <c-void>) (list (ptr <c-void>) (ptr <c-void>) <size_t>)))
(define memset (make-c-func 'memset (ptr <c-void>) (list (ptr <c-void>) <c-int> <size_t>)))
(define stpcpy (make-c-func 'stpcpy (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define strcasestr (make-c-func 'strcasestr (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define strcat (make-c-func 'strcat (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define strchr (make-c-func 'strchr (ptr <c-char>) (list (ptr <c-char>) <c-int>)))
(define strcmp (make-c-func 'strcmp <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define strcoll (make-c-func 'strcoll <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define strcpy (make-c-func 'strcpy (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define strcspn (make-c-func 'strcspn <size_t> (list (ptr <c-char>) (ptr <c-char>))))
(define strerror (make-c-func 'strerror (ptr <c-char>) (list <c-int>)))
(define strerror_r (make-c-func 'strerror_r <c-int> (list <c-int> (ptr <c-char>) <size_t>)))
(define strlen (make-c-func 'strlen <size_t> (list (ptr <c-char>))))
(define strncat (make-c-func 'strncat (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define strncmp (make-c-func 'strncmp <c-int> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define strncpy (make-c-func 'strncpy (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define strnstr (make-c-func 'strnstr (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define strpbrk (make-c-func 'strpbrk (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define strrchr (make-c-func 'strrchr (ptr <c-char>) (list (ptr <c-char>) <c-int>)))
(define strspn (make-c-func 'strspn <size_t> (list (ptr <c-char>) (ptr <c-char>))))
(define strstr (make-c-func 'strstr (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define strtok (make-c-func 'strtok (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define strxfrm (make-c-func 'strxfrm <size_t> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define memccpy (make-c-func 'memccpy (ptr <c-void>) (list (ptr <c-void>) (ptr <c-void>) <c-int> <size_t>)))
(define strtok_r (make-c-func 'strtok_r (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) (ptr (ptr <c-char>)))))
(define strdup (make-c-func 'strdup (ptr <c-char>) (list (ptr <c-char>))))
(define bcmp (make-c-func 'bcmp <c-int> (list (ptr <c-void>) (ptr <c-void>) <size_t>)))
(define bcopy (make-c-func 'bcopy <c-void> (list (ptr <c-void>) (ptr <c-void>) <size_t>)))
(define bzero (make-c-func 'bzero <c-void> (list (ptr <c-void>) <size_t>)))
(define ffs (make-c-func 'ffs <c-int> (list <c-int>)))
(define index (make-c-func 'index (ptr <c-char>) (list (ptr <c-char>) <c-int>)))
(define rindex (make-c-func 'rindex (ptr <c-char>) (list (ptr <c-char>) <c-int>)))
(define strcasecmp (make-c-func 'strcasecmp <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define strlcat (make-c-func 'strlcat <size_t> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define strlcpy (make-c-func 'strlcpy <size_t> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define strmode (make-c-func 'strmode <c-void> (list <c-int> (ptr <c-char>))))
(define strncasecmp (make-c-func 'strncasecmp <c-int> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define strsep (make-c-func 'strsep (ptr <c-char>) (list (ptr (ptr <c-char>)) (ptr <c-char>))))
(define strsignal (make-c-func 'strsignal (ptr <c-char>) (list <c-int>)))
(define swab (make-c-func 'swab <c-void> (list (ptr <c-void>) (ptr <c-void>) <ssize_t>)))
(define __error (make-c-func '__error (ptr <c-int>) (list)))
(define P_ALL 0)
(define P_PID 1)
(define P_PGID 2)
(define <idtype_t> <c-int>)
(define <pid_t> <__darwin_pid_t>)
(define <id_t> <__darwin_id_t>)
(define <sig_atomic_t> <c-int>)
(define REGS_SAVED_NONE 0)
(define REGS_SAVED_CALLER 1)
(define REGS_SAVED_ALL 2)
(define <regs_saved_t> <c-int>)
(define-c-struct sigcontext32)
(init-c-struct! (c-struct 'sigcontext32) (list (cons 'sc_onstack <c-int>) (cons 'sc_mask <c-int>) (cons 'sc_ir <c-int>) (cons 'sc_psw <c-int>) (cons 'sc_sp <c-int>) (cons 'sc_regs (ptr <c-void>))))
(define-c-struct sigcontext64)
(init-c-struct! (c-struct 'sigcontext64) (list (cons 'sc_onstack <c-int>) (cons 'sc_mask <c-int>) (cons 'sc_ir <c-longlong>) (cons 'sc_psw <c-longlong>) (cons 'sc_sp <c-longlong>) (cons 'sc_regs (ptr <c-void>))))
(define-c-struct sigcontext)
(init-c-struct! (c-struct 'sigcontext) (list (cons 'sc_onstack <c-int>) (cons 'sc_mask <c-int>) (cons 'sc_ir <c-int>) (cons 'sc_psw <c-int>) (cons 'sc_sp <c-int>) (cons 'sc_regs (ptr <c-void>))))
(define <mcontext_t> <__darwin_mcontext_t>)
(define <mcontext64_t> <__darwin_mcontext64_t>)
(define <pthread_attr_t> <__darwin_pthread_attr_t>)
(define <sigset_t> <__darwin_sigset_t>)
(define <ucontext_t> <__darwin_ucontext_t>)
(define <ucontext64_t> <__darwin_ucontext64_t>)
(define <uid_t> <__darwin_uid_t>)
(define-c-union sigval)
(init-c-union! (c-union 'sigval) (list (cons 'sival_int <c-int>) (cons 'sival_ptr (ptr <c-void>))))
(define-c-struct sigevent)
(init-c-struct! (c-struct 'sigevent) (list (cons 'sigev_notify <c-int>) (cons 'sigev_signo <c-int>) (cons 'sigev_value <c-union:sigval>) (cons 'sigev_notify_function (make-c-func-ptr <c-void> (list <c-union:sigval>) (list '#f))) (cons 'sigev_notify_attributes (ptr <pthread_attr_t>))))
(define-c-struct __siginfo)
(init-c-struct! (c-struct '__siginfo) (list (cons 'si_signo <c-int>) (cons 'si_errno <c-int>) (cons 'si_code <c-int>) (cons 'si_pid <pid_t>) (cons 'si_uid <uid_t>) (cons 'si_status <c-int>) (cons 'si_addr (ptr <c-void>)) (cons 'si_value <c-union:sigval>) (cons 'si_band <c-long>) (cons 'pad (make-c-array <c-ulong> (x->integer 7)))))
(define <siginfo_t> <c-struct:__siginfo>)
(define-c-union __sigaction_u)
(init-c-union! (c-union '__sigaction_u) (list (cons '__sa_handler (make-c-func-ptr <c-void> (list <c-int>) (list '#f))) (cons '__sa_sigaction (make-c-func-ptr <c-void> (list <c-int> (ptr <c-struct:__siginfo>) (ptr <c-void>)) (list '#f '#f '#f)))))
(define-c-struct __sigaction)
(init-c-struct! (c-struct '__sigaction) (list (cons '__sigaction_u <c-union:__sigaction_u>) (cons 'sa_tramp (make-c-func-ptr <c-void> (list (ptr <c-void>) <c-int> <c-int> (ptr <siginfo_t>) (ptr <c-void>)) (list '#f '#f '#f '#f '#f))) (cons 'sa_mask <sigset_t>) (cons 'sa_flags <c-int>)))
(define-c-struct sigaction)
(init-c-struct! (c-struct 'sigaction) (list (cons '__sigaction_u <c-union:__sigaction_u>) (cons 'sa_mask <sigset_t>) (cons 'sa_flags <c-int>)))
(define <sig_t> (make-c-func-ptr <c-void> (list <c-int>) (list '#f)))
(define <stack_t> <__darwin_stack_t>)
(define-c-struct sigvec)
(init-c-struct! (c-struct 'sigvec) (list (cons 'sv_handler (make-c-func-ptr <c-void> (list <c-int>) (list '#f))) (cons 'sv_mask <c-int>) (cons 'sv_flags <c-int>)))
(define-c-struct sigstack)
(init-c-struct! (c-struct 'sigstack) (list (cons 'ss_sp (ptr <c-char>)) (cons 'ss_onstack <c-int>)))
(define signal (make-c-func 'signal (make-c-func-ptr <c-void> (list <c-int>) (list '#f)) (list <c-int> (make-c-func-ptr <c-void> (list <c-int>) (list '#f)))))
(define-c-struct timeval)
(init-c-struct! (c-struct 'timeval) (list (cons 'tv_sec <__darwin_time_t>) (cons 'tv_usec <__darwin_suseconds_t>)))
(define <rlim_t> <__int64_t>)
(define-c-struct rusage)
(init-c-struct! (c-struct 'rusage) (list (cons 'ru_utime <c-struct:timeval>) (cons 'ru_stime <c-struct:timeval>) (cons 'ru_maxrss <c-long>) (cons 'ru_ixrss <c-long>) (cons 'ru_idrss <c-long>) (cons 'ru_isrss <c-long>) (cons 'ru_minflt <c-long>) (cons 'ru_majflt <c-long>) (cons 'ru_nswap <c-long>) (cons 'ru_inblock <c-long>) (cons 'ru_oublock <c-long>) (cons 'ru_msgsnd <c-long>) (cons 'ru_msgrcv <c-long>) (cons 'ru_nsignals <c-long>) (cons 'ru_nvcsw <c-long>) (cons 'ru_nivcsw <c-long>)))
(define-c-struct rlimit)
(init-c-struct! (c-struct 'rlimit) (list (cons 'rlim_cur <rlim_t>) (cons 'rlim_max <rlim_t>)))
(define getpriority (make-c-func 'getpriority <c-int> (list <c-int> <id_t>)))
(define getrlimit (make-c-func 'getrlimit <c-int> (list <c-int> (ptr <c-struct:rlimit>))))
(define getrusage (make-c-func 'getrusage <c-int> (list <c-int> (ptr <c-struct:rusage>))))
(define setpriority (make-c-func 'setpriority <c-int> (list <c-int> <id_t> <c-int>)))
(define setrlimit (make-c-func 'setrlimit <c-int> (list <c-int> (ptr <c-struct:rlimit>))))
(define <int8_t> <c-char>)
(define <int16_t> <c-short>)
(define <int32_t> <c-int>)
(define <int64_t> <c-longlong>)
(define <uint8_t> <c-uchar>)
(define <uint16_t> <c-ushort>)
(define <uint32_t> <c-uint>)
(define <uint64_t> <c-ulonglong>)
(define <int_least8_t> <int8_t>)
(define <int_least16_t> <int16_t>)
(define <int_least32_t> <int32_t>)
(define <int_least64_t> <int64_t>)
(define <uint_least8_t> <uint8_t>)
(define <uint_least16_t> <uint16_t>)
(define <uint_least32_t> <uint32_t>)
(define <uint_least64_t> <uint64_t>)
(define <int_fast8_t> <int8_t>)
(define <int_fast16_t> <int16_t>)
(define <int_fast32_t> <int32_t>)
(define <int_fast64_t> <int64_t>)
(define <uint_fast8_t> <uint8_t>)
(define <uint_fast16_t> <uint16_t>)
(define <uint_fast32_t> <uint32_t>)
(define <uint_fast64_t> <uint64_t>)
(define <intptr_t> <c-long>)
(define <uintptr_t> <c-ulong>)
(define <intmax_t> <c-longlong>)
(define <uintmax_t> <c-ulonglong>)
(define OSUnknownByteOrder 0)
(define OSLittleEndian 1)
(define OSBigEndian 2)
(define (OSHostByteOrder . %args) (scm-cast (cast <int32_t> (let () (call/cc (lambda (%return) (begin (%return OSBigEndian))))))))
(define (_OSReadInt16 . %args) (scm-cast (cast <uint16_t> (let ((base (cast (ptr <c-void>) (list-ref %args 0))) (byteOffset (cast <uintptr_t> (list-ref %args 1)))) (call/cc (lambda (%return) (begin (%return (deref (cast (ptr <uint16_t>) (c-+ (cast <uintptr_t> base) (cast <real> byteOffset))))))))))))
(define (_OSReadInt32 . %args) (scm-cast (cast <uint32_t> (let ((base (cast (ptr <c-void>) (list-ref %args 0))) (byteOffset (cast <uintptr_t> (list-ref %args 1)))) (call/cc (lambda (%return) (begin (%return (deref (cast (ptr <uint32_t>) (c-+ (cast <uintptr_t> base) (cast <real> byteOffset))))))))))))
(define (_OSReadInt64 . %args) (scm-cast (cast <uint64_t> (let ((base (cast (ptr <c-void>) (list-ref %args 0))) (byteOffset (cast <uintptr_t> (list-ref %args 1)))) (call/cc (lambda (%return) (begin (%return (deref (cast (ptr <uint64_t>) (c-+ (cast <uintptr_t> base) (cast <real> byteOffset))))))))))))
(define (_OSWriteInt16 . %args) (scm-cast (cast <c-void> (let ((base (cast (ptr <c-void>) (list-ref %args 0))) (byteOffset (cast <uintptr_t> (list-ref %args 1))) (data (cast <uint16_t> (list-ref %args 2)))) (call/cc (lambda (%return) (begin (let ((%v data)) (set! (deref (cast (ptr <uint16_t>) (c-+ (cast <uintptr_t> base) (cast <real> byteOffset)))) %v) %v))))))))
(define (_OSWriteInt32 . %args) (scm-cast (cast <c-void> (let ((base (cast (ptr <c-void>) (list-ref %args 0))) (byteOffset (cast <uintptr_t> (list-ref %args 1))) (data (cast <uint32_t> (list-ref %args 2)))) (call/cc (lambda (%return) (begin (let ((%v data)) (set! (deref (cast (ptr <uint32_t>) (c-+ (cast <uintptr_t> base) (cast <real> byteOffset)))) %v) %v))))))))
(define (_OSWriteInt64 . %args) (scm-cast (cast <c-void> (let ((base (cast (ptr <c-void>) (list-ref %args 0))) (byteOffset (cast <uintptr_t> (list-ref %args 1))) (data (cast <uint64_t> (list-ref %args 2)))) (call/cc (lambda (%return) (begin (let ((%v data)) (set! (deref (cast (ptr <uint64_t>) (c-+ (cast <uintptr_t> base) (cast <real> byteOffset)))) %v) %v))))))))
(define ntohs (make-c-func 'ntohs <uint16_t> (list <uint16_t>)))
(define htons (make-c-func 'htons <uint16_t> (list <uint16_t>)))
(define ntohl (make-c-func 'ntohl <uint32_t> (list <uint32_t>)))
(define htonl (make-c-func 'htonl <uint32_t> (list <uint32_t>)))
(define-c-union wait)
(define-c-struct G314)
(init-c-struct! (c-struct 'G314) (list (cons 'w_Filler (make-bit-field <c-uint> 16)) (cons 'w_Retcode (make-bit-field <c-uint> 8)) (cons 'w_Coredump (make-bit-field <c-uint> 1)) (cons 'w_Termsig (make-bit-field <c-uint> 7))))
(define-c-struct G315)
(init-c-struct! (c-struct 'G315) (list (cons 'w_Filler (make-bit-field <c-uint> 16)) (cons 'w_Stopsig (make-bit-field <c-uint> 8)) (cons 'w_Stopval (make-bit-field <c-uint> 8))))
(init-c-union! (c-union 'wait) (list (cons 'w_status <c-int>) (cons 'w_T <c-struct:G314>) (cons 'w_S <c-struct:G315>)))
(define wait (make-c-func 'wait <pid_t> (list (ptr <c-int>))))
(define waitpid (make-c-func 'waitpid <pid_t> (list <pid_t> (ptr <c-int>) <c-int>)))
(define wait3 (make-c-func 'wait3 <pid_t> (list (ptr <c-int>) <c-int> (ptr <c-struct:rusage>))))
(define wait4 (make-c-func 'wait4 <pid_t> (list <pid_t> (ptr <c-int>) <c-int> (ptr <c-struct:rusage>))))
(define <ct_rune_t> <__darwin_ct_rune_t>)
(define <rune_t> <__darwin_rune_t>)
(define <wchar_t> <__darwin_wchar_t>)
(define-c-struct G316)
(init-c-struct! (c-struct 'G316) (list (cons 'quot <c-int>) (cons 'rem <c-int>)))
(define <div_t> <c-struct:G316>)
(define-c-struct G317)
(init-c-struct! (c-struct 'G317) (list (cons 'quot <c-long>) (cons 'rem <c-long>)))
(define <ldiv_t> <c-struct:G317>)
(define-c-struct G318)
(init-c-struct! (c-struct 'G318) (list (cons 'quot <c-longlong>) (cons 'rem <c-longlong>)))
(define <lldiv_t> <c-struct:G318>)
(define __mb_cur_max (deref (cast (ptr <c-int>) (c-lookup-symbol '__mb_cur_max))))
(define abort (make-c-func 'abort <c-void> (list)))
(define abs (make-c-func 'abs <c-int> (list <c-int>)))
(define atexit (make-c-func 'atexit <c-int> (list (make-c-func-ptr <c-void> (list) (list)))))
(define atof (make-c-func 'atof <c-double> (list (ptr <c-char>))))
(define atoi (make-c-func 'atoi <c-int> (list (ptr <c-char>))))
(define atol (make-c-func 'atol <c-long> (list (ptr <c-char>))))
(define atoll (make-c-func 'atoll <c-longlong> (list (ptr <c-char>))))
(define bsearch (make-c-func 'bsearch (ptr <c-void>) (list (ptr <c-void>) (ptr <c-void>) <size_t> <size_t> (make-c-func-ptr <c-int> (list (ptr <c-void>) (ptr <c-void>)) (list '#f '#f)))))
(define calloc (make-c-func 'calloc (ptr <c-void>) (list <size_t> <size_t>)))
(define div (make-c-func 'div <div_t> (list <c-int> <c-int>)))
(define exit (make-c-func 'exit <c-void> (list <c-int>)))
(define free (make-c-func 'free <c-void> (list (ptr <c-void>))))
(define getenv (make-c-func 'getenv (ptr <c-char>) (list (ptr <c-char>))))
(define labs (make-c-func 'labs <c-long> (list <c-long>)))
(define ldiv (make-c-func 'ldiv <ldiv_t> (list <c-long> <c-long>)))
(define llabs (make-c-func 'llabs <c-longlong> (list <c-longlong>)))
(define lldiv (make-c-func 'lldiv <lldiv_t> (list <c-longlong> <c-longlong>)))
(define malloc (make-c-func 'malloc (ptr <c-void>) (list <size_t>)))
(define mblen (make-c-func 'mblen <c-int> (list (ptr <c-char>) <size_t>)))
(define mbstowcs (make-c-func 'mbstowcs <size_t> (list (ptr <wchar_t>) (ptr <c-char>) <size_t>)))
(define mbtowc (make-c-func 'mbtowc <c-int> (list (ptr <wchar_t>) (ptr <c-char>) <size_t>)))
(define qsort (make-c-func 'qsort <c-void> (list (ptr <c-void>) <size_t> <size_t> (make-c-func-ptr <c-int> (list (ptr <c-void>) (ptr <c-void>)) (list '#f '#f)))))
(define rand (make-c-func 'rand <c-int> (list)))
(define realloc (make-c-func 'realloc (ptr <c-void>) (list (ptr <c-void>) <size_t>)))
(define srand (make-c-func 'srand <c-void> (list <c-uint>)))
(define strtod (make-c-func 'strtod <c-double> (list (ptr <c-char>) (ptr (ptr <c-char>)))))
(define strtof (make-c-func 'strtof <c-float> (list (ptr <c-char>) (ptr (ptr <c-char>)))))
(define strtol (make-c-func 'strtol <c-long> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define strtold (make-c-func 'strtold <c-longdouble> (list (ptr <c-char>) (ptr (ptr <c-char>)))))
(define strtoll (make-c-func 'strtoll <c-longlong> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define strtoul (make-c-func 'strtoul <c-ulong> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define strtoull (make-c-func 'strtoull <c-ulonglong> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define system (make-c-func 'system <c-int> (list (ptr <c-char>))))
(define wcstombs (make-c-func 'wcstombs <size_t> (list (ptr <c-char>) (ptr <wchar_t>) <size_t>)))
(define wctomb (make-c-func 'wctomb <c-int> (list (ptr <c-char>) <wchar_t>)))
(define _Exit (make-c-func '_Exit <c-void> (list <c-int>)))
(define a64l (make-c-func 'a64l <c-long> (list (ptr <c-char>))))
(define drand48 (make-c-func 'drand48 <c-double> (list)))
(define ecvt (make-c-func 'ecvt (ptr <c-char>) (list <c-double> <c-int> (ptr <c-int>) (ptr <c-int>))))
(define erand48 (make-c-func 'erand48 <c-double> (list (make-c-array <c-ushort> (x->integer 3)))))
(define fcvt (make-c-func 'fcvt (ptr <c-char>) (list <c-double> <c-int> (ptr <c-int>) (ptr <c-int>))))
(define gcvt (make-c-func 'gcvt (ptr <c-char>) (list <c-double> <c-int> (ptr <c-char>))))
(define getsubopt (make-c-func 'getsubopt <c-int> (list (ptr (ptr <c-char>)) (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define grantpt (make-c-func 'grantpt <c-int> (list <c-int>)))
(define initstate (make-c-func 'initstate (ptr <c-char>) (list <c-ulong> (ptr <c-char>) <c-long>)))
(define jrand48 (make-c-func 'jrand48 <c-long> (list (make-c-array <c-ushort> (x->integer 3)))))
(define l64a (make-c-func 'l64a (ptr <c-char>) (list <c-long>)))
(define lcong48 (make-c-func 'lcong48 <c-void> (list (make-c-array <c-ushort> (x->integer 7)))))
(define lrand48 (make-c-func 'lrand48 <c-long> (list)))
(define mktemp (make-c-func 'mktemp (ptr <c-char>) (list (ptr <c-char>))))
(define mkstemp (make-c-func 'mkstemp <c-int> (list (ptr <c-char>))))
(define mrand48 (make-c-func 'mrand48 <c-long> (list)))
(define nrand48 (make-c-func 'nrand48 <c-long> (list (make-c-array <c-ushort> (x->integer 3)))))
(define posix_openpt (make-c-func 'posix_openpt <c-int> (list <c-int>)))
(define ptsname (make-c-func 'ptsname (ptr <c-char>) (list <c-int>)))
(define putenv (make-c-func 'putenv <c-int> (list (ptr <c-char>))))
(define random (make-c-func 'random <c-long> (list)))
(define realpath (make-c-func 'realpath (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define seed48 (make-c-func 'seed48 (ptr <c-ushort>) (list (make-c-array <c-ushort> (x->integer 3)))))
(define setenv (make-c-func 'setenv <c-int> (list (ptr <c-char>) (ptr <c-char>) <c-int>)))
(define setkey (make-c-func 'setkey <c-int> (list (ptr <c-char>))))
(define setstate (make-c-func 'setstate (ptr <c-char>) (list (ptr <c-char>))))
(define srand48 (make-c-func 'srand48 <c-void> (list <c-long>)))
(define srandom (make-c-func 'srandom <c-void> (list <c-ulong>)))
(define unlockpt (make-c-func 'unlockpt <c-int> (list <c-int>)))
(define unsetenv (make-c-func 'unsetenv <c-void> (list (ptr <c-char>))))
(define <u_int8_t> <c-uchar>)
(define <u_int16_t> <c-ushort>)
(define <u_int32_t> <c-uint>)
(define <u_int64_t> <c-ulonglong>)
(define <register_t> <int32_t>)
(define <user_addr_t> <u_int64_t>)
(define <user_size_t> <u_int64_t>)
(define <user_ssize_t> <int64_t>)
(define <user_long_t> <int64_t>)
(define <user_ulong_t> <u_int64_t>)
(define <user_time_t> <int64_t>)
(define <syscall_arg_t> <u_int64_t>)
(define <dev_t> <__darwin_dev_t>)
(define <mode_t> <__darwin_mode_t>)
(define arc4random (make-c-func 'arc4random <u_int32_t> (list)))
(define arc4random_addrandom (make-c-func 'arc4random_addrandom <c-void> (list (ptr <c-uchar>) <c-int>)))
(define arc4random_stir (make-c-func 'arc4random_stir <c-void> (list)))
(define cgetcap (make-c-func 'cgetcap (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) <c-int>)))
(define cgetclose (make-c-func 'cgetclose <c-int> (list)))
(define cgetent (make-c-func 'cgetent <c-int> (list (ptr (ptr <c-char>)) (ptr (ptr <c-char>)) (ptr <c-char>))))
(define cgetfirst (make-c-func 'cgetfirst <c-int> (list (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define cgetmatch (make-c-func 'cgetmatch <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define cgetnext (make-c-func 'cgetnext <c-int> (list (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define cgetnum (make-c-func 'cgetnum <c-int> (list (ptr <c-char>) (ptr <c-char>) (ptr <c-long>))))
(define cgetset (make-c-func 'cgetset <c-int> (list (ptr <c-char>))))
(define cgetstr (make-c-func 'cgetstr <c-int> (list (ptr <c-char>) (ptr <c-char>) (ptr (ptr <c-char>)))))
(define cgetustr (make-c-func 'cgetustr <c-int> (list (ptr <c-char>) (ptr <c-char>) (ptr (ptr <c-char>)))))
(define daemon (make-c-func 'daemon <c-int> (list <c-int> <c-int>)))
(define devname (make-c-func 'devname (ptr <c-char>) (list <dev_t> <mode_t>)))
(define devname_r (make-c-func 'devname_r (ptr <c-char>) (list <dev_t> <mode_t> (ptr <c-char>) <c-int>)))
(define getbsize (make-c-func 'getbsize (ptr <c-char>) (list (ptr <c-int>) (ptr <c-long>))))
(define getloadavg (make-c-func 'getloadavg <c-int> (list (ptr <c-double>) <c-int>)))
(define getprogname (make-c-func 'getprogname (ptr <c-char>) (list)))
(define heapsort (make-c-func 'heapsort <c-int> (list (ptr <c-void>) <size_t> <size_t> (make-c-func-ptr <c-int> (list (ptr <c-void>) (ptr <c-void>)) (list '#f '#f)))))
(define mergesort (make-c-func 'mergesort <c-int> (list (ptr <c-void>) <size_t> <size_t> (make-c-func-ptr <c-int> (list (ptr <c-void>) (ptr <c-void>)) (list '#f '#f)))))
(define qsort_r (make-c-func 'qsort_r <c-void> (list (ptr <c-void>) <size_t> <size_t> (ptr <c-void>) (make-c-func-ptr <c-int> (list (ptr <c-void>) (ptr <c-void>) (ptr <c-void>)) (list '#f '#f '#f)))))
(define radixsort (make-c-func 'radixsort <c-int> (list (ptr (ptr <c-uchar>)) <c-int> (ptr <c-uchar>) <c-uint>)))
(define setprogname (make-c-func 'setprogname <c-void> (list (ptr <c-char>))))
(define sradixsort (make-c-func 'sradixsort <c-int> (list (ptr (ptr <c-uchar>)) <c-int> (ptr <c-uchar>) <c-uint>)))
(define sranddev (make-c-func 'sranddev <c-void> (list)))
(define srandomdev (make-c-func 'srandomdev <c-void> (list)))
(define rand_r (make-c-func 'rand_r <c-int> (list (ptr <c-uint>))))
(define reallocf (make-c-func 'reallocf (ptr <c-void>) (list (ptr <c-void>) <size_t>)))
(define strtoq (make-c-func 'strtoq <c-longlong> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define strtouq (make-c-func 'strtouq <c-ulonglong> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define suboptarg (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'suboptarg))))
(define valloc (make-c-func 'valloc (ptr <c-void>) (list <size_t>)))
(define-c-struct accessx_descriptor)
(init-c-struct! (c-struct 'accessx_descriptor) (list (cons 'ad_name_offset <c-uint>) (cons 'ad_flags <c-int>) (cons 'ad_pad (make-c-array <c-int> (x->integer 2)))))
(define <gid_t> <__darwin_gid_t>)
(define <off_t> <__darwin_off_t>)
(define <useconds_t> <__darwin_useconds_t>)
(define <uuid_t> <__darwin_uuid_t>)
(define _exit (make-c-func '_exit <c-void> (list <c-int>)))
(define access (make-c-func 'access <c-int> (list (ptr <c-char>) <c-int>)))
(define alarm (make-c-func 'alarm <c-uint> (list <c-uint>)))
(define chdir (make-c-func 'chdir <c-int> (list (ptr <c-char>))))
(define chown (make-c-func 'chown <c-int> (list (ptr <c-char>) <uid_t> <gid_t>)))
(define close (make-c-func 'close <c-int> (list <c-int>)))
(define confstr (make-c-func 'confstr <size_t> (list <c-int> (ptr <c-char>) <size_t>)))
(define crypt (make-c-func 'crypt (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>))))
(define ctermid (make-c-func 'ctermid (ptr <c-char>) (list (ptr <c-char>))))
(define dup (make-c-func 'dup <c-int> (list <c-int>)))
(define dup2 (make-c-func 'dup2 <c-int> (list <c-int> <c-int>)))
(define execl (make-c-func-vaargs 'execl <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define execle (make-c-func-vaargs 'execle <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define execlp (make-c-func-vaargs 'execlp <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define execv (make-c-func 'execv <c-int> (list (ptr <c-char>) (ptr (ptr <c-char>)))))
(define execve (make-c-func 'execve <c-int> (list (ptr <c-char>) (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define execvp (make-c-func 'execvp <c-int> (list (ptr <c-char>) (ptr (ptr <c-char>)))))
(define fchown (make-c-func 'fchown <c-int> (list <c-int> <uid_t> <gid_t>)))
(define fchdir (make-c-func 'fchdir <c-int> (list <c-int>)))
(define fork (make-c-func 'fork <pid_t> (list)))
(define fpathconf (make-c-func 'fpathconf <c-long> (list <c-int> <c-int>)))
(define ftruncate (make-c-func 'ftruncate <c-int> (list <c-int> <off_t>)))
(define getcwd (make-c-func 'getcwd (ptr <c-char>) (list (ptr <c-char>) <size_t>)))
(define getegid (make-c-func 'getegid <gid_t> (list)))
(define geteuid (make-c-func 'geteuid <uid_t> (list)))
(define getgid (make-c-func 'getgid <gid_t> (list)))
(define getgroups (make-c-func 'getgroups <c-int> (list <c-int> (ptr <gid_t>))))
(define gethostid (make-c-func 'gethostid <c-long> (list)))
(define gethostname (make-c-func 'gethostname <c-int> (list (ptr <c-char>) <size_t>)))
(define getlogin (make-c-func 'getlogin (ptr <c-char>) (list)))
(define getlogin_r (make-c-func 'getlogin_r <c-int> (list (ptr <c-char>) <size_t>)))
(define getopt (make-c-func 'getopt <c-int> (list <c-int> (ptr (ptr <c-char>)) (ptr <c-char>))))
(define getpgid (make-c-func 'getpgid <pid_t> (list <pid_t>)))
(define getpgrp (make-c-func 'getpgrp <pid_t> (list)))
(define getpid (make-c-func 'getpid <pid_t> (list)))
(define getppid (make-c-func 'getppid <pid_t> (list)))
(define getsid (make-c-func 'getsid <pid_t> (list <pid_t>)))
(define getuid (make-c-func 'getuid <uid_t> (list)))
(define getwd (make-c-func 'getwd (ptr <c-char>) (list (ptr <c-char>))))
(define isatty (make-c-func 'isatty <c-int> (list <c-int>)))
(define lchown (make-c-func 'lchown <c-int> (list (ptr <c-char>) <uid_t> <gid_t>)))
(define link (make-c-func 'link <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define lockf (make-c-func 'lockf <c-int> (list <c-int> <c-int> <off_t>)))
(define lseek (make-c-func 'lseek <off_t> (list <c-int> <off_t> <c-int>)))
(define nice (make-c-func 'nice <c-int> (list <c-int>)))
(define pathconf (make-c-func 'pathconf <c-long> (list (ptr <c-char>) <c-int>)))
(define pause (make-c-func 'pause <c-int> (list)))
(define pipe (make-c-func 'pipe <c-int> (list (make-c-array <c-int> (x->integer 2)))))
(define pread (make-c-func 'pread <ssize_t> (list <c-int> (ptr <c-void>) <size_t> <off_t>)))
(define pwrite (make-c-func 'pwrite <ssize_t> (list <c-int> (ptr <c-void>) <size_t> <off_t>)))
(define read (make-c-func 'read <ssize_t> (list <c-int> (ptr <c-void>) <size_t>)))
(define readlink (make-c-func 'readlink <ssize_t> (list (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define rmdir (make-c-func 'rmdir <c-int> (list (ptr <c-char>))))
(define setegid (make-c-func 'setegid <c-int> (list <gid_t>)))
(define seteuid (make-c-func 'seteuid <c-int> (list <uid_t>)))
(define setgid (make-c-func 'setgid <c-int> (list <gid_t>)))
(define setpgid (make-c-func 'setpgid <c-int> (list <pid_t> <pid_t>)))
(define setpgrp (make-c-func 'setpgrp <c-int> (list <pid_t> <pid_t>)))
(define setregid (make-c-func 'setregid <c-int> (list <gid_t> <gid_t>)))
(define setreuid (make-c-func 'setreuid <c-int> (list <uid_t> <uid_t>)))
(define setsid (make-c-func 'setsid <pid_t> (list)))
(define setuid (make-c-func 'setuid <c-int> (list <uid_t>)))
(define sleep (make-c-func 'sleep <c-uint> (list <c-uint>)))
(define swab (make-c-func 'swab <c-void> (list (ptr <c-void>) (ptr <c-void>) <ssize_t>)))
(define symlink (make-c-func 'symlink <c-int> (list (ptr <c-char>) (ptr <c-char>))))
(define sync (make-c-func 'sync <c-void> (list)))
(define sysconf (make-c-func 'sysconf <c-long> (list <c-int>)))
(define tcgetpgrp (make-c-func 'tcgetpgrp <pid_t> (list <c-int>)))
(define tcsetpgrp (make-c-func 'tcsetpgrp <c-int> (list <c-int> <pid_t>)))
(define truncate (make-c-func 'truncate <c-int> (list (ptr <c-char>) <off_t>)))
(define ttyname (make-c-func 'ttyname (ptr <c-char>) (list <c-int>)))
(define ttyname_r (make-c-func 'ttyname_r (ptr <c-char>) (list <c-int> (ptr <c-char>) <size_t>)))
(define ualarm (make-c-func 'ualarm <useconds_t> (list <useconds_t> <useconds_t>)))
(define unlink (make-c-func 'unlink <c-int> (list (ptr <c-char>))))
(define usleep (make-c-func 'usleep <c-int> (list <useconds_t>)))
(define vfork (make-c-func 'vfork <pid_t> (list)))
(define write (make-c-func 'write <ssize_t> (list <c-int> (ptr <c-void>) <size_t>)))
(define optarg (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'optarg))))
(define optind (deref (cast (ptr <c-int>) (c-lookup-symbol 'optind))))
(define opterr (deref (cast (ptr <c-int>) (c-lookup-symbol 'opterr))))
(define optopt (deref (cast (ptr <c-int>) (c-lookup-symbol 'optopt))))
(define <time_t> <__darwin_time_t>)
(define <suseconds_t> <__darwin_suseconds_t>)
(define-c-struct timespec)
(init-c-struct! (c-struct 'timespec) (list (cons 'tv_sec <time_t>) (cons 'tv_nsec <c-long>)))
(define-c-struct fd_set)
(init-c-struct! (c-struct 'fd_set) (list (cons 'fds_bits (make-c-array <__int32_t> (x->integer (/ (cast <real> (c-+ 1024 (cast <real> (c-- (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8)) (cast <real> 1))))) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8)))))))))
(define <fd_set> <c-struct:fd_set>)
(define <u_char> <c-uchar>)
(define <u_short> <c-ushort>)
(define <u_int> <c-uint>)
(define <u_long> <c-ulong>)
(define <ushort> <c-ushort>)
(define <uint> <c-uint>)
(define <u_quad_t> <u_int64_t>)
(define <quad_t> <int64_t>)
(define <qaddr_t> (ptr <quad_t>))
(define <caddr_t> (ptr <c-char>))
(define <daddr_t> <int32_t>)
(define <fixpt_t> <u_int32_t>)
(define <blkcnt_t> <__darwin_blkcnt_t>)
(define <blksize_t> <__darwin_blksize_t>)
(define <in_addr_t> <__uint32_t>)
(define <in_port_t> <__uint16_t>)
(define <ino_t> <__darwin_ino_t>)
(define <key_t> <__int32_t>)
(define <nlink_t> <__uint16_t>)
(define <segsz_t> <int32_t>)
(define <swblk_t> <int32_t>)
(define <clock_t> <__darwin_clock_t>)
(define <fd_mask> <__int32_t>)
(define <pthread_cond_t> <__darwin_pthread_cond_t>)
(define <pthread_condattr_t> <__darwin_pthread_condattr_t>)
(define <pthread_mutex_t> <__darwin_pthread_mutex_t>)
(define <pthread_mutexattr_t> <__darwin_pthread_mutexattr_t>)
(define <pthread_once_t> <__darwin_pthread_once_t>)
(define <pthread_rwlock_t> <__darwin_pthread_rwlock_t>)
(define <pthread_rwlockattr_t> <__darwin_pthread_rwlockattr_t>)
(define <pthread_t> <__darwin_pthread_t>)
(define <pthread_key_t> <__darwin_pthread_key_t>)
(define <fsblkcnt_t> <__darwin_fsblkcnt_t>)
(define <fsfilcnt_t> <__darwin_fsfilcnt_t>)
(define sys_signame (deref (cast (ptr (make-c-array (ptr <c-char>) (x->integer 32))) (c-lookup-symbol 'sys_signame))))
(define sys_siglist (deref (cast (ptr (make-c-array (ptr <c-char>) (x->integer 32))) (c-lookup-symbol 'sys_siglist))))
(define raise (make-c-func 'raise <c-int> (list <c-int>)))
(define bsd_signal (make-c-func 'bsd_signal (make-c-func-ptr <c-void> (list <c-int>) (list '#f)) (list <c-int> (make-c-func-ptr <c-void> (list <c-int>) (list '#f)))))
(define kill (make-c-func 'kill <c-int> (list <pid_t> <c-int>)))
(define killpg (make-c-func 'killpg <c-int> (list <pid_t> <c-int>)))
(define pthread_kill (make-c-func 'pthread_kill <c-int> (list <pthread_t> <c-int>)))
(define pthread_sigmask (make-c-func 'pthread_sigmask <c-int> (list <c-int> (ptr <sigset_t>) (ptr <sigset_t>))))
(define sigaction (make-c-func 'sigaction <c-int> (list <c-int> (ptr <c-struct:sigaction>) (ptr <c-struct:sigaction>))))
(define sigaddset (make-c-func 'sigaddset <c-int> (list (ptr <sigset_t>) <c-int>)))
(define sigaltstack (make-c-func 'sigaltstack <c-int> (list (ptr <stack_t>) (ptr <stack_t>))))
(define sigdelset (make-c-func 'sigdelset <c-int> (list (ptr <sigset_t>) <c-int>)))
(define sigemptyset (make-c-func 'sigemptyset <c-int> (list (ptr <sigset_t>))))
(define sigfillset (make-c-func 'sigfillset <c-int> (list (ptr <sigset_t>))))
(define sighold (make-c-func 'sighold <c-int> (list <c-int>)))
(define sigignore (make-c-func 'sigignore <c-int> (list <c-int>)))
(define siginterrupt (make-c-func 'siginterrupt <c-int> (list <c-int> <c-int>)))
(define sigismember (make-c-func 'sigismember <c-int> (list (ptr <sigset_t>) <c-int>)))
(define sigpause (make-c-func 'sigpause <c-int> (list <c-int>)))
(define sigpending (make-c-func 'sigpending <c-int> (list (ptr <sigset_t>))))
(define sigprocmask (make-c-func 'sigprocmask <c-int> (list <c-int> (ptr <sigset_t>) (ptr <sigset_t>))))
(define sigrelse (make-c-func 'sigrelse <c-int> (list <c-int>)))
(define sigset (make-c-func 'sigset (make-c-func-ptr <c-void> (list <c-int>) (list '#f)) (list <c-int> (make-c-func-ptr <c-void> (list <c-int>) (list '#f)))))
(define sigsuspend (make-c-func 'sigsuspend <c-int> (list (ptr <sigset_t>))))
(define sigwait (make-c-func 'sigwait <c-int> (list (ptr <sigset_t>) (ptr <c-int>))))
(define psignal (make-c-func 'psignal <c-void> (list <c-uint> (ptr <c-char>))))
(define sigblock (make-c-func 'sigblock <c-int> (list <c-int>)))
(define sigreturn (make-c-func 'sigreturn <c-int> (list (ptr <c-struct:sigcontext>))))
(define sigsetmask (make-c-func 'sigsetmask <c-int> (list <c-int>)))
(define sigvec (make-c-func 'sigvec <c-int> (list <c-int> (ptr <c-struct:sigvec>) (ptr <c-struct:sigvec>))))
(define-c-struct itimerval)
(init-c-struct! (c-struct 'itimerval) (list (cons 'it_interval <c-struct:timeval>) (cons 'it_value <c-struct:timeval>)))
(define-c-struct timezone)
(init-c-struct! (c-struct 'timezone) (list (cons 'tz_minuteswest <c-int>) (cons 'tz_dsttime <c-int>)))
(define-c-struct clockinfo)
(init-c-struct! (c-struct 'clockinfo) (list (cons 'hz <c-int>) (cons 'tick <c-int>) (cons 'tickadj <c-int>) (cons 'stathz <c-int>) (cons 'profhz <c-int>)))
(define-c-struct tm)
(init-c-struct! (c-struct 'tm) (list (cons 'tm_sec <c-int>) (cons 'tm_min <c-int>) (cons 'tm_hour <c-int>) (cons 'tm_mday <c-int>) (cons 'tm_mon <c-int>) (cons 'tm_year <c-int>) (cons 'tm_wday <c-int>) (cons 'tm_yday <c-int>) (cons 'tm_isdst <c-int>) (cons 'tm_gmtoff <c-long>) (cons 'tm_zone (ptr <c-char>))))
(define tzname (deref (cast (ptr (make-c-array (ptr <c-char>) #f)) (c-lookup-symbol 'tzname))))
(define getdate_err (deref (cast (ptr <c-int>) (c-lookup-symbol 'getdate_err))))
(define daylight (deref (cast (ptr <c-int>) (c-lookup-symbol 'daylight))))
(define asctime (make-c-func 'asctime (ptr <c-char>) (list (ptr <c-struct:tm>))))
(define clock (make-c-func 'clock <clock_t> (list)))
(define ctime (make-c-func 'ctime (ptr <c-char>) (list (ptr <time_t>))))
(define difftime (make-c-func 'difftime <c-double> (list <time_t> <time_t>)))
(define getdate (make-c-func 'getdate (ptr <c-struct:tm>) (list (ptr <c-char>))))
(define gmtime (make-c-func 'gmtime (ptr <c-struct:tm>) (list (ptr <time_t>))))
(define localtime (make-c-func 'localtime (ptr <c-struct:tm>) (list (ptr <time_t>))))
(define mktime (make-c-func 'mktime <time_t> (list (ptr <c-struct:tm>))))
(define strftime (make-c-func 'strftime <size_t> (list (ptr <c-char>) <size_t> (ptr <c-char>) (ptr <c-struct:tm>))))
(define strptime (make-c-func 'strptime (ptr <c-char>) (list (ptr <c-char>) (ptr <c-char>) (ptr <c-struct:tm>))))
(define time (make-c-func 'time <time_t> (list (ptr <time_t>))))
(define tzset (make-c-func 'tzset <c-void> (list)))
(define asctime_r (make-c-func 'asctime_r (ptr <c-char>) (list (ptr <c-struct:tm>) (ptr <c-char>))))
(define ctime_r (make-c-func 'ctime_r (ptr <c-char>) (list (ptr <time_t>) (ptr <c-char>))))
(define gmtime_r (make-c-func 'gmtime_r (ptr <c-struct:tm>) (list (ptr <time_t>) (ptr <c-struct:tm>))))
(define localtime_r (make-c-func 'localtime_r (ptr <c-struct:tm>) (list (ptr <time_t>) (ptr <c-struct:tm>))))
(define posix2time (make-c-func 'posix2time <time_t> (list <time_t>)))
(define timezone (make-c-func 'timezone (ptr <c-char>) (list <c-int> <c-int>)))
(define tzsetwall (make-c-func 'tzsetwall <c-void> (list)))
(define time2posix (make-c-func 'time2posix <time_t> (list <time_t>)))
(define timelocal (make-c-func 'timelocal <time_t> (list (ptr <c-struct:tm>))))
(define timegm (make-c-func 'timegm <time_t> (list (ptr <c-struct:tm>))))
(define nanosleep (make-c-func 'nanosleep <c-int> (list (ptr <c-struct:timespec>) (ptr <c-struct:timespec>))))
(define adjtime (make-c-func 'adjtime <c-int> (list (ptr <c-struct:timeval>) (ptr <c-struct:timeval>))))
(define futimes (make-c-func 'futimes <c-int> (list <c-int> (ptr <c-struct:timeval>))))
(define settimeofday (make-c-func 'settimeofday <c-int> (list (ptr <c-struct:timeval>) (ptr <c-struct:timezone>))))
(define getitimer (make-c-func 'getitimer <c-int> (list <c-int> (ptr <c-struct:itimerval>))))
(define gettimeofday (make-c-func 'gettimeofday <c-int> (list (ptr <c-struct:timeval>) (ptr <c-struct:timezone>))))
(define select (make-c-func 'select <c-int> (list <c-int> (ptr <fd_set>) (ptr <fd_set>) (ptr <fd_set>) (ptr <c-struct:timeval>))))
(define setitimer (make-c-func 'setitimer <c-int> (list <c-int> (ptr <c-struct:itimerval>) (ptr <c-struct:itimerval>))))
(define utimes (make-c-func 'utimes <c-int> (list (ptr <c-char>) (ptr <c-struct:timeval>))))
(define pselect (make-c-func 'pselect <c-int> (list <c-int> (ptr <fd_set>) (ptr <fd_set>) (ptr <fd_set>) (ptr <c-struct:timespec>) (ptr <sigset_t>))))
(define select (make-c-func 'select <c-int> (list <c-int> (ptr <fd_set>) (ptr <fd_set>) (ptr <fd_set>) (ptr <c-struct:timeval>))))
(define _Exit (make-c-func '_Exit <c-void> (list <c-int>)))
(define accessx_np (make-c-func 'accessx_np <c-int> (list (ptr <c-struct:accessx_descriptor>) <size_t> (ptr <c-int>) <uid_t>)))
(define acct (make-c-func 'acct <c-int> (list (ptr <c-char>))))
(define add_profil (make-c-func 'add_profil <c-int> (list (ptr <c-char>) <size_t> <c-ulong> <c-uint>)))
(define brk (make-c-func 'brk (ptr <c-void>) (list (ptr <c-void>))))
(define chroot (make-c-func 'chroot <c-int> (list (ptr <c-char>))))
(define encrypt (make-c-func 'encrypt <c-int> (list (ptr <c-char>) <c-int>)))
(define endusershell (make-c-func 'endusershell <c-void> (list)))
(define execvP (make-c-func 'execvP <c-int> (list (ptr <c-char>) (ptr <c-char>) (ptr (ptr <c-char>)))))
(define fflagstostr (make-c-func 'fflagstostr (ptr <c-char>) (list <c-ulong>)))
(define fsync (make-c-func 'fsync <c-int> (list <c-int>)))
(define getdtablesize (make-c-func 'getdtablesize <c-int> (list)))
(define getdomainname (make-c-func 'getdomainname <c-int> (list (ptr <c-char>) <c-int>)))
(define getgrouplist (make-c-func 'getgrouplist <c-int> (list (ptr <c-char>) <c-int> (ptr <c-int>) (ptr <c-int>))))
(define getmode (make-c-func 'getmode <mode_t> (list (ptr <c-void>) <mode_t>)))
(define getpagesize (make-c-func 'getpagesize <c-int> (list)))
(define getpass (make-c-func 'getpass (ptr <c-char>) (list (ptr <c-char>))))
(define getpeereid (make-c-func 'getpeereid <c-int> (list <c-int> (ptr <uid_t>) (ptr <gid_t>))))
(define getpgid (make-c-func 'getpgid <c-int> (list <pid_t>)))
(define getsgroups_np (make-c-func 'getsgroups_np <c-int> (list (ptr <c-int>) <uuid_t>)))
(define getsid (make-c-func 'getsid <c-int> (list <pid_t>)))
(define getusershell (make-c-func 'getusershell (ptr <c-char>) (list)))
(define getwgroups_np (make-c-func 'getwgroups_np <c-int> (list (ptr <c-int>) <uuid_t>)))
(define initgroups (make-c-func 'initgroups <c-int> (list (ptr <c-char>) <c-int>)))
(define iruserok (make-c-func 'iruserok <c-int> (list <c-ulong> <c-int> (ptr <c-char>) (ptr <c-char>))))
(define issetugid (make-c-func 'issetugid <c-int> (list)))
(define mkdtemp (make-c-func 'mkdtemp (ptr <c-char>) (list (ptr <c-char>))))
(define mknod (make-c-func 'mknod <c-int> (list (ptr <c-char>) <mode_t> <dev_t>)))
(define mkstemp (make-c-func 'mkstemp <c-int> (list (ptr <c-char>))))
(define mkstemps (make-c-func 'mkstemps <c-int> (list (ptr <c-char>) <c-int>)))
(define mktemp (make-c-func 'mktemp (ptr <c-char>) (list (ptr <c-char>))))
(define nfssvc (make-c-func 'nfssvc <c-int> (list <c-int> (ptr <c-void>))))
(define profil (make-c-func 'profil <c-int> (list (ptr <c-char>) <size_t> <c-ulong> <c-uint>)))
(define pthread_setugid_np (make-c-func 'pthread_setugid_np <c-int> (list <uid_t> <gid_t>)))
(define pthread_getugid_np (make-c-func 'pthread_getugid_np <c-int> (list (ptr <uid_t>) (ptr <gid_t>))))
(define rcmd (make-c-func 'rcmd <c-int> (list (ptr (ptr <c-char>)) <c-int> (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) (ptr <c-int>))))
(define reboot (make-c-func 'reboot <c-int> (list <c-int>)))
(define revoke (make-c-func 'revoke <c-int> (list (ptr <c-char>))))
(define rresvport (make-c-func 'rresvport <c-int> (list (ptr <c-int>))))
(define rresvport_af (make-c-func 'rresvport_af <c-int> (list (ptr <c-int>) <c-int>)))
(define ruserok (make-c-func 'ruserok <c-int> (list (ptr <c-char>) <c-int> (ptr <c-char>) (ptr <c-char>))))
(define sbrk (make-c-func 'sbrk (ptr <c-void>) (list <c-int>)))
(define setdomainname (make-c-func 'setdomainname <c-int> (list (ptr <c-char>) <c-int>)))
(define setgroups (make-c-func 'setgroups <c-int> (list <c-int> (ptr <gid_t>))))
(define sethostid (make-c-func 'sethostid <c-void> (list <c-long>)))
(define sethostname (make-c-func 'sethostname <c-int> (list (ptr <c-char>) <c-int>)))
(define setkey (make-c-func 'setkey <c-int> (list (ptr <c-char>))))
(define setlogin (make-c-func 'setlogin <c-int> (list (ptr <c-char>))))
(define setmode (make-c-func 'setmode (ptr <c-void>) (list (ptr <c-char>))))
(define setrgid (make-c-func 'setrgid <c-int> (list <gid_t>)))
(define setruid (make-c-func 'setruid <c-int> (list <uid_t>)))
(define setsgroups_np (make-c-func 'setsgroups_np <c-int> (list <c-int> <uuid_t>)))
(define setusershell (make-c-func 'setusershell <c-void> (list)))
(define setwgroups_np (make-c-func 'setwgroups_np <c-int> (list <c-int> <uuid_t>)))
(define strtofflags (make-c-func 'strtofflags <c-int> (list (ptr (ptr <c-char>)) (ptr <c-ulong>) (ptr <c-ulong>))))
(define swapon (make-c-func 'swapon <c-int> (list (ptr <c-char>))))
(define syscall (make-c-func-vaargs 'syscall <c-int> (list <c-int>)))
(define ttyslot (make-c-func 'ttyslot <c-int> (list)))
(define undelete (make-c-func 'undelete <c-int> (list (ptr <c-char>))))
(define valloc (make-c-func 'valloc (ptr <c-void>) (list <size_t>)))
(define suboptarg (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'suboptarg))))
(define getsubopt (make-c-func 'getsubopt <c-int> (list (ptr (ptr <c-char>)) (ptr (ptr <c-char>)) (ptr (ptr <c-char>)))))
(define getattrlist (make-c-func 'getattrlist <c-int> (list (ptr <c-char>) (ptr <c-void>) (ptr <c-void>) <size_t> <c-ulong>)))
(define setattrlist (make-c-func 'setattrlist <c-int> (list (ptr <c-char>) (ptr <c-void>) (ptr <c-void>) <size_t> <c-ulong>)))
(define exchangedata (make-c-func 'exchangedata <c-int> (list (ptr <c-char>) (ptr <c-char>) <c-ulong>)))
(define checkuseraccess (make-c-func 'checkuseraccess <c-int> (list (ptr <c-char>) <uid_t> (ptr <gid_t>) <c-int> <c-int> <c-ulong>)))
(define getdirentriesattr (make-c-func 'getdirentriesattr <c-int> (list <c-int> (ptr <c-void>) (ptr <c-void>) <size_t> (ptr <c-ulong>) (ptr <c-ulong>) (ptr <c-ulong>) <c-ulong>)))
(define searchfs (make-c-func 'searchfs <c-int> (list (ptr <c-char>) (ptr <c-void>) (ptr <c-void>) <c-ulong> <c-ulong> (ptr <c-void>))))
(define fsctl (make-c-func 'fsctl <c-int> (list (ptr <c-char>) <c-ulong> (ptr <c-void>) <c-ulong>)))
(define optreset (deref (cast (ptr <c-int>) (c-lookup-symbol 'optreset))))
(define __assert_rtn (make-c-func '__assert_rtn <c-void> (list (ptr <c-char>) (ptr <c-char>) <c-int> (ptr <c-char>))))
(define <Py_uintptr_t> <c-uint>)
(define <Py_intptr_t> <c-int>)
(define <float_t> <c-float>)
(define <double_t> <c-double>)
(define _FP_NAN 1)
(define _FP_INFINITE 2)
(define _FP_ZERO 3)
(define _FP_NORMAL 4)
(define _FP_SUBNORMAL 5)
(define _FP_SUPERNORMAL 6)
(define __math_errhandling (make-c-func '__math_errhandling <c-uint> (list)))
(define __fpclassify (make-c-func '__fpclassify <c-int> (list <c-longdouble>)))
(define __isnormal (make-c-func '__isnormal <c-int> (list <c-longdouble>)))
(define __isfinite (make-c-func '__isfinite <c-int> (list <c-longdouble>)))
(define __isinf (make-c-func '__isinf <c-int> (list <c-longdouble>)))
(define __isnan (make-c-func '__isnan <c-int> (list <c-longdouble>)))
(define __signbitl (make-c-func '__signbitl <c-int> (list <c-longdouble>)))
(define __fpclassifyd (make-c-func '__fpclassifyd <c-int> (list <c-double>)))
(define __fpclassifyf (make-c-func '__fpclassifyf <c-int> (list <c-float>)))
(define __isnormald (make-c-func '__isnormald <c-int> (list <c-double>)))
(define __isnormalf (make-c-func '__isnormalf <c-int> (list <c-float>)))
(define __isfinited (make-c-func '__isfinited <c-int> (list <c-double>)))
(define __isfinitef (make-c-func '__isfinitef <c-int> (list <c-float>)))
(define __isinfd (make-c-func '__isinfd <c-int> (list <c-double>)))
(define __isinff (make-c-func '__isinff <c-int> (list <c-float>)))
(define __isnand (make-c-func '__isnand <c-int> (list <c-double>)))
(define __isnanf (make-c-func '__isnanf <c-int> (list <c-float>)))
(define __signbitd (make-c-func '__signbitd <c-int> (list <c-double>)))
(define __signbitf (make-c-func '__signbitf <c-int> (list <c-float>)))
(define acos (make-c-func 'acos <c-double> (list <c-double>)))
(define acosf (make-c-func 'acosf <c-float> (list <c-float>)))
(define asin (make-c-func 'asin <c-double> (list <c-double>)))
(define asinf (make-c-func 'asinf <c-float> (list <c-float>)))
(define atan (make-c-func 'atan <c-double> (list <c-double>)))
(define atanf (make-c-func 'atanf <c-float> (list <c-float>)))
(define atan2 (make-c-func 'atan2 <c-double> (list <c-double> <c-double>)))
(define atan2f (make-c-func 'atan2f <c-float> (list <c-float> <c-float>)))
(define cos (make-c-func 'cos <c-double> (list <c-double>)))
(define cosf (make-c-func 'cosf <c-float> (list <c-float>)))
(define sin (make-c-func 'sin <c-double> (list <c-double>)))
(define sinf (make-c-func 'sinf <c-float> (list <c-float>)))
(define tan (make-c-func 'tan <c-double> (list <c-double>)))
(define tanf (make-c-func 'tanf <c-float> (list <c-float>)))
(define acosh (make-c-func 'acosh <c-double> (list <c-double>)))
(define acoshf (make-c-func 'acoshf <c-float> (list <c-float>)))
(define asinh (make-c-func 'asinh <c-double> (list <c-double>)))
(define asinhf (make-c-func 'asinhf <c-float> (list <c-float>)))
(define atanh (make-c-func 'atanh <c-double> (list <c-double>)))
(define atanhf (make-c-func 'atanhf <c-float> (list <c-float>)))
(define cosh (make-c-func 'cosh <c-double> (list <c-double>)))
(define coshf (make-c-func 'coshf <c-float> (list <c-float>)))
(define sinh (make-c-func 'sinh <c-double> (list <c-double>)))
(define sinhf (make-c-func 'sinhf <c-float> (list <c-float>)))
(define tanh (make-c-func 'tanh <c-double> (list <c-double>)))
(define tanhf (make-c-func 'tanhf <c-float> (list <c-float>)))
(define exp (make-c-func 'exp <c-double> (list <c-double>)))
(define expf (make-c-func 'expf <c-float> (list <c-float>)))
(define exp2 (make-c-func 'exp2 <c-double> (list <c-double>)))
(define exp2f (make-c-func 'exp2f <c-float> (list <c-float>)))
(define expm1 (make-c-func 'expm1 <c-double> (list <c-double>)))
(define expm1f (make-c-func 'expm1f <c-float> (list <c-float>)))
(define log (make-c-func 'log <c-double> (list <c-double>)))
(define logf (make-c-func 'logf <c-float> (list <c-float>)))
(define log10 (make-c-func 'log10 <c-double> (list <c-double>)))
(define log10f (make-c-func 'log10f <c-float> (list <c-float>)))
(define log2 (make-c-func 'log2 <c-double> (list <c-double>)))
(define log2f (make-c-func 'log2f <c-float> (list <c-float>)))
(define log1p (make-c-func 'log1p <c-double> (list <c-double>)))
(define log1pf (make-c-func 'log1pf <c-float> (list <c-float>)))
(define logb (make-c-func 'logb <c-double> (list <c-double>)))
(define logbf (make-c-func 'logbf <c-float> (list <c-float>)))
(define modf (make-c-func 'modf <c-double> (list <c-double> (ptr <c-double>))))
(define modff (make-c-func 'modff <c-float> (list <c-float> (ptr <c-float>))))
(define ldexp (make-c-func 'ldexp <c-double> (list <c-double> <c-int>)))
(define ldexpf (make-c-func 'ldexpf <c-float> (list <c-float> <c-int>)))
(define frexp (make-c-func 'frexp <c-double> (list <c-double> (ptr <c-int>))))
(define frexpf (make-c-func 'frexpf <c-float> (list <c-float> (ptr <c-int>))))
(define ilogb (make-c-func 'ilogb <c-int> (list <c-double>)))
(define ilogbf (make-c-func 'ilogbf <c-int> (list <c-float>)))
(define scalbn (make-c-func 'scalbn <c-double> (list <c-double> <c-int>)))
(define scalbnf (make-c-func 'scalbnf <c-float> (list <c-float> <c-int>)))
(define scalbln (make-c-func 'scalbln <c-double> (list <c-double> <c-long>)))
(define scalblnf (make-c-func 'scalblnf <c-float> (list <c-float> <c-long>)))
(define fabs (make-c-func 'fabs <c-double> (list <c-double>)))
(define fabsf (make-c-func 'fabsf <c-float> (list <c-float>)))
(define cbrt (make-c-func 'cbrt <c-double> (list <c-double>)))
(define cbrtf (make-c-func 'cbrtf <c-float> (list <c-float>)))
(define hypot (make-c-func 'hypot <c-double> (list <c-double> <c-double>)))
(define hypotf (make-c-func 'hypotf <c-float> (list <c-float> <c-float>)))
(define pow (make-c-func 'pow <c-double> (list <c-double> <c-double>)))
(define powf (make-c-func 'powf <c-float> (list <c-float> <c-float>)))
(define sqrt (make-c-func 'sqrt <c-double> (list <c-double>)))
(define sqrtf (make-c-func 'sqrtf <c-float> (list <c-float>)))
(define erf (make-c-func 'erf <c-double> (list <c-double>)))
(define erff (make-c-func 'erff <c-float> (list <c-float>)))
(define erfc (make-c-func 'erfc <c-double> (list <c-double>)))
(define erfcf (make-c-func 'erfcf <c-float> (list <c-float>)))
(define lgamma (make-c-func 'lgamma <c-double> (list <c-double>)))
(define lgammaf (make-c-func 'lgammaf <c-float> (list <c-float>)))
(define tgamma (make-c-func 'tgamma <c-double> (list <c-double>)))
(define tgammaf (make-c-func 'tgammaf <c-float> (list <c-float>)))
(define ceil (make-c-func 'ceil <c-double> (list <c-double>)))
(define ceilf (make-c-func 'ceilf <c-float> (list <c-float>)))
(define floor (make-c-func 'floor <c-double> (list <c-double>)))
(define floorf (make-c-func 'floorf <c-float> (list <c-float>)))
(define nearbyint (make-c-func 'nearbyint <c-double> (list <c-double>)))
(define nearbyintf (make-c-func 'nearbyintf <c-float> (list <c-float>)))
(define rint (make-c-func 'rint <c-double> (list <c-double>)))
(define rintf (make-c-func 'rintf <c-float> (list <c-float>)))
(define lrint (make-c-func 'lrint <c-long> (list <c-double>)))
(define lrintf (make-c-func 'lrintf <c-long> (list <c-float>)))
(define llrint (make-c-func 'llrint <c-longlong> (list <c-double>)))
(define llrintf (make-c-func 'llrintf <c-longlong> (list <c-float>)))
(define round (make-c-func 'round <c-double> (list <c-double>)))
(define roundf (make-c-func 'roundf <c-float> (list <c-float>)))
(define lround (make-c-func 'lround <c-long> (list <c-double>)))
(define lroundf (make-c-func 'lroundf <c-long> (list <c-float>)))
(define llround (make-c-func 'llround <c-longlong> (list <c-double>)))
(define llroundf (make-c-func 'llroundf <c-longlong> (list <c-float>)))
(define trunc (make-c-func 'trunc <c-double> (list <c-double>)))
(define truncf (make-c-func 'truncf <c-float> (list <c-float>)))
(define fmod (make-c-func 'fmod <c-double> (list <c-double> <c-double>)))
(define fmodf (make-c-func 'fmodf <c-float> (list <c-float> <c-float>)))
(define remainder (make-c-func 'remainder <c-double> (list <c-double> <c-double>)))
(define remainderf (make-c-func 'remainderf <c-float> (list <c-float> <c-float>)))
(define remquo (make-c-func 'remquo <c-double> (list <c-double> <c-double> (ptr <c-int>))))
(define remquof (make-c-func 'remquof <c-float> (list <c-float> <c-float> (ptr <c-int>))))
(define copysign (make-c-func 'copysign <c-double> (list <c-double> <c-double>)))
(define copysignf (make-c-func 'copysignf <c-float> (list <c-float> <c-float>)))
(define nan (make-c-func 'nan <c-double> (list (ptr <c-char>))))
(define nanf (make-c-func 'nanf <c-float> (list (ptr <c-char>))))
(define nextafter (make-c-func 'nextafter <c-double> (list <c-double> <c-double>)))
(define nextafterf (make-c-func 'nextafterf <c-float> (list <c-float> <c-float>)))
(define fdim (make-c-func 'fdim <c-double> (list <c-double> <c-double>)))
(define fdimf (make-c-func 'fdimf <c-float> (list <c-float> <c-float>)))
(define fmax (make-c-func 'fmax <c-double> (list <c-double> <c-double>)))
(define fmaxf (make-c-func 'fmaxf <c-float> (list <c-float> <c-float>)))
(define fmin (make-c-func 'fmin <c-double> (list <c-double> <c-double>)))
(define fminf (make-c-func 'fminf <c-float> (list <c-float> <c-float>)))
(define fma (make-c-func 'fma <c-double> (list <c-double> <c-double> <c-double>)))
(define fmaf (make-c-func 'fmaf <c-float> (list <c-float> <c-float> <c-float>)))
(define acosl (make-c-func 'acosl <c-longdouble> (list <c-longdouble>)))
(define asinl (make-c-func 'asinl <c-longdouble> (list <c-longdouble>)))
(define atanl (make-c-func 'atanl <c-longdouble> (list <c-longdouble>)))
(define atan2l (make-c-func 'atan2l <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define cosl (make-c-func 'cosl <c-longdouble> (list <c-longdouble>)))
(define sinl (make-c-func 'sinl <c-longdouble> (list <c-longdouble>)))
(define tanl (make-c-func 'tanl <c-longdouble> (list <c-longdouble>)))
(define acoshl (make-c-func 'acoshl <c-longdouble> (list <c-longdouble>)))
(define asinhl (make-c-func 'asinhl <c-longdouble> (list <c-longdouble>)))
(define atanhl (make-c-func 'atanhl <c-longdouble> (list <c-longdouble>)))
(define coshl (make-c-func 'coshl <c-longdouble> (list <c-longdouble>)))
(define sinhl (make-c-func 'sinhl <c-longdouble> (list <c-longdouble>)))
(define tanhl (make-c-func 'tanhl <c-longdouble> (list <c-longdouble>)))
(define expl (make-c-func 'expl <c-longdouble> (list <c-longdouble>)))
(define exp2l (make-c-func 'exp2l <c-longdouble> (list <c-longdouble>)))
(define expm1l (make-c-func 'expm1l <c-longdouble> (list <c-longdouble>)))
(define logl (make-c-func 'logl <c-longdouble> (list <c-longdouble>)))
(define log10l (make-c-func 'log10l <c-longdouble> (list <c-longdouble>)))
(define log2l (make-c-func 'log2l <c-longdouble> (list <c-longdouble>)))
(define log1pl (make-c-func 'log1pl <c-longdouble> (list <c-longdouble>)))
(define logbl (make-c-func 'logbl <c-longdouble> (list <c-longdouble>)))
(define modfl (make-c-func 'modfl <c-longdouble> (list <c-longdouble> (ptr <c-longdouble>))))
(define ldexpl (make-c-func 'ldexpl <c-longdouble> (list <c-longdouble> <c-int>)))
(define frexpl (make-c-func 'frexpl <c-longdouble> (list <c-longdouble> (ptr <c-int>))))
(define ilogbl (make-c-func 'ilogbl <c-int> (list <c-longdouble>)))
(define scalbnl (make-c-func 'scalbnl <c-longdouble> (list <c-longdouble> <c-int>)))
(define scalblnl (make-c-func 'scalblnl <c-longdouble> (list <c-longdouble> <c-long>)))
(define fabsl (make-c-func 'fabsl <c-longdouble> (list <c-longdouble>)))
(define cbrtl (make-c-func 'cbrtl <c-longdouble> (list <c-longdouble>)))
(define hypotl (make-c-func 'hypotl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define powl (make-c-func 'powl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define sqrtl (make-c-func 'sqrtl <c-longdouble> (list <c-longdouble>)))
(define erfl (make-c-func 'erfl <c-longdouble> (list <c-longdouble>)))
(define erfcl (make-c-func 'erfcl <c-longdouble> (list <c-longdouble>)))
(define lgammal (make-c-func 'lgammal <c-longdouble> (list <c-longdouble>)))
(define tgammal (make-c-func 'tgammal <c-longdouble> (list <c-longdouble>)))
(define ceill (make-c-func 'ceill <c-longdouble> (list <c-longdouble>)))
(define floorl (make-c-func 'floorl <c-longdouble> (list <c-longdouble>)))
(define nearbyintl (make-c-func 'nearbyintl <c-longdouble> (list <c-longdouble>)))
(define rintl (make-c-func 'rintl <c-longdouble> (list <c-longdouble>)))
(define lrintl (make-c-func 'lrintl <c-long> (list <c-longdouble>)))
(define llrintl (make-c-func 'llrintl <c-longlong> (list <c-longdouble>)))
(define roundl (make-c-func 'roundl <c-longdouble> (list <c-longdouble>)))
(define lroundl (make-c-func 'lroundl <c-long> (list <c-longdouble>)))
(define llroundl (make-c-func 'llroundl <c-longlong> (list <c-longdouble>)))
(define truncl (make-c-func 'truncl <c-longdouble> (list <c-longdouble>)))
(define fmodl (make-c-func 'fmodl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define remainderl (make-c-func 'remainderl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define remquol (make-c-func 'remquol <c-longdouble> (list <c-longdouble> <c-longdouble> (ptr <c-int>))))
(define copysignl (make-c-func 'copysignl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define nanl (make-c-func 'nanl <c-longdouble> (list (ptr <c-char>))))
(define nextafterl (make-c-func 'nextafterl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define nexttoward (make-c-func 'nexttoward <c-double> (list <c-double> <c-longdouble>)))
(define nexttowardf (make-c-func 'nexttowardf <c-float> (list <c-float> <c-longdouble>)))
(define nexttowardl (make-c-func 'nexttowardl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define fdiml (make-c-func 'fdiml <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define fmaxl (make-c-func 'fmaxl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define fminl (make-c-func 'fminl <c-longdouble> (list <c-longdouble> <c-longdouble>)))
(define fmal (make-c-func 'fmal <c-longdouble> (list <c-longdouble> <c-longdouble> <c-longdouble>)))
(define __inf (make-c-func '__inf <c-double> (list)))
(define __inff (make-c-func '__inff <c-float> (list)))
(define __nan (make-c-func '__nan <c-float> (list)))
(define j0 (make-c-func 'j0 <c-double> (list <c-double>)))
(define j1 (make-c-func 'j1 <c-double> (list <c-double>)))
(define jn (make-c-func 'jn <c-double> (list <c-int> <c-double>)))
(define y0 (make-c-func 'y0 <c-double> (list <c-double>)))
(define y1 (make-c-func 'y1 <c-double> (list <c-double>)))
(define yn (make-c-func 'yn <c-double> (list <c-int> <c-double>)))
(define scalb (make-c-func 'scalb <c-double> (list <c-double> <c-int>)))
(define signgam (deref (cast (ptr <c-int>) (c-lookup-symbol 'signgam))))
(define rinttol (make-c-func 'rinttol <c-long> (list <c-double>)))
(define roundtol (make-c-func 'roundtol <c-long> (list <c-double>)))
(define-c-struct __complex_s)
(init-c-struct! (c-struct '__complex_s) (list (cons 'Real <c-double>) (cons 'Imag <c-double>)))
(define <__complex_t> <c-struct:__complex_s>)
(define _fdlibm_ieee (- (cast <real> 1)))
(define _fdlibm_svid (+ (scm-cast (- (cast <real> 1))) 1))
(define _fdlibm_xopen (+ (scm-cast (+ (scm-cast (- (cast <real> 1))) 1)) 1))
(define _fdlibm_posix (+ (scm-cast (+ (scm-cast (+ (scm-cast (- (cast <real> 1))) 1)) 1)) 1))
(define _fdlib_version (deref (cast (ptr <c-int>) (c-lookup-symbol '_fdlib_version))))
(define-c-struct exception)
(init-c-struct! (c-struct 'exception) (list (cons 'type <c-int>) (cons 'name (ptr <c-char>)) (cons 'arg1 <c-double>) (cons 'arg2 <c-double>) (cons 'retval <c-double>)))
(define finite (make-c-func 'finite <c-int> (list <c-double>)))
(define gamma (make-c-func 'gamma <c-double> (list <c-double>)))
(define matherr (make-c-func 'matherr <c-int> (list (ptr <c-struct:exception>))))
(define significand (make-c-func 'significand <c-double> (list <c-double>)))
(define drem (make-c-func 'drem <c-double> (list <c-double> <c-double>)))
(define gamma_r (make-c-func 'gamma_r <c-double> (list <c-double> (ptr <c-int>))))
(define lgamma_r (make-c-func 'lgamma_r <c-double> (list <c-double> (ptr <c-int>))))
(define-c-struct ostat)
(init-c-struct! (c-struct 'ostat) (list (cons 'st_dev <__uint16_t>) (cons 'st_ino <ino_t>) (cons 'st_mode <mode_t>) (cons 'st_nlink <nlink_t>) (cons 'st_uid <__uint16_t>) (cons 'st_gid <__uint16_t>) (cons 'st_rdev <__uint16_t>) (cons 'st_size <__int32_t>) (cons 'st_atimespec <c-struct:timespec>) (cons 'st_mtimespec <c-struct:timespec>) (cons 'st_ctimespec <c-struct:timespec>) (cons 'st_blksize <__int32_t>) (cons 'st_blocks <__int32_t>) (cons 'st_flags <__uint32_t>) (cons 'st_gen <__uint32_t>)))
(define-c-struct stat)
(init-c-struct! (c-struct 'stat) (list (cons 'st_dev <dev_t>) (cons 'st_ino <ino_t>) (cons 'st_mode <mode_t>) (cons 'st_nlink <nlink_t>) (cons 'st_uid <uid_t>) (cons 'st_gid <gid_t>) (cons 'st_rdev <dev_t>) (cons 'st_atimespec <c-struct:timespec>) (cons 'st_mtimespec <c-struct:timespec>) (cons 'st_ctimespec <c-struct:timespec>) (cons 'st_size <off_t>) (cons 'st_blocks <blkcnt_t>) (cons 'st_blksize <blksize_t>) (cons 'st_flags <__uint32_t>) (cons 'st_gen <__uint32_t>) (cons 'st_lspare <__int32_t>) (cons 'st_qspare (make-c-array <__int64_t> (x->integer 2)))))
(define chmod (make-c-func 'chmod <c-int> (list (ptr <c-char>) <mode_t>)))
(define fchmod (make-c-func 'fchmod <c-int> (list <c-int> <mode_t>)))
(define fstat (make-c-func 'fstat <c-int> (list <c-int> (ptr <c-struct:stat>))))
(define lstat (make-c-func 'lstat <c-int> (list (ptr <c-char>) (ptr <c-struct:stat>))))
(define mkdir (make-c-func 'mkdir <c-int> (list (ptr <c-char>) <mode_t>)))
(define mkfifo (make-c-func 'mkfifo <c-int> (list (ptr <c-char>) <mode_t>)))
(define stat (make-c-func 'stat <c-int> (list (ptr <c-char>) (ptr <c-struct:stat>))))
(define mknod (make-c-func 'mknod <c-int> (list (ptr <c-char>) <mode_t> <dev_t>)))
(define umask (make-c-func 'umask <mode_t> (list <mode_t>)))
(define-c-struct _filesec)
(define <filesec_t> (ptr <c-struct:_filesec>))
(define chflags (make-c-func 'chflags <c-int> (list (ptr <c-char>) <__uint32_t>)))
(define chmodx_np (make-c-func 'chmodx_np <c-int> (list (ptr <c-char>) <filesec_t>)))
(define fchflags (make-c-func 'fchflags <c-int> (list <c-int> <__uint32_t>)))
(define fchmodx_np (make-c-func 'fchmodx_np <c-int> (list <c-int> <filesec_t>)))
(define fstatx_np (make-c-func 'fstatx_np <c-int> (list <c-int> (ptr <c-struct:stat>) <filesec_t>)))
(define lstatx_np (make-c-func 'lstatx_np <c-int> (list (ptr <c-char>) (ptr <c-struct:stat>) <filesec_t>)))
(define mkdirx_np (make-c-func 'mkdirx_np <c-int> (list (ptr <c-char>) <filesec_t>)))
(define mkfifox_np (make-c-func 'mkfifox_np <c-int> (list (ptr <c-char>) <filesec_t>)))
(define statx_np (make-c-func 'statx_np <c-int> (list (ptr <c-char>) (ptr <c-struct:stat>) <filesec_t>)))
(define umaskx_np (make-c-func 'umaskx_np <c-int> (list <filesec_t>)))
(define <tcflag_t> <c-ulong>)
(define <cc_t> <c-uchar>)
(define <speed_t> <c-long>)
(define-c-struct termios)
(init-c-struct! (c-struct 'termios) (list (cons 'c_iflag <tcflag_t>) (cons 'c_oflag <tcflag_t>) (cons 'c_cflag <tcflag_t>) (cons 'c_lflag <tcflag_t>) (cons 'c_cc (make-c-array <cc_t> (x->integer 20))) (cons 'c_ispeed <speed_t>) (cons 'c_ospeed <speed_t>)))
(define cfgetispeed (make-c-func 'cfgetispeed <speed_t> (list (ptr <c-struct:termios>))))
(define cfgetospeed (make-c-func 'cfgetospeed <speed_t> (list (ptr <c-struct:termios>))))
(define cfsetispeed (make-c-func 'cfsetispeed <c-int> (list (ptr <c-struct:termios>) <speed_t>)))
(define cfsetospeed (make-c-func 'cfsetospeed <c-int> (list (ptr <c-struct:termios>) <speed_t>)))
(define tcgetattr (make-c-func 'tcgetattr <c-int> (list <c-int> (ptr <c-struct:termios>))))
(define tcsetattr (make-c-func 'tcsetattr <c-int> (list <c-int> <c-int> (ptr <c-struct:termios>))))
(define tcdrain (make-c-func 'tcdrain <c-int> (list <c-int>)))
(define tcflow (make-c-func 'tcflow <c-int> (list <c-int> <c-int>)))
(define tcflush (make-c-func 'tcflush <c-int> (list <c-int> <c-int>)))
(define tcsendbreak (make-c-func 'tcsendbreak <c-int> (list <c-int> <c-int>)))
(define cfmakeraw (make-c-func 'cfmakeraw <c-void> (list (ptr <c-struct:termios>))))
(define cfsetspeed (make-c-func 'cfsetspeed <c-int> (list (ptr <c-struct:termios>) <speed_t>)))
(define-c-struct winsize)
(init-c-struct! (c-struct 'winsize) (list (cons 'ws_row <c-ushort>) (cons 'ws_col <c-ushort>) (cons 'ws_xpixel <c-ushort>) (cons 'ws_ypixel <c-ushort>)))
(define tcgetsid (make-c-func 'tcgetsid <pid_t> (list <c-int>)))
(define openpty (make-c-func 'openpty <c-int> (list (ptr <c-int>) (ptr <c-int>) (ptr <c-char>) (ptr <c-struct:termios>) (ptr <c-struct:winsize>))))
(define forkpty (make-c-func 'forkpty <c-int> (list (ptr <c-int>) (ptr <c-char>) (ptr <c-struct:termios>) (ptr <c-struct:winsize>))))
(define PyMem_Malloc (make-c-func 'PyMem_Malloc (ptr <c-void>) (list <size_t>)))
(define PyMem_Realloc (make-c-func 'PyMem_Realloc (ptr <c-void>) (list (ptr <c-void>) <size_t>)))
(define PyMem_Free (make-c-func 'PyMem_Free <c-void> (list (ptr <c-void>))))
(define-c-struct _object)
(define-c-struct _typeobject)
(init-c-struct! (c-struct '_object) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>))))
(define <PyObject> <c-struct:_object>)
(define-c-struct G319)
(init-c-struct! (c-struct 'G319) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'ob_size <c-int>)))
(define <PyVarObject> <c-struct:G319>)
(define <unaryfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>)) (list '#f)))
(define <binaryfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f)))
(define <ternaryfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f '#f)))
(define <inquiry> (make-c-func-ptr <c-int> (list (ptr <PyObject>)) (list '#f)))
(define <coercion> (make-c-func-ptr <c-int> (list (ptr (ptr <PyObject>)) (ptr (ptr <PyObject>))) (list '#f '#f)))
(define <intargfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) <c-int>) (list '#f '#f)))
(define <intintargfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) <c-int> <c-int>) (list '#f '#f '#f)))
(define <intobjargproc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) <c-int> (ptr <PyObject>)) (list '#f '#f '#f)))
(define <intintobjargproc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) <c-int> <c-int> (ptr <PyObject>)) (list '#f '#f '#f '#f)))
(define <objobjargproc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f '#f)))
(define <getreadbufferproc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) <c-int> (ptr (ptr <c-void>))) (list '#f '#f '#f)))
(define <getwritebufferproc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) <c-int> (ptr (ptr <c-void>))) (list '#f '#f '#f)))
(define <getsegcountproc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <c-int>)) (list '#f '#f)))
(define <getcharbufferproc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) <c-int> (ptr (ptr <c-char>))) (list '#f '#f '#f)))
(define <objobjproc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f)))
(define <visitproc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <c-void>)) (list '#f '#f)))
(define <traverseproc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) <visitproc> (ptr <c-void>)) (list '#f '#f '#f)))
(define-c-struct G320)
(init-c-struct! (c-struct 'G320) (list (cons 'nb_add <binaryfunc>) (cons 'nb_subtract <binaryfunc>) (cons 'nb_multiply <binaryfunc>) (cons 'nb_divide <binaryfunc>) (cons 'nb_remainder <binaryfunc>) (cons 'nb_divmod <binaryfunc>) (cons 'nb_power <ternaryfunc>) (cons 'nb_negative <unaryfunc>) (cons 'nb_positive <unaryfunc>) (cons 'nb_absolute <unaryfunc>) (cons 'nb_nonzero <inquiry>) (cons 'nb_invert <unaryfunc>) (cons 'nb_lshift <binaryfunc>) (cons 'nb_rshift <binaryfunc>) (cons 'nb_and <binaryfunc>) (cons 'nb_xor <binaryfunc>) (cons 'nb_or <binaryfunc>) (cons 'nb_coerce <coercion>) (cons 'nb_int <unaryfunc>) (cons 'nb_long <unaryfunc>) (cons 'nb_float <unaryfunc>) (cons 'nb_oct <unaryfunc>) (cons 'nb_hex <unaryfunc>) (cons 'nb_inplace_add <binaryfunc>) (cons 'nb_inplace_subtract <binaryfunc>) (cons 'nb_inplace_multiply <binaryfunc>) (cons 'nb_inplace_divide <binaryfunc>) (cons 'nb_inplace_remainder <binaryfunc>) (cons 'nb_inplace_power <ternaryfunc>) (cons 'nb_inplace_lshift <binaryfunc>) (cons 'nb_inplace_rshift <binaryfunc>) (cons 'nb_inplace_and <binaryfunc>) (cons 'nb_inplace_xor <binaryfunc>) (cons 'nb_inplace_or <binaryfunc>) (cons 'nb_floor_divide <binaryfunc>) (cons 'nb_true_divide <binaryfunc>) (cons 'nb_inplace_floor_divide <binaryfunc>) (cons 'nb_inplace_true_divide <binaryfunc>)))
(define <PyNumberMethods> <c-struct:G320>)
(define-c-struct G321)
(init-c-struct! (c-struct 'G321) (list (cons 'sq_length <inquiry>) (cons 'sq_concat <binaryfunc>) (cons 'sq_repeat <intargfunc>) (cons 'sq_item <intargfunc>) (cons 'sq_slice <intintargfunc>) (cons 'sq_ass_item <intobjargproc>) (cons 'sq_ass_slice <intintobjargproc>) (cons 'sq_contains <objobjproc>) (cons 'sq_inplace_concat <binaryfunc>) (cons 'sq_inplace_repeat <intargfunc>)))
(define <PySequenceMethods> <c-struct:G321>)
(define-c-struct G322)
(init-c-struct! (c-struct 'G322) (list (cons 'mp_length <inquiry>) (cons 'mp_subscript <binaryfunc>) (cons 'mp_ass_subscript <objobjargproc>)))
(define <PyMappingMethods> <c-struct:G322>)
(define-c-struct G323)
(init-c-struct! (c-struct 'G323) (list (cons 'bf_getreadbuffer <getreadbufferproc>) (cons 'bf_getwritebuffer <getwritebufferproc>) (cons 'bf_getsegcount <getsegcountproc>) (cons 'bf_getcharbuffer <getcharbufferproc>)))
(define <PyBufferProcs> <c-struct:G323>)
(define <freefunc> (make-c-func-ptr <c-void> (list (ptr <c-void>)) (list '#f)))
(define <destructor> (make-c-func-ptr <c-void> (list (ptr <PyObject>)) (list '#f)))
(define <printfunc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <FILE>) <c-int>) (list '#f '#f '#f)))
(define <getattrfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>)) (list '#f '#f)))
(define <getattrofunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f)))
(define <setattrfunc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <c-char>) (ptr <PyObject>)) (list '#f '#f '#f)))
(define <setattrofunc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f '#f)))
(define <cmpfunc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f)))
(define <reprfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>)) (list '#f)))
(define <hashfunc> (make-c-func-ptr <c-long> (list (ptr <PyObject>)) (list '#f)))
(define <richcmpfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) <c-int>) (list '#f '#f '#f)))
(define <getiterfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>)) (list '#f)))
(define <iternextfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>)) (list '#f)))
(define <descrgetfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f '#f)))
(define <descrsetfunc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f '#f)))
(define <initproc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f '#f)))
(define <newfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <c-struct:_typeobject>) (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f '#f)))
(define <allocfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <c-struct:_typeobject>) <c-int>) (list '#f '#f)))
(define-c-struct PyMethodDef)
(define-c-struct PyMemberDef)
(define-c-struct PyGetSetDef)
(init-c-struct! (c-struct '_typeobject) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'ob_size <c-int>) (cons 'tp_name (ptr <c-char>)) (cons 'tp_basicsize <c-int>) (cons 'tp_itemsize <c-int>) (cons 'tp_dealloc <destructor>) (cons 'tp_print <printfunc>) (cons 'tp_getattr <getattrfunc>) (cons 'tp_setattr <setattrfunc>) (cons 'tp_compare <cmpfunc>) (cons 'tp_repr <reprfunc>) (cons 'tp_as_number (ptr <PyNumberMethods>)) (cons 'tp_as_sequence (ptr <PySequenceMethods>)) (cons 'tp_as_mapping (ptr <PyMappingMethods>)) (cons 'tp_hash <hashfunc>) (cons 'tp_call <ternaryfunc>) (cons 'tp_str <reprfunc>) (cons 'tp_getattro <getattrofunc>) (cons 'tp_setattro <setattrofunc>) (cons 'tp_as_buffer (ptr <PyBufferProcs>)) (cons 'tp_flags <c-long>) (cons 'tp_doc (ptr <c-char>)) (cons 'tp_traverse <traverseproc>) (cons 'tp_clear <inquiry>) (cons 'tp_richcompare <richcmpfunc>) (cons 'tp_weaklistoffset <c-long>) (cons 'tp_iter <getiterfunc>) (cons 'tp_iternext <iternextfunc>) (cons 'tp_methods (ptr <c-struct:PyMethodDef>)) (cons 'tp_members (ptr <c-struct:PyMemberDef>)) (cons 'tp_getset (ptr <c-struct:PyGetSetDef>)) (cons 'tp_base (ptr <c-struct:_typeobject>)) (cons 'tp_dict (ptr <PyObject>)) (cons 'tp_descr_get <descrgetfunc>) (cons 'tp_descr_set <descrsetfunc>) (cons 'tp_dictoffset <c-long>) (cons 'tp_init <initproc>) (cons 'tp_alloc <allocfunc>) (cons 'tp_new <newfunc>) (cons 'tp_free <freefunc>) (cons 'tp_is_gc <inquiry>) (cons 'tp_bases (ptr <PyObject>)) (cons 'tp_mro (ptr <PyObject>)) (cons 'tp_cache (ptr <PyObject>)) (cons 'tp_subclasses (ptr <PyObject>)) (cons 'tp_weaklist (ptr <PyObject>)) (cons 'tp_del <destructor>)))
(define <PyTypeObject> <c-struct:_typeobject>)
(define-c-struct _heaptypeobject)
(init-c-struct! (c-struct '_heaptypeobject) (list (cons 'type <PyTypeObject>) (cons 'as_number <PyNumberMethods>) (cons 'as_mapping <PyMappingMethods>) (cons 'as_sequence <PySequenceMethods>) (cons 'as_buffer <PyBufferProcs>) (cons 'name (ptr <PyObject>)) (cons 'slots (ptr <PyObject>))))
(define <PyHeapTypeObject> <c-struct:_heaptypeobject>)
(define PyType_IsSubtype (make-c-func 'PyType_IsSubtype <c-int> (list (ptr <PyTypeObject>) (ptr <PyTypeObject>))))
(define PyType_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyType_Type))))
(define PyBaseObject_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyBaseObject_Type))))
(define PySuper_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PySuper_Type))))
(define PyType_Ready (make-c-func 'PyType_Ready <c-int> (list (ptr <PyTypeObject>))))
(define PyType_GenericAlloc (make-c-func 'PyType_GenericAlloc (ptr <PyObject>) (list (ptr <PyTypeObject>) <c-int>)))
(define PyType_GenericNew (make-c-func 'PyType_GenericNew (ptr <PyObject>) (list (ptr <PyTypeObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define _PyType_Lookup (make-c-func '_PyType_Lookup (ptr <PyObject>) (list (ptr <PyTypeObject>) (ptr <PyObject>))))
(define PyObject_Print (make-c-func 'PyObject_Print <c-int> (list (ptr <PyObject>) (ptr <FILE>) <c-int>)))
(define _PyObject_Dump (make-c-func '_PyObject_Dump <c-void> (list (ptr <PyObject>))))
(define PyObject_Repr (make-c-func 'PyObject_Repr (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyObject_Str (make-c-func 'PyObject_Str (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyObject_Unicode (make-c-func 'PyObject_Unicode (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyObject_Compare (make-c-func 'PyObject_Compare <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_RichCompare (make-c-func 'PyObject_RichCompare (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) <c-int>)))
(define PyObject_RichCompareBool (make-c-func 'PyObject_RichCompareBool <c-int> (list (ptr <PyObject>) (ptr <PyObject>) <c-int>)))
(define PyObject_GetAttrString (make-c-func 'PyObject_GetAttrString (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>))))
(define PyObject_SetAttrString (make-c-func 'PyObject_SetAttrString <c-int> (list (ptr <PyObject>) (ptr <c-char>) (ptr <PyObject>))))
(define PyObject_HasAttrString (make-c-func 'PyObject_HasAttrString <c-int> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyObject_GetAttr (make-c-func 'PyObject_GetAttr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_SetAttr (make-c-func 'PyObject_SetAttr <c-int> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_HasAttr (make-c-func 'PyObject_HasAttr <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define _PyObject_GetDictPtr (make-c-func '_PyObject_GetDictPtr (ptr (ptr <PyObject>)) (list (ptr <PyObject>))))
(define PyObject_SelfIter (make-c-func 'PyObject_SelfIter (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyObject_GenericGetAttr (make-c-func 'PyObject_GenericGetAttr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_GenericSetAttr (make-c-func 'PyObject_GenericSetAttr <c-int> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_Hash (make-c-func 'PyObject_Hash <c-long> (list (ptr <PyObject>))))
(define PyObject_IsTrue (make-c-func 'PyObject_IsTrue <c-int> (list (ptr <PyObject>))))
(define PyObject_Not (make-c-func 'PyObject_Not <c-int> (list (ptr <PyObject>))))
(define PyCallable_Check (make-c-func 'PyCallable_Check <c-int> (list (ptr <PyObject>))))
(define PyNumber_Coerce (make-c-func 'PyNumber_Coerce <c-int> (list (ptr (ptr <PyObject>)) (ptr (ptr <PyObject>)))))
(define PyNumber_CoerceEx (make-c-func 'PyNumber_CoerceEx <c-int> (list (ptr (ptr <PyObject>)) (ptr (ptr <PyObject>)))))
(define PyObject_ClearWeakRefs (make-c-func 'PyObject_ClearWeakRefs <c-void> (list (ptr <PyObject>))))
(define _PyObject_SlotCompare (make-c-func '_PyObject_SlotCompare <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_Dir (make-c-func 'PyObject_Dir (ptr <PyObject>) (list (ptr <PyObject>))))
(define Py_ReprEnter (make-c-func 'Py_ReprEnter <c-int> (list (ptr <PyObject>))))
(define Py_ReprLeave (make-c-func 'Py_ReprLeave <c-void> (list (ptr <PyObject>))))
(define _Py_HashDouble (make-c-func '_Py_HashDouble <c-long> (list <c-double>)))
(define _Py_HashPointer (make-c-func '_Py_HashPointer <c-long> (list (ptr <c-void>))))
(define _Py_NoneStruct (deref (cast (ptr <PyObject>) (c-lookup-symbol '_Py_NoneStruct))))
(define _Py_NotImplementedStruct (deref (cast (ptr <PyObject>) (c-lookup-symbol '_Py_NotImplementedStruct))))
(define _PyTrash_deposit_object (make-c-func '_PyTrash_deposit_object <c-void> (list (ptr <PyObject>))))
(define _PyTrash_destroy_chain (make-c-func '_PyTrash_destroy_chain <c-void> (list)))
(define _PyTrash_delete_nesting (deref (cast (ptr <c-int>) (c-lookup-symbol '_PyTrash_delete_nesting))))
(define _PyTrash_delete_later (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol '_PyTrash_delete_later))))
(define PyObject_Malloc (make-c-func 'PyObject_Malloc (ptr <c-void>) (list <size_t>)))
(define PyObject_Realloc (make-c-func 'PyObject_Realloc (ptr <c-void>) (list (ptr <c-void>) <size_t>)))
(define PyObject_Free (make-c-func 'PyObject_Free <c-void> (list (ptr <c-void>))))
(define PyObject_Init (make-c-func 'PyObject_Init (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyTypeObject>))))
(define PyObject_InitVar (make-c-func 'PyObject_InitVar (ptr <PyVarObject>) (list (ptr <PyVarObject>) (ptr <PyTypeObject>) <c-int>)))
(define _PyObject_New (make-c-func '_PyObject_New (ptr <PyObject>) (list (ptr <PyTypeObject>))))
(define _PyObject_NewVar (make-c-func '_PyObject_NewVar (ptr <PyVarObject>) (list (ptr <PyTypeObject>) <c-int>)))
(define PyGC_Collect (make-c-func 'PyGC_Collect <c-long> (list)))
(define _PyObject_GC_Resize (make-c-func '_PyObject_GC_Resize (ptr <PyVarObject>) (list (ptr <PyVarObject>) <c-int>)))
(define-c-union _gc_head)
(define-c-struct G324)
(init-c-struct! (c-struct 'G324) (list (cons 'gc_next (ptr <c-union:_gc_head>)) (cons 'gc_prev (ptr <c-union:_gc_head>)) (cons 'gc_refs <c-int>)))
(init-c-union! (c-union '_gc_head) (list (cons 'gc <c-struct:G324>) (cons 'dummy <c-longdouble>)))
(define <PyGC_Head> <c-union:_gc_head>)
(define _PyGC_generation0 (deref (cast (ptr (ptr <PyGC_Head>)) (c-lookup-symbol '_PyGC_generation0))))
(define _PyObject_GC_Malloc (make-c-func '_PyObject_GC_Malloc (ptr <PyObject>) (list <size_t>)))
(define _PyObject_GC_New (make-c-func '_PyObject_GC_New (ptr <PyObject>) (list (ptr <PyTypeObject>))))
(define _PyObject_GC_NewVar (make-c-func '_PyObject_GC_NewVar (ptr <PyVarObject>) (list (ptr <PyTypeObject>) <c-int>)))
(define PyObject_GC_Track (make-c-func 'PyObject_GC_Track <c-void> (list (ptr <c-void>))))
(define PyObject_GC_UnTrack (make-c-func 'PyObject_GC_UnTrack <c-void> (list (ptr <c-void>))))
(define PyObject_GC_Del (make-c-func 'PyObject_GC_Del <c-void> (list (ptr <c-void>))))
(define Py_DebugFlag (deref (cast (ptr <c-int>) (c-lookup-symbol 'Py_DebugFlag))))
(define Py_VerboseFlag (deref (cast (ptr <c-int>) (c-lookup-symbol 'Py_VerboseFlag))))
(define Py_InteractiveFlag (deref (cast (ptr <c-int>) (c-lookup-symbol 'Py_InteractiveFlag))))
(define Py_OptimizeFlag (deref (cast (ptr <c-int>) (c-lookup-symbol 'Py_OptimizeFlag))))
(define Py_NoSiteFlag (deref (cast (ptr <c-int>) (c-lookup-symbol 'Py_NoSiteFlag))))
(define Py_UseClassExceptionsFlag (deref (cast (ptr <c-int>) (c-lookup-symbol 'Py_UseClassExceptionsFlag))))
(define Py_FrozenFlag (deref (cast (ptr <c-int>) (c-lookup-symbol 'Py_FrozenFlag))))
(define Py_TabcheckFlag (deref (cast (ptr <c-int>) (c-lookup-symbol 'Py_TabcheckFlag))))
(define Py_UnicodeFlag (deref (cast (ptr <c-int>) (c-lookup-symbol 'Py_UnicodeFlag))))
(define Py_IgnoreEnvironmentFlag (deref (cast (ptr <c-int>) (c-lookup-symbol 'Py_IgnoreEnvironmentFlag))))
(define Py_DivisionWarningFlag (deref (cast (ptr <c-int>) (c-lookup-symbol 'Py_DivisionWarningFlag))))
(define _Py_QnewFlag (deref (cast (ptr <c-int>) (c-lookup-symbol '_Py_QnewFlag))))
(define Py_FatalError (make-c-func 'Py_FatalError <c-void> (list (ptr <c-char>))))
(define <wint_t> <__darwin_wint_t>)
(define-c-struct G325)
(init-c-struct! (c-struct 'G325) (list (cons '__min <__darwin_rune_t>) (cons '__max <__darwin_rune_t>) (cons '__map <__darwin_rune_t>) (cons '__types (ptr <__uint32_t>))))
(define <_RuneEntry> <c-struct:G325>)
(define-c-struct G326)
(init-c-struct! (c-struct 'G326) (list (cons '__nranges <c-int>) (cons '__ranges (ptr <_RuneEntry>))))
(define <_RuneRange> <c-struct:G326>)
(define-c-struct G327)
(init-c-struct! (c-struct 'G327) (list (cons '__magic (make-c-array <c-char> (x->integer 8))) (cons '__encoding (make-c-array <c-char> (x->integer 32))) (cons '__sgetrune (make-c-func-ptr <__darwin_rune_t> (list (ptr <c-char>) <__darwin_size_t> (ptr (ptr <c-char>))) (list '#f '#f '#f))) (cons '__sputrune (make-c-func-ptr <c-int> (list <__darwin_rune_t> (ptr <c-char>) <__darwin_size_t> (ptr (ptr <c-char>))) (list '#f '#f '#f '#f))) (cons '__invalid_rune <__darwin_rune_t>) (cons '__runetype (make-c-array <__uint32_t> (x->integer (c-<< (cast <integer> 1) (cast <integer> 8))))) (cons '__maplower (make-c-array <__darwin_rune_t> (x->integer (c-<< (cast <integer> 1) (cast <integer> 8))))) (cons '__mapupper (make-c-array <__darwin_rune_t> (x->integer (c-<< (cast <integer> 1) (cast <integer> 8))))) (cons '__runetype_ext <_RuneRange>) (cons '__maplower_ext <_RuneRange>) (cons '__mapupper_ext <_RuneRange>) (cons '__variable (ptr <c-void>)) (cons '__variable_len <c-int>)))
(define <_RuneLocale> <c-struct:G327>)
(define _DefaultRuneLocale (deref (cast (ptr <_RuneLocale>) (c-lookup-symbol '_DefaultRuneLocale))))
(define _CurrentRuneLocale (deref (cast (ptr (ptr <_RuneLocale>)) (c-lookup-symbol '_CurrentRuneLocale))))
(define isalnum (make-c-func 'isalnum <c-int> (list <c-int>)))
(define isalpha (make-c-func 'isalpha <c-int> (list <c-int>)))
(define isblank (make-c-func 'isblank <c-int> (list <c-int>)))
(define iscntrl (make-c-func 'iscntrl <c-int> (list <c-int>)))
(define isdigit (make-c-func 'isdigit <c-int> (list <c-int>)))
(define isgraph (make-c-func 'isgraph <c-int> (list <c-int>)))
(define islower (make-c-func 'islower <c-int> (list <c-int>)))
(define isprint (make-c-func 'isprint <c-int> (list <c-int>)))
(define ispunct (make-c-func 'ispunct <c-int> (list <c-int>)))
(define isspace (make-c-func 'isspace <c-int> (list <c-int>)))
(define isupper (make-c-func 'isupper <c-int> (list <c-int>)))
(define isxdigit (make-c-func 'isxdigit <c-int> (list <c-int>)))
(define tolower (make-c-func 'tolower <c-int> (list <c-int>)))
(define toupper (make-c-func 'toupper <c-int> (list <c-int>)))
(define isascii (make-c-func 'isascii <c-int> (list <c-int>)))
(define toascii (make-c-func 'toascii <c-int> (list <c-int>)))
(define digittoint (make-c-func 'digittoint <c-int> (list <c-int>)))
(define ishexnumber (make-c-func 'ishexnumber <c-int> (list <c-int>)))
(define isideogram (make-c-func 'isideogram <c-int> (list <c-int>)))
(define isnumber (make-c-func 'isnumber <c-int> (list <c-int>)))
(define isphonogram (make-c-func 'isphonogram <c-int> (list <c-int>)))
(define isrune (make-c-func 'isrune <c-int> (list <c-int>)))
(define isspecial (make-c-func 'isspecial <c-int> (list <c-int>)))
(define ___runetype (make-c-func '___runetype <c-ulong> (list <__darwin_ct_rune_t>)))
(define ___tolower (make-c-func '___tolower <__darwin_ct_rune_t> (list <__darwin_ct_rune_t>)))
(define ___toupper (make-c-func '___toupper <__darwin_ct_rune_t> (list <__darwin_ct_rune_t>)))
(define __maskrune (make-c-func '__maskrune <c-int> (list <__darwin_ct_rune_t> <c-ulong>)))
(define (__istype . %args) (scm-cast (cast <c-int> (let ((_c (cast <__darwin_ct_rune_t> (list-ref %args 0))) (_f (cast <c-ulong> (list-ref %args 1)))) (call/cc (lambda (%return) (begin (%return (c-if (cast <integer> (c-if (cast <integer> (c-if (cast <real> (c-== (cast <real> (logand (cast <integer> (identity _c)) (cast <integer> (lognot (cast <integer> 127))))) (cast <real> 0))) (logand (cast <integer> (ref (raw-ref _DefaultRuneLocale '__runetype) (cast <integer> _c))) (cast <integer> _f)) (__maskrune _c _f))) 0 1)) 0 1)))))))))
(define (__isctype . %args) (scm-cast (cast <__darwin_ct_rune_t> (let ((_c (cast <__darwin_ct_rune_t> (list-ref %args 0))) (_f (cast <c-ulong> (list-ref %args 1)))) (call/cc (lambda (%return) (begin (%return (c-if (cast <real> (c-or (cast <real> (c-< (cast <real> _c) (cast <real> 0))) (c->= (cast <real> _c) (cast <real> (c-<< (cast <integer> 1) (cast <integer> 8)))))) 0 (c-if (cast <integer> (c-if (cast <integer> (logand (cast <integer> (ref (raw-ref _DefaultRuneLocale '__runetype) (cast <integer> _c))) (cast <integer> _f))) 0 1)) 0 1))))))))))
(define __toupper (make-c-func '__toupper <__darwin_ct_rune_t> (list <__darwin_ct_rune_t>)))
(define __tolower (make-c-func '__tolower <__darwin_ct_rune_t> (list <__darwin_ct_rune_t>)))
(define (__wcwidth . %args) (scm-cast (cast <c-int> (let ((_c (cast <__darwin_ct_rune_t> (list-ref %args 0)))) (call/cc (lambda (%return) (let* ((_x (make <c-uint>))) (c-if (cast <real> (c-== (cast <real> _c) (cast <real> 0))) (%return 0) #t) (let ((%v (cast <c-uint> (__maskrune _c (logior (cast <integer> 3758096384) (cast <integer> 262144)))))) (set! (ref _x) %v) %v) (c-if (cast <real> (c-!= (cast <real> (logand (cast <integer> _x) (cast <integer> 3758096384))) (cast <real> 0))) (%return (c->> (cast <integer> (logand (cast <integer> _x) (cast <integer> 3758096384))) (cast <integer> 30))) #t) (%return (c-if (cast <real> (c-!= (cast <real> (logand (cast <integer> _x) (cast <integer> 262144))) (cast <real> 0))) 1 (- (cast <real> 1)))))))))))
(define <mbstate_t> <__darwin_mbstate_t>)
(define <__gnuc_va_list> (ptr <c-void>))
(define <wctype_t> <__darwin_wctype_t>)
(define iswalnum (make-c-func 'iswalnum <c-int> (list <wint_t>)))
(define iswalpha (make-c-func 'iswalpha <c-int> (list <wint_t>)))
(define iswcntrl (make-c-func 'iswcntrl <c-int> (list <wint_t>)))
(define iswctype (make-c-func 'iswctype <c-int> (list <wint_t> <wctype_t>)))
(define iswdigit (make-c-func 'iswdigit <c-int> (list <wint_t>)))
(define iswgraph (make-c-func 'iswgraph <c-int> (list <wint_t>)))
(define iswlower (make-c-func 'iswlower <c-int> (list <wint_t>)))
(define iswprint (make-c-func 'iswprint <c-int> (list <wint_t>)))
(define iswpunct (make-c-func 'iswpunct <c-int> (list <wint_t>)))
(define iswspace (make-c-func 'iswspace <c-int> (list <wint_t>)))
(define iswupper (make-c-func 'iswupper <c-int> (list <wint_t>)))
(define iswxdigit (make-c-func 'iswxdigit <c-int> (list <wint_t>)))
(define towlower (make-c-func 'towlower <wint_t> (list <wint_t>)))
(define towupper (make-c-func 'towupper <wint_t> (list <wint_t>)))
(define wctype (make-c-func 'wctype <wctype_t> (list (ptr <c-char>))))
(define btowc (make-c-func 'btowc <wint_t> (list <c-int>)))
(define fgetwc (make-c-func 'fgetwc <wint_t> (list (ptr <FILE>))))
(define fgetws (make-c-func 'fgetws (ptr <wchar_t>) (list (ptr <wchar_t>) <c-int> (ptr <FILE>))))
(define fputwc (make-c-func 'fputwc <wint_t> (list <wchar_t> (ptr <FILE>))))
(define fputws (make-c-func 'fputws <c-int> (list (ptr <wchar_t>) (ptr <FILE>))))
(define fwide (make-c-func 'fwide <c-int> (list (ptr <FILE>) <c-int>)))
(define fwprintf (make-c-func-vaargs 'fwprintf <c-int> (list (ptr <FILE>) (ptr <wchar_t>))))
(define fwscanf (make-c-func-vaargs 'fwscanf <c-int> (list (ptr <FILE>) (ptr <wchar_t>))))
(define getwc (make-c-func 'getwc <wint_t> (list (ptr <FILE>))))
(define getwchar (make-c-func 'getwchar <wint_t> (list)))
(define mbrlen (make-c-func 'mbrlen <size_t> (list (ptr <c-char>) <size_t> (ptr <mbstate_t>))))
(define mbrtowc (make-c-func 'mbrtowc <size_t> (list (ptr <wchar_t>) (ptr <c-char>) <size_t> (ptr <mbstate_t>))))
(define mbsinit (make-c-func 'mbsinit <c-int> (list (ptr <mbstate_t>))))
(define mbsrtowcs (make-c-func 'mbsrtowcs <size_t> (list (ptr <wchar_t>) (ptr (ptr <c-char>)) <size_t> (ptr <mbstate_t>))))
(define putwc (make-c-func 'putwc <wint_t> (list <wchar_t> (ptr <FILE>))))
(define putwchar (make-c-func 'putwchar <wint_t> (list <wchar_t>)))
(define swprintf (make-c-func-vaargs 'swprintf <c-int> (list (ptr <wchar_t>) <size_t> (ptr <wchar_t>))))
(define swscanf (make-c-func-vaargs 'swscanf <c-int> (list (ptr <wchar_t>) (ptr <wchar_t>))))
(define ungetwc (make-c-func 'ungetwc <wint_t> (list <wint_t> (ptr <FILE>))))
(define vfwprintf (make-c-func 'vfwprintf <c-int> (list (ptr <FILE>) (ptr <wchar_t>) <__darwin_va_list>)))
(define vswprintf (make-c-func 'vswprintf <c-int> (list (ptr <wchar_t>) <size_t> (ptr <wchar_t>) <__darwin_va_list>)))
(define vwprintf (make-c-func 'vwprintf <c-int> (list (ptr <wchar_t>) <__darwin_va_list>)))
(define wcrtomb (make-c-func 'wcrtomb <size_t> (list (ptr <c-char>) <wchar_t> (ptr <mbstate_t>))))
(define wcscat (make-c-func 'wcscat (ptr <wchar_t>) (list (ptr <wchar_t>) (ptr <wchar_t>))))
(define wcschr (make-c-func 'wcschr (ptr <wchar_t>) (list (ptr <wchar_t>) <wchar_t>)))
(define wcscmp (make-c-func 'wcscmp <c-int> (list (ptr <wchar_t>) (ptr <wchar_t>))))
(define wcscoll (make-c-func 'wcscoll <c-int> (list (ptr <wchar_t>) (ptr <wchar_t>))))
(define wcscpy (make-c-func 'wcscpy (ptr <wchar_t>) (list (ptr <wchar_t>) (ptr <wchar_t>))))
(define wcscspn (make-c-func 'wcscspn <size_t> (list (ptr <wchar_t>) (ptr <wchar_t>))))
(define wcsftime (make-c-func 'wcsftime <size_t> (list (ptr <wchar_t>) <size_t> (ptr <wchar_t>) (ptr <c-struct:tm>))))
(define wcslen (make-c-func 'wcslen <size_t> (list (ptr <wchar_t>))))
(define wcsncat (make-c-func 'wcsncat (ptr <wchar_t>) (list (ptr <wchar_t>) (ptr <wchar_t>) <size_t>)))
(define wcsncmp (make-c-func 'wcsncmp <c-int> (list (ptr <wchar_t>) (ptr <wchar_t>) <size_t>)))
(define wcsncpy (make-c-func 'wcsncpy (ptr <wchar_t>) (list (ptr <wchar_t>) (ptr <wchar_t>) <size_t>)))
(define wcspbrk (make-c-func 'wcspbrk (ptr <wchar_t>) (list (ptr <wchar_t>) (ptr <wchar_t>))))
(define wcsrchr (make-c-func 'wcsrchr (ptr <wchar_t>) (list (ptr <wchar_t>) <wchar_t>)))
(define wcsrtombs (make-c-func 'wcsrtombs <size_t> (list (ptr <c-char>) (ptr (ptr <wchar_t>)) <size_t> (ptr <mbstate_t>))))
(define wcsspn (make-c-func 'wcsspn <size_t> (list (ptr <wchar_t>) (ptr <wchar_t>))))
(define wcsstr (make-c-func 'wcsstr (ptr <wchar_t>) (list (ptr <wchar_t>) (ptr <wchar_t>))))
(define wcsxfrm (make-c-func 'wcsxfrm <size_t> (list (ptr <wchar_t>) (ptr <wchar_t>) <size_t>)))
(define wctob (make-c-func 'wctob <c-int> (list <wint_t>)))
(define wcstod (make-c-func 'wcstod <c-double> (list (ptr <wchar_t>) (ptr (ptr <wchar_t>)))))
(define wcstok (make-c-func 'wcstok (ptr <wchar_t>) (list (ptr <wchar_t>) (ptr <wchar_t>) (ptr (ptr <wchar_t>)))))
(define wcstol (make-c-func 'wcstol <c-long> (list (ptr <wchar_t>) (ptr (ptr <wchar_t>)) <c-int>)))
(define wcstoul (make-c-func 'wcstoul <c-ulong> (list (ptr <wchar_t>) (ptr (ptr <wchar_t>)) <c-int>)))
(define wmemchr (make-c-func 'wmemchr (ptr <wchar_t>) (list (ptr <wchar_t>) <wchar_t> <size_t>)))
(define wmemcmp (make-c-func 'wmemcmp <c-int> (list (ptr <wchar_t>) (ptr <wchar_t>) <size_t>)))
(define wmemcpy (make-c-func 'wmemcpy (ptr <wchar_t>) (list (ptr <wchar_t>) (ptr <wchar_t>) <size_t>)))
(define wmemmove (make-c-func 'wmemmove (ptr <wchar_t>) (list (ptr <wchar_t>) (ptr <wchar_t>) <size_t>)))
(define wmemset (make-c-func 'wmemset (ptr <wchar_t>) (list (ptr <wchar_t>) <wchar_t> <size_t>)))
(define wprintf (make-c-func-vaargs 'wprintf <c-int> (list (ptr <wchar_t>))))
(define wscanf (make-c-func-vaargs 'wscanf <c-int> (list (ptr <wchar_t>))))
(define vfwscanf (make-c-func 'vfwscanf <c-int> (list (ptr <FILE>) (ptr <wchar_t>) <__darwin_va_list>)))
(define vswscanf (make-c-func 'vswscanf <c-int> (list (ptr <wchar_t>) (ptr <wchar_t>) <__darwin_va_list>)))
(define vwscanf (make-c-func 'vwscanf <c-int> (list (ptr <wchar_t>) <__darwin_va_list>)))
(define wcstof (make-c-func 'wcstof <c-float> (list (ptr <wchar_t>) (ptr (ptr <wchar_t>)))))
(define wcstold (make-c-func 'wcstold <c-longdouble> (list (ptr <wchar_t>) (ptr (ptr <wchar_t>)))))
(define wcstoll (make-c-func 'wcstoll <c-longlong> (list (ptr <wchar_t>) (ptr (ptr <wchar_t>)) <c-int>)))
(define wcstoull (make-c-func 'wcstoull <c-ulonglong> (list (ptr <wchar_t>) (ptr (ptr <wchar_t>)) <c-int>)))
(define wcswidth (make-c-func 'wcswidth <c-int> (list (ptr <wchar_t>) <size_t>)))
(define wcwidth (make-c-func 'wcwidth <c-int> (list <wchar_t>)))
(define mbsnrtowcs (make-c-func 'mbsnrtowcs <size_t> (list (ptr <wchar_t>) (ptr (ptr <c-char>)) <size_t> <size_t> (ptr <mbstate_t>))))
(define wcslcat (make-c-func 'wcslcat <size_t> (list (ptr <wchar_t>) (ptr <wchar_t>) <size_t>)))
(define wcslcpy (make-c-func 'wcslcpy <size_t> (list (ptr <wchar_t>) (ptr <wchar_t>) <size_t>)))
(define wcsnrtombs (make-c-func 'wcsnrtombs <size_t> (list (ptr <c-char>) (ptr (ptr <wchar_t>)) <size_t> <size_t> (ptr <mbstate_t>))))
(define <Py_UCS4> <c-uint>)
(define <Py_UNICODE> <c-ushort>)
(define-c-struct G328)
(init-c-struct! (c-struct 'G328) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'length <c-int>) (cons 'str (ptr <Py_UNICODE>)) (cons 'hash <c-long>) (cons 'defenc (ptr <PyObject>))))
(define <PyUnicodeObject> <c-struct:G328>)
(define PyUnicode_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyUnicode_Type))))
(define PyUnicodeUCS2_FromUnicode (make-c-func 'PyUnicodeUCS2_FromUnicode (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int>)))
(define PyUnicodeUCS2_AsUnicode (make-c-func 'PyUnicodeUCS2_AsUnicode (ptr <Py_UNICODE>) (list (ptr <PyObject>))))
(define PyUnicodeUCS2_GetSize (make-c-func 'PyUnicodeUCS2_GetSize <c-int> (list (ptr <PyObject>))))
(define PyUnicodeUCS2_GetMax (make-c-func 'PyUnicodeUCS2_GetMax <Py_UNICODE> (list)))
(define PyUnicodeUCS2_Resize (make-c-func 'PyUnicodeUCS2_Resize <c-int> (list (ptr (ptr <PyObject>)) <c-int>)))
(define PyUnicodeUCS2_FromEncodedObject (make-c-func 'PyUnicodeUCS2_FromEncodedObject (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>))))
(define PyUnicodeUCS2_FromObject (make-c-func 'PyUnicodeUCS2_FromObject (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeUCS2_FromWideChar (make-c-func 'PyUnicodeUCS2_FromWideChar (ptr <PyObject>) (list (ptr <wchar_t>) <c-int>)))
(define PyUnicodeUCS2_AsWideChar (make-c-func 'PyUnicodeUCS2_AsWideChar <c-int> (list (ptr <PyUnicodeObject>) (ptr <wchar_t>) <c-int>)))
(define PyUnicodeUCS2_FromOrdinal (make-c-func 'PyUnicodeUCS2_FromOrdinal (ptr <PyObject>) (list <c-int>)))
(define _PyUnicodeUCS2_AsDefaultEncodedString (make-c-func '_PyUnicodeUCS2_AsDefaultEncodedString (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>))))
(define PyUnicodeUCS2_GetDefaultEncoding (make-c-func 'PyUnicodeUCS2_GetDefaultEncoding (ptr <c-char>) (list)))
(define PyUnicodeUCS2_SetDefaultEncoding (make-c-func 'PyUnicodeUCS2_SetDefaultEncoding <c-int> (list (ptr <c-char>))))
(define PyUnicodeUCS2_Decode (make-c-func 'PyUnicodeUCS2_Decode (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <c-char>) (ptr <c-char>))))
(define PyUnicodeUCS2_Encode (make-c-func 'PyUnicodeUCS2_Encode (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int> (ptr <c-char>) (ptr <c-char>))))
(define PyUnicodeUCS2_AsEncodedString (make-c-func 'PyUnicodeUCS2_AsEncodedString (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>))))
(define PyUnicode_DecodeUTF7 (make-c-func 'PyUnicode_DecodeUTF7 (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <c-char>))))
(define PyUnicode_EncodeUTF7 (make-c-func 'PyUnicode_EncodeUTF7 (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int> <c-int> <c-int> (ptr <c-char>))))
(define PyUnicodeUCS2_DecodeUTF8 (make-c-func 'PyUnicodeUCS2_DecodeUTF8 (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <c-char>))))
(define PyUnicodeUCS2_AsUTF8String (make-c-func 'PyUnicodeUCS2_AsUTF8String (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeUCS2_EncodeUTF8 (make-c-func 'PyUnicodeUCS2_EncodeUTF8 (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int> (ptr <c-char>))))
(define PyUnicodeUCS2_DecodeUTF16 (make-c-func 'PyUnicodeUCS2_DecodeUTF16 (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <c-char>) (ptr <c-int>))))
(define PyUnicodeUCS2_AsUTF16String (make-c-func 'PyUnicodeUCS2_AsUTF16String (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeUCS2_EncodeUTF16 (make-c-func 'PyUnicodeUCS2_EncodeUTF16 (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int> (ptr <c-char>) <c-int>)))
(define PyUnicodeUCS2_DecodeUnicodeEscape (make-c-func 'PyUnicodeUCS2_DecodeUnicodeEscape (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <c-char>))))
(define PyUnicodeUCS2_AsUnicodeEscapeString (make-c-func 'PyUnicodeUCS2_AsUnicodeEscapeString (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeUCS2_EncodeUnicodeEscape (make-c-func 'PyUnicodeUCS2_EncodeUnicodeEscape (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int>)))
(define PyUnicodeUCS2_DecodeRawUnicodeEscape (make-c-func 'PyUnicodeUCS2_DecodeRawUnicodeEscape (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <c-char>))))
(define PyUnicodeUCS2_AsRawUnicodeEscapeString (make-c-func 'PyUnicodeUCS2_AsRawUnicodeEscapeString (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeUCS2_EncodeRawUnicodeEscape (make-c-func 'PyUnicodeUCS2_EncodeRawUnicodeEscape (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int>)))
(define PyUnicodeUCS2_DecodeLatin1 (make-c-func 'PyUnicodeUCS2_DecodeLatin1 (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <c-char>))))
(define PyUnicodeUCS2_AsLatin1String (make-c-func 'PyUnicodeUCS2_AsLatin1String (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeUCS2_EncodeLatin1 (make-c-func 'PyUnicodeUCS2_EncodeLatin1 (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int> (ptr <c-char>))))
(define PyUnicodeUCS2_DecodeASCII (make-c-func 'PyUnicodeUCS2_DecodeASCII (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <c-char>))))
(define PyUnicodeUCS2_AsASCIIString (make-c-func 'PyUnicodeUCS2_AsASCIIString (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeUCS2_EncodeASCII (make-c-func 'PyUnicodeUCS2_EncodeASCII (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int> (ptr <c-char>))))
(define PyUnicodeUCS2_DecodeCharmap (make-c-func 'PyUnicodeUCS2_DecodeCharmap (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <PyObject>) (ptr <c-char>))))
(define PyUnicodeUCS2_AsCharmapString (make-c-func 'PyUnicodeUCS2_AsCharmapString (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyUnicodeUCS2_EncodeCharmap (make-c-func 'PyUnicodeUCS2_EncodeCharmap (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int> (ptr <PyObject>) (ptr <c-char>))))
(define PyUnicodeUCS2_TranslateCharmap (make-c-func 'PyUnicodeUCS2_TranslateCharmap (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int> (ptr <PyObject>) (ptr <c-char>))))
(define PyUnicodeUCS2_EncodeDecimal (make-c-func 'PyUnicodeUCS2_EncodeDecimal <c-int> (list (ptr <Py_UNICODE>) <c-int> (ptr <c-char>) (ptr <c-char>))))
(define PyUnicodeUCS2_Concat (make-c-func 'PyUnicodeUCS2_Concat (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyUnicodeUCS2_Split (make-c-func 'PyUnicodeUCS2_Split (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) <c-int>)))
(define PyUnicodeUCS2_Splitlines (make-c-func 'PyUnicodeUCS2_Splitlines (ptr <PyObject>) (list (ptr <PyObject>) <c-int>)))
(define PyUnicodeUCS2_Translate (make-c-func 'PyUnicodeUCS2_Translate (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <c-char>))))
(define PyUnicodeUCS2_Join (make-c-func 'PyUnicodeUCS2_Join (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyUnicodeUCS2_Tailmatch (make-c-func 'PyUnicodeUCS2_Tailmatch <c-int> (list (ptr <PyObject>) (ptr <PyObject>) <c-int> <c-int> <c-int>)))
(define PyUnicodeUCS2_Find (make-c-func 'PyUnicodeUCS2_Find <c-int> (list (ptr <PyObject>) (ptr <PyObject>) <c-int> <c-int> <c-int>)))
(define PyUnicodeUCS2_Count (make-c-func 'PyUnicodeUCS2_Count <c-int> (list (ptr <PyObject>) (ptr <PyObject>) <c-int> <c-int>)))
(define PyUnicodeUCS2_Replace (make-c-func 'PyUnicodeUCS2_Replace (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>) <c-int>)))
(define PyUnicodeUCS2_Compare (make-c-func 'PyUnicodeUCS2_Compare <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyUnicodeUCS2_Format (make-c-func 'PyUnicodeUCS2_Format (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyUnicodeUCS2_Contains (make-c-func 'PyUnicodeUCS2_Contains <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define _PyUnicode_XStrip (make-c-func '_PyUnicode_XStrip (ptr <PyObject>) (list (ptr <PyUnicodeObject>) <c-int> (ptr <PyObject>))))
(define _PyUnicodeUCS2_IsLowercase (make-c-func '_PyUnicodeUCS2_IsLowercase <c-int> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_IsUppercase (make-c-func '_PyUnicodeUCS2_IsUppercase <c-int> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_IsTitlecase (make-c-func '_PyUnicodeUCS2_IsTitlecase <c-int> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_IsWhitespace (make-c-func '_PyUnicodeUCS2_IsWhitespace <c-int> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_IsLinebreak (make-c-func '_PyUnicodeUCS2_IsLinebreak <c-int> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_ToLowercase (make-c-func '_PyUnicodeUCS2_ToLowercase <Py_UNICODE> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_ToUppercase (make-c-func '_PyUnicodeUCS2_ToUppercase <Py_UNICODE> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_ToTitlecase (make-c-func '_PyUnicodeUCS2_ToTitlecase <Py_UNICODE> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_ToDecimalDigit (make-c-func '_PyUnicodeUCS2_ToDecimalDigit <c-int> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_ToDigit (make-c-func '_PyUnicodeUCS2_ToDigit <c-int> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_ToNumeric (make-c-func '_PyUnicodeUCS2_ToNumeric <c-double> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_IsDecimalDigit (make-c-func '_PyUnicodeUCS2_IsDecimalDigit <c-int> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_IsDigit (make-c-func '_PyUnicodeUCS2_IsDigit <c-int> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_IsNumeric (make-c-func '_PyUnicodeUCS2_IsNumeric <c-int> (list <Py_UNICODE>)))
(define _PyUnicodeUCS2_IsAlpha (make-c-func '_PyUnicodeUCS2_IsAlpha <c-int> (list <Py_UNICODE>)))
(define-c-struct G329)
(init-c-struct! (c-struct 'G329) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'ob_ival <c-long>)))
(define <PyIntObject> <c-struct:G329>)
(define PyInt_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyInt_Type))))
(define PyInt_FromString (make-c-func 'PyInt_FromString (ptr <PyObject>) (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define PyInt_FromUnicode (make-c-func 'PyInt_FromUnicode (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int> <c-int>)))
(define PyInt_FromLong (make-c-func 'PyInt_FromLong (ptr <PyObject>) (list <c-long>)))
(define PyInt_AsLong (make-c-func 'PyInt_AsLong <c-long> (list (ptr <PyObject>))))
(define PyInt_AsUnsignedLongMask (make-c-func 'PyInt_AsUnsignedLongMask <c-ulong> (list (ptr <PyObject>))))
(define PyInt_AsUnsignedLongLongMask (make-c-func 'PyInt_AsUnsignedLongLongMask <c-ulonglong> (list (ptr <PyObject>))))
(define PyInt_GetMax (make-c-func 'PyInt_GetMax <c-long> (list)))
(define PyOS_strtoul (make-c-func 'PyOS_strtoul <c-ulong> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define PyOS_strtol (make-c-func 'PyOS_strtol <c-long> (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define <PyBoolObject> <PyIntObject>)
(define PyBool_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyBool_Type))))
(define _Py_ZeroStruct (deref (cast (ptr <PyIntObject>) (c-lookup-symbol '_Py_ZeroStruct))))
(define _Py_TrueStruct (deref (cast (ptr <PyIntObject>) (c-lookup-symbol '_Py_TrueStruct))))
(define PyBool_FromLong (make-c-func 'PyBool_FromLong (ptr <PyObject>) (list <c-long>)))
(define-c-struct _longobject)
(define <PyLongObject> <c-struct:_longobject>)
(define PyLong_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyLong_Type))))
(define PyLong_FromLong (make-c-func 'PyLong_FromLong (ptr <PyObject>) (list <c-long>)))
(define PyLong_FromUnsignedLong (make-c-func 'PyLong_FromUnsignedLong (ptr <PyObject>) (list <c-ulong>)))
(define PyLong_FromDouble (make-c-func 'PyLong_FromDouble (ptr <PyObject>) (list <c-double>)))
(define PyLong_AsLong (make-c-func 'PyLong_AsLong <c-long> (list (ptr <PyObject>))))
(define PyLong_AsUnsignedLong (make-c-func 'PyLong_AsUnsignedLong <c-ulong> (list (ptr <PyObject>))))
(define PyLong_AsUnsignedLongMask (make-c-func 'PyLong_AsUnsignedLongMask <c-ulong> (list (ptr <PyObject>))))
(define _PyLong_AsScaledDouble (make-c-func '_PyLong_AsScaledDouble <c-double> (list (ptr <PyObject>) (ptr <c-int>))))
(define PyLong_AsDouble (make-c-func 'PyLong_AsDouble <c-double> (list (ptr <PyObject>))))
(define PyLong_FromVoidPtr (make-c-func 'PyLong_FromVoidPtr (ptr <PyObject>) (list (ptr <c-void>))))
(define PyLong_AsVoidPtr (make-c-func 'PyLong_AsVoidPtr (ptr <c-void>) (list (ptr <PyObject>))))
(define PyLong_FromLongLong (make-c-func 'PyLong_FromLongLong (ptr <PyObject>) (list <c-longlong>)))
(define PyLong_FromUnsignedLongLong (make-c-func 'PyLong_FromUnsignedLongLong (ptr <PyObject>) (list <c-ulonglong>)))
(define PyLong_AsLongLong (make-c-func 'PyLong_AsLongLong <c-longlong> (list (ptr <PyObject>))))
(define PyLong_AsUnsignedLongLong (make-c-func 'PyLong_AsUnsignedLongLong <c-ulonglong> (list (ptr <PyObject>))))
(define PyLong_AsUnsignedLongLongMask (make-c-func 'PyLong_AsUnsignedLongLongMask <c-ulonglong> (list (ptr <PyObject>))))
(define PyLong_FromString (make-c-func 'PyLong_FromString (ptr <PyObject>) (list (ptr <c-char>) (ptr (ptr <c-char>)) <c-int>)))
(define PyLong_FromUnicode (make-c-func 'PyLong_FromUnicode (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int> <c-int>)))
(define _PyLong_Sign (make-c-func '_PyLong_Sign <c-int> (list (ptr <PyObject>))))
(define _PyLong_NumBits (make-c-func '_PyLong_NumBits <size_t> (list (ptr <PyObject>))))
(define _PyLong_NumBits (make-c-func '_PyLong_NumBits <size_t> (list (ptr <PyObject>))))
(define _PyLong_FromByteArray (make-c-func '_PyLong_FromByteArray (ptr <PyObject>) (list (ptr <c-uchar>) <size_t> <c-int> <c-int>)))
(define _PyLong_AsByteArray (make-c-func '_PyLong_AsByteArray <c-int> (list (ptr <PyLongObject>) (ptr <c-uchar>) <size_t> <c-int> <c-int>)))
(define-c-struct G330)
(init-c-struct! (c-struct 'G330) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'ob_fval <c-double>)))
(define <PyFloatObject> <c-struct:G330>)
(define PyFloat_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyFloat_Type))))
(define PyFloat_FromString (make-c-func 'PyFloat_FromString (ptr <PyObject>) (list (ptr <PyObject>) (ptr (ptr <c-char>)))))
(define PyFloat_FromDouble (make-c-func 'PyFloat_FromDouble (ptr <PyObject>) (list <c-double>)))
(define PyFloat_AsDouble (make-c-func 'PyFloat_AsDouble <c-double> (list (ptr <PyObject>))))
(define PyFloat_AsReprString (make-c-func 'PyFloat_AsReprString <c-void> (list (ptr <c-char>) (ptr <PyFloatObject>))))
(define PyFloat_AsString (make-c-func 'PyFloat_AsString <c-void> (list (ptr <c-char>) (ptr <PyFloatObject>))))
(define _PyFloat_Pack4 (make-c-func '_PyFloat_Pack4 <c-int> (list <c-double> (ptr <c-uchar>) <c-int>)))
(define _PyFloat_Pack8 (make-c-func '_PyFloat_Pack8 <c-int> (list <c-double> (ptr <c-uchar>) <c-int>)))
(define _PyFloat_Unpack4 (make-c-func '_PyFloat_Unpack4 <c-double> (list (ptr <c-uchar>) <c-int>)))
(define _PyFloat_Unpack8 (make-c-func '_PyFloat_Unpack8 <c-double> (list (ptr <c-uchar>) <c-int>)))
(define-c-struct G331)
(init-c-struct! (c-struct 'G331) (list (cons 'real <c-double>) (cons 'imag <c-double>)))
(define <Py_complex> <c-struct:G331>)
(define _Py_c_sum (make-c-func '_Py_c_sum <Py_complex> (list <Py_complex> <Py_complex>)))
(define _Py_c_diff (make-c-func '_Py_c_diff <Py_complex> (list <Py_complex> <Py_complex>)))
(define _Py_c_neg (make-c-func '_Py_c_neg <Py_complex> (list <Py_complex>)))
(define _Py_c_prod (make-c-func '_Py_c_prod <Py_complex> (list <Py_complex> <Py_complex>)))
(define _Py_c_quot (make-c-func '_Py_c_quot <Py_complex> (list <Py_complex> <Py_complex>)))
(define _Py_c_pow (make-c-func '_Py_c_pow <Py_complex> (list <Py_complex> <Py_complex>)))
(define-c-struct G332)
(init-c-struct! (c-struct 'G332) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'cval <Py_complex>)))
(define <PyComplexObject> <c-struct:G332>)
(define PyComplex_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyComplex_Type))))
(define PyComplex_FromCComplex (make-c-func 'PyComplex_FromCComplex (ptr <PyObject>) (list <Py_complex>)))
(define PyComplex_FromDoubles (make-c-func 'PyComplex_FromDoubles (ptr <PyObject>) (list <c-double> <c-double>)))
(define PyComplex_RealAsDouble (make-c-func 'PyComplex_RealAsDouble <c-double> (list (ptr <PyObject>))))
(define PyComplex_ImagAsDouble (make-c-func 'PyComplex_ImagAsDouble <c-double> (list (ptr <PyObject>))))
(define PyComplex_AsCComplex (make-c-func 'PyComplex_AsCComplex <Py_complex> (list (ptr <PyObject>))))
(define PyRange_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyRange_Type))))
(define PyRange_New (make-c-func 'PyRange_New (ptr <PyObject>) (list <c-long> <c-long> <c-long> <c-int>)))
(define-c-struct G333)
(init-c-struct! (c-struct 'G333) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'ob_size <c-int>) (cons 'ob_shash <c-long>) (cons 'ob_sstate <c-int>) (cons 'ob_sval (make-c-array <c-char> (x->integer 1)))))
(define <PyStringObject> <c-struct:G333>)
(define PyBaseString_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyBaseString_Type))))
(define PyString_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyString_Type))))
(define PyString_FromStringAndSize (make-c-func 'PyString_FromStringAndSize (ptr <PyObject>) (list (ptr <c-char>) <c-int>)))
(define PyString_FromString (make-c-func 'PyString_FromString (ptr <PyObject>) (list (ptr <c-char>))))
(define PyString_FromFormatV (make-c-func 'PyString_FromFormatV (ptr <PyObject>) (list (ptr <c-char>) <va_list>)))
(define PyString_FromFormat (make-c-func-vaargs 'PyString_FromFormat (ptr <PyObject>) (list (ptr <c-char>))))
(define PyString_Size (make-c-func 'PyString_Size <c-int> (list (ptr <PyObject>))))
(define PyString_AsString (make-c-func 'PyString_AsString (ptr <c-char>) (list (ptr <PyObject>))))
(define PyString_Repr (make-c-func 'PyString_Repr (ptr <PyObject>) (list (ptr <PyObject>) <c-int>)))
(define PyString_Concat (make-c-func 'PyString_Concat <c-void> (list (ptr (ptr <PyObject>)) (ptr <PyObject>))))
(define PyString_ConcatAndDel (make-c-func 'PyString_ConcatAndDel <c-void> (list (ptr (ptr <PyObject>)) (ptr <PyObject>))))
(define _PyString_Resize (make-c-func '_PyString_Resize <c-int> (list (ptr (ptr <PyObject>)) <c-int>)))
(define _PyString_Eq (make-c-func '_PyString_Eq <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyString_Format (make-c-func 'PyString_Format (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define _PyString_FormatLong (make-c-func '_PyString_FormatLong (ptr <PyObject>) (list (ptr <PyObject>) <c-int> <c-int> <c-int> (ptr (ptr <c-char>)) (ptr <c-int>))))
(define PyString_DecodeEscape (make-c-func 'PyString_DecodeEscape (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <c-char>) <c-int> (ptr <c-char>))))
(define PyString_InternInPlace (make-c-func 'PyString_InternInPlace <c-void> (list (ptr (ptr <PyObject>)))))
(define PyString_InternImmortal (make-c-func 'PyString_InternImmortal <c-void> (list (ptr (ptr <PyObject>)))))
(define PyString_InternFromString (make-c-func 'PyString_InternFromString (ptr <PyObject>) (list (ptr <c-char>))))
(define _Py_ReleaseInternedStrings (make-c-func '_Py_ReleaseInternedStrings <c-void> (list)))
(define _PyString_Join (make-c-func '_PyString_Join (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyString_Decode (make-c-func 'PyString_Decode (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <c-char>) (ptr <c-char>))))
(define PyString_Encode (make-c-func 'PyString_Encode (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <c-char>) (ptr <c-char>))))
(define PyString_AsEncodedObject (make-c-func 'PyString_AsEncodedObject (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>))))
(define PyString_AsEncodedString (make-c-func 'PyString_AsEncodedString (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>))))
(define PyString_AsDecodedObject (make-c-func 'PyString_AsDecodedObject (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>))))
(define PyString_AsDecodedString (make-c-func 'PyString_AsDecodedString (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>))))
(define PyString_AsStringAndSize (make-c-func 'PyString_AsStringAndSize <c-int> (list (ptr <PyObject>) (ptr (ptr <c-char>)) (ptr <c-int>))))
(define PyBuffer_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyBuffer_Type))))
(define PyBuffer_FromObject (make-c-func 'PyBuffer_FromObject (ptr <PyObject>) (list (ptr <PyObject>) <c-int> <c-int>)))
(define PyBuffer_FromReadWriteObject (make-c-func 'PyBuffer_FromReadWriteObject (ptr <PyObject>) (list (ptr <PyObject>) <c-int> <c-int>)))
(define PyBuffer_FromMemory (make-c-func 'PyBuffer_FromMemory (ptr <PyObject>) (list (ptr <c-void>) <c-int>)))
(define PyBuffer_FromReadWriteMemory (make-c-func 'PyBuffer_FromReadWriteMemory (ptr <PyObject>) (list (ptr <c-void>) <c-int>)))
(define PyBuffer_New (make-c-func 'PyBuffer_New (ptr <PyObject>) (list <c-int>)))
(define-c-struct G334)
(init-c-struct! (c-struct 'G334) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'ob_size <c-int>) (cons 'ob_item (make-c-array (ptr <PyObject>) (x->integer 1)))))
(define <PyTupleObject> <c-struct:G334>)
(define PyTuple_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyTuple_Type))))
(define PyTuple_New (make-c-func 'PyTuple_New (ptr <PyObject>) (list <c-int>)))
(define PyTuple_Size (make-c-func 'PyTuple_Size <c-int> (list (ptr <PyObject>))))
(define PyTuple_GetItem (make-c-func 'PyTuple_GetItem (ptr <PyObject>) (list (ptr <PyObject>) <c-int>)))
(define PyTuple_SetItem (make-c-func 'PyTuple_SetItem <c-int> (list (ptr <PyObject>) <c-int> (ptr <PyObject>))))
(define PyTuple_GetSlice (make-c-func 'PyTuple_GetSlice (ptr <PyObject>) (list (ptr <PyObject>) <c-int> <c-int>)))
(define _PyTuple_Resize (make-c-func '_PyTuple_Resize <c-int> (list (ptr (ptr <PyObject>)) <c-int>)))
(define-c-struct G335)
(init-c-struct! (c-struct 'G335) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'ob_size <c-int>) (cons 'ob_item (ptr (ptr <PyObject>)))))
(define <PyListObject> <c-struct:G335>)
(define PyList_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyList_Type))))
(define PyList_New (make-c-func 'PyList_New (ptr <PyObject>) (list <c-int>)))
(define PyList_Size (make-c-func 'PyList_Size <c-int> (list (ptr <PyObject>))))
(define PyList_GetItem (make-c-func 'PyList_GetItem (ptr <PyObject>) (list (ptr <PyObject>) <c-int>)))
(define PyList_SetItem (make-c-func 'PyList_SetItem <c-int> (list (ptr <PyObject>) <c-int> (ptr <PyObject>))))
(define PyList_Insert (make-c-func 'PyList_Insert <c-int> (list (ptr <PyObject>) <c-int> (ptr <PyObject>))))
(define PyList_Append (make-c-func 'PyList_Append <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyList_GetSlice (make-c-func 'PyList_GetSlice (ptr <PyObject>) (list (ptr <PyObject>) <c-int> <c-int>)))
(define PyList_SetSlice (make-c-func 'PyList_SetSlice <c-int> (list (ptr <PyObject>) <c-int> <c-int> (ptr <PyObject>))))
(define PyList_Sort (make-c-func 'PyList_Sort <c-int> (list (ptr <PyObject>))))
(define PyList_Reverse (make-c-func 'PyList_Reverse <c-int> (list (ptr <PyObject>))))
(define PyList_AsTuple (make-c-func 'PyList_AsTuple (ptr <PyObject>) (list (ptr <PyObject>))))
(define-c-struct G336)
(init-c-struct! (c-struct 'G336) (list (cons 'me_hash <c-long>) (cons 'me_key (ptr <PyObject>)) (cons 'me_value (ptr <PyObject>))))
(define <PyDictEntry> <c-struct:G336>)
(define-c-struct _dictobject)
(define <PyDictObject> <c-struct:_dictobject>)
(init-c-struct! (c-struct '_dictobject) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'ma_fill <c-int>) (cons 'ma_used <c-int>) (cons 'ma_mask <c-int>) (cons 'ma_table (ptr <PyDictEntry>)) (cons 'ma_lookup (make-c-func-ptr (ptr <PyDictEntry>) (list (ptr <PyDictObject>) (ptr <PyObject>) <c-long>) (list 'mp 'key 'hash))) (cons 'ma_smalltable (make-c-array <PyDictEntry> (x->integer 8)))))
(define PyDict_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyDict_Type))))
(define PyDict_New (make-c-func 'PyDict_New (ptr <PyObject>) (list)))
(define PyDict_GetItem (make-c-func 'PyDict_GetItem (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyDict_SetItem (make-c-func 'PyDict_SetItem <c-int> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyDict_DelItem (make-c-func 'PyDict_DelItem <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyDict_Clear (make-c-func 'PyDict_Clear <c-void> (list (ptr <PyObject>))))
(define PyDict_Next (make-c-func 'PyDict_Next <c-int> (list (ptr <PyObject>) (ptr <c-int>) (ptr (ptr <PyObject>)) (ptr (ptr <PyObject>)))))
(define PyDict_Keys (make-c-func 'PyDict_Keys (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyDict_Values (make-c-func 'PyDict_Values (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyDict_Items (make-c-func 'PyDict_Items (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyDict_Size (make-c-func 'PyDict_Size <c-int> (list (ptr <PyObject>))))
(define PyDict_Copy (make-c-func 'PyDict_Copy (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyDict_Update (make-c-func 'PyDict_Update <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyDict_Merge (make-c-func 'PyDict_Merge <c-int> (list (ptr <PyObject>) (ptr <PyObject>) <c-int>)))
(define PyDict_MergeFromSeq2 (make-c-func 'PyDict_MergeFromSeq2 <c-int> (list (ptr <PyObject>) (ptr <PyObject>) <c-int>)))
(define PyDict_GetItemString (make-c-func 'PyDict_GetItemString (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>))))
(define PyDict_SetItemString (make-c-func 'PyDict_SetItemString <c-int> (list (ptr <PyObject>) (ptr <c-char>) (ptr <PyObject>))))
(define PyDict_DelItemString (make-c-func 'PyDict_DelItemString <c-int> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyEnum_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyEnum_Type))))
(define PyCFunction_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyCFunction_Type))))
(define <PyCFunction> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f)))
(define <PyCFunctionWithKeywords> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>)) (list '#f '#f '#f)))
(define <PyNoArgsFunction> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>)) (list '#f)))
(define PyCFunction_GetFunction (make-c-func 'PyCFunction_GetFunction <PyCFunction> (list (ptr <PyObject>))))
(define PyCFunction_GetSelf (make-c-func 'PyCFunction_GetSelf (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyCFunction_GetFlags (make-c-func 'PyCFunction_GetFlags <c-int> (list (ptr <PyObject>))))
(define PyCFunction_Call (make-c-func 'PyCFunction_Call (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(init-c-struct! (c-struct 'PyMethodDef) (list (cons 'ml_name (ptr <c-char>)) (cons 'ml_meth <PyCFunction>) (cons 'ml_flags <c-int>) (cons 'ml_doc (ptr <c-char>))))
(define <PyMethodDef> <c-struct:PyMethodDef>)
(define Py_FindMethod (make-c-func 'Py_FindMethod (ptr <PyObject>) (list (ptr <PyMethodDef>) (ptr <PyObject>) (ptr <c-char>))))
(define PyCFunction_NewEx (make-c-func 'PyCFunction_NewEx (ptr <PyObject>) (list (ptr <PyMethodDef>) (ptr <PyObject>) (ptr <PyObject>))))
(define-c-struct PyMethodChain)
(init-c-struct! (c-struct 'PyMethodChain) (list (cons 'methods (ptr <PyMethodDef>)) (cons 'link (ptr <c-struct:PyMethodChain>))))
(define <PyMethodChain> <c-struct:PyMethodChain>)
(define Py_FindMethodInChain (make-c-func 'Py_FindMethodInChain (ptr <PyObject>) (list (ptr <PyMethodChain>) (ptr <PyObject>) (ptr <c-char>))))
(define-c-struct G337)
(init-c-struct! (c-struct 'G337) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'm_ml (ptr <PyMethodDef>)) (cons 'm_self (ptr <PyObject>)) (cons 'm_module (ptr <PyObject>))))
(define <PyCFunctionObject> <c-struct:G337>)
(define PyModule_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyModule_Type))))
(define PyModule_New (make-c-func 'PyModule_New (ptr <PyObject>) (list (ptr <c-char>))))
(define PyModule_GetDict (make-c-func 'PyModule_GetDict (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyModule_GetName (make-c-func 'PyModule_GetName (ptr <c-char>) (list (ptr <PyObject>))))
(define PyModule_GetFilename (make-c-func 'PyModule_GetFilename (ptr <c-char>) (list (ptr <PyObject>))))
(define _PyModule_Clear (make-c-func '_PyModule_Clear <c-void> (list (ptr <PyObject>))))
(define-c-struct G338)
(init-c-struct! (c-struct 'G338) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'func_code (ptr <PyObject>)) (cons 'func_globals (ptr <PyObject>)) (cons 'func_defaults (ptr <PyObject>)) (cons 'func_closure (ptr <PyObject>)) (cons 'func_doc (ptr <PyObject>)) (cons 'func_name (ptr <PyObject>)) (cons 'func_dict (ptr <PyObject>)) (cons 'func_weakreflist (ptr <PyObject>)) (cons 'func_module (ptr <PyObject>))))
(define <PyFunctionObject> <c-struct:G338>)
(define PyFunction_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyFunction_Type))))
(define PyFunction_New (make-c-func 'PyFunction_New (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyFunction_GetCode (make-c-func 'PyFunction_GetCode (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyFunction_GetGlobals (make-c-func 'PyFunction_GetGlobals (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyFunction_GetModule (make-c-func 'PyFunction_GetModule (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyFunction_GetDefaults (make-c-func 'PyFunction_GetDefaults (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyFunction_SetDefaults (make-c-func 'PyFunction_SetDefaults <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyFunction_GetClosure (make-c-func 'PyFunction_GetClosure (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyFunction_SetClosure (make-c-func 'PyFunction_SetClosure <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyClassMethod_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyClassMethod_Type))))
(define PyStaticMethod_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyStaticMethod_Type))))
(define PyClassMethod_New (make-c-func 'PyClassMethod_New (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyStaticMethod_New (make-c-func 'PyStaticMethod_New (ptr <PyObject>) (list (ptr <PyObject>))))
(define-c-struct G339)
(init-c-struct! (c-struct 'G339) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'cl_bases (ptr <PyObject>)) (cons 'cl_dict (ptr <PyObject>)) (cons 'cl_name (ptr <PyObject>)) (cons 'cl_getattr (ptr <PyObject>)) (cons 'cl_setattr (ptr <PyObject>)) (cons 'cl_delattr (ptr <PyObject>))))
(define <PyClassObject> <c-struct:G339>)
(define-c-struct G340)
(init-c-struct! (c-struct 'G340) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'in_class (ptr <PyClassObject>)) (cons 'in_dict (ptr <PyObject>)) (cons 'in_weakreflist (ptr <PyObject>))))
(define <PyInstanceObject> <c-struct:G340>)
(define-c-struct G341)
(init-c-struct! (c-struct 'G341) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'im_func (ptr <PyObject>)) (cons 'im_self (ptr <PyObject>)) (cons 'im_class (ptr <PyObject>)) (cons 'im_weakreflist (ptr <PyObject>))))
(define <PyMethodObject> <c-struct:G341>)
(define PyClass_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyClass_Type))))
(define PyInstance_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyInstance_Type))))
(define PyMethod_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyMethod_Type))))
(define PyClass_New (make-c-func 'PyClass_New (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyInstance_New (make-c-func 'PyInstance_New (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyInstance_NewRaw (make-c-func 'PyInstance_NewRaw (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyMethod_New (make-c-func 'PyMethod_New (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyMethod_Function (make-c-func 'PyMethod_Function (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyMethod_Self (make-c-func 'PyMethod_Self (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyMethod_Class (make-c-func 'PyMethod_Class (ptr <PyObject>) (list (ptr <PyObject>))))
(define _PyInstance_Lookup (make-c-func '_PyInstance_Lookup (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyClass_IsSubclass (make-c-func 'PyClass_IsSubclass <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define-c-struct G342)
(init-c-struct! (c-struct 'G342) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'f_fp (ptr <FILE>)) (cons 'f_name (ptr <PyObject>)) (cons 'f_mode (ptr <PyObject>)) (cons 'f_close (make-c-func-ptr <c-int> (list (ptr <FILE>)) (list '#f))) (cons 'f_softspace <c-int>) (cons 'f_binary <c-int>) (cons 'f_buf (ptr <c-char>)) (cons 'f_bufend (ptr <c-char>)) (cons 'f_bufptr (ptr <c-char>)) (cons 'f_setbuf (ptr <c-char>)) (cons 'f_univ_newline <c-int>) (cons 'f_newlinetypes <c-int>) (cons 'f_skipnextlf <c-int>) (cons 'f_encoding (ptr <PyObject>))))
(define <PyFileObject> <c-struct:G342>)
(define PyFile_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyFile_Type))))
(define PyFile_FromString (make-c-func 'PyFile_FromString (ptr <PyObject>) (list (ptr <c-char>) (ptr <c-char>))))
(define PyFile_SetBufSize (make-c-func 'PyFile_SetBufSize <c-void> (list (ptr <PyObject>) <c-int>)))
(define PyFile_SetEncoding (make-c-func 'PyFile_SetEncoding <c-int> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyFile_FromFile (make-c-func 'PyFile_FromFile (ptr <PyObject>) (list (ptr <FILE>) (ptr <c-char>) (ptr <c-char>) (make-c-func-ptr <c-int> (list (ptr <FILE>)) (list '#f)))))
(define PyFile_AsFile (make-c-func 'PyFile_AsFile (ptr <FILE>) (list (ptr <PyObject>))))
(define PyFile_Name (make-c-func 'PyFile_Name (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyFile_GetLine (make-c-func 'PyFile_GetLine (ptr <PyObject>) (list (ptr <PyObject>) <c-int>)))
(define PyFile_WriteObject (make-c-func 'PyFile_WriteObject <c-int> (list (ptr <PyObject>) (ptr <PyObject>) <c-int>)))
(define PyFile_SoftSpace (make-c-func 'PyFile_SoftSpace <c-int> (list (ptr <PyObject>) <c-int>)))
(define PyFile_WriteString (make-c-func 'PyFile_WriteString <c-int> (list (ptr <c-char>) (ptr <PyObject>))))
(define PyObject_AsFileDescriptor (make-c-func 'PyObject_AsFileDescriptor <c-int> (list (ptr <PyObject>))))
(define Py_FileSystemDefaultEncoding (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol 'Py_FileSystemDefaultEncoding))))
(define Py_UniversalNewlineFgets (make-c-func 'Py_UniversalNewlineFgets (ptr <c-char>) (list (ptr <c-char>) <c-int> (ptr <FILE>) (ptr <PyObject>))))
(define Py_UniversalNewlineFread (make-c-func 'Py_UniversalNewlineFread <size_t> (list (ptr <c-char>) <size_t> (ptr <FILE>) (ptr <PyObject>))))
(define PyCObject_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyCObject_Type))))
(define PyCObject_FromVoidPtr (make-c-func 'PyCObject_FromVoidPtr (ptr <PyObject>) (list (ptr <c-void>) (make-c-func-ptr <c-void> (list (ptr <c-void>)) (list '#f)))))
(define PyCObject_FromVoidPtrAndDesc (make-c-func 'PyCObject_FromVoidPtrAndDesc (ptr <PyObject>) (list (ptr <c-void>) (ptr <c-void>) (make-c-func-ptr <c-void> (list (ptr <c-void>) (ptr <c-void>)) (list '#f '#f)))))
(define PyCObject_AsVoidPtr (make-c-func 'PyCObject_AsVoidPtr (ptr <c-void>) (list (ptr <PyObject>))))
(define PyCObject_GetDesc (make-c-func 'PyCObject_GetDesc (ptr <c-void>) (list (ptr <PyObject>))))
(define PyCObject_Import (make-c-func 'PyCObject_Import (ptr <c-void>) (list (ptr <c-char>) (ptr <c-char>))))
(define-c-struct _frame)
(define PyTraceBack_Here (make-c-func 'PyTraceBack_Here <c-int> (list (ptr <c-struct:_frame>))))
(define PyTraceBack_Print (make-c-func 'PyTraceBack_Print <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyTraceBack_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyTraceBack_Type))))
(define _Py_EllipsisObject (deref (cast (ptr <PyObject>) (c-lookup-symbol '_Py_EllipsisObject))))
(define-c-struct G343)
(init-c-struct! (c-struct 'G343) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'start (ptr <PyObject>)) (cons 'stop (ptr <PyObject>)) (cons 'step (ptr <PyObject>))))
(define <PySliceObject> <c-struct:G343>)
(define PySlice_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PySlice_Type))))
(define PySlice_New (make-c-func 'PySlice_New (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PySlice_GetIndices (make-c-func 'PySlice_GetIndices <c-int> (list (ptr <PySliceObject>) <c-int> (ptr <c-int>) (ptr <c-int>) (ptr <c-int>))))
(define PySlice_GetIndicesEx (make-c-func 'PySlice_GetIndicesEx <c-int> (list (ptr <PySliceObject>) <c-int> (ptr <c-int>) (ptr <c-int>) (ptr <c-int>) (ptr <c-int>))))
(define-c-struct G344)
(init-c-struct! (c-struct 'G344) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'ob_ref (ptr <PyObject>))))
(define <PyCellObject> <c-struct:G344>)
(define PyCell_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyCell_Type))))
(define PyCell_New (make-c-func 'PyCell_New (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyCell_Get (make-c-func 'PyCell_Get (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyCell_Set (make-c-func 'PyCell_Set <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PySeqIter_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PySeqIter_Type))))
(define PySeqIter_New (make-c-func 'PySeqIter_New (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyCallIter_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyCallIter_Type))))
(define PyCallIter_New (make-c-func 'PyCallIter_New (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define <getter> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-void>)) (list '#f '#f)))
(define <setter> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <c-void>)) (list '#f '#f '#f)))
(init-c-struct! (c-struct 'PyGetSetDef) (list (cons 'name (ptr <c-char>)) (cons 'get <getter>) (cons 'set <setter>) (cons 'doc (ptr <c-char>)) (cons 'closure (ptr <c-void>))))
(define <PyGetSetDef> <c-struct:PyGetSetDef>)
(define <wrapperfunc> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <c-void>)) (list 'self 'args 'wrapped)))
(define <wrapperfunc_kwds> (make-c-func-ptr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <c-void>) (ptr <PyObject>)) (list 'self 'args 'wrapped 'kwds)))
(define-c-struct wrapperbase)
(init-c-struct! (c-struct 'wrapperbase) (list (cons 'name (ptr <c-char>)) (cons 'offset <c-int>) (cons 'function (ptr <c-void>)) (cons 'wrapper <wrapperfunc>) (cons 'doc (ptr <c-char>)) (cons 'flags <c-int>) (cons 'name_strobj (ptr <PyObject>))))
(define-c-struct G345)
(init-c-struct! (c-struct 'G345) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'd_type (ptr <PyTypeObject>)) (cons 'd_name (ptr <PyObject>))))
(define <PyDescrObject> <c-struct:G345>)
(define-c-struct G346)
(init-c-struct! (c-struct 'G346) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'd_type (ptr <PyTypeObject>)) (cons 'd_name (ptr <PyObject>)) (cons 'd_method (ptr <PyMethodDef>))))
(define <PyMethodDescrObject> <c-struct:G346>)
(define-c-struct G347)
(init-c-struct! (c-struct 'G347) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'd_type (ptr <PyTypeObject>)) (cons 'd_name (ptr <PyObject>)) (cons 'd_member (ptr <c-struct:PyMemberDef>))))
(define <PyMemberDescrObject> <c-struct:G347>)
(define-c-struct G348)
(init-c-struct! (c-struct 'G348) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'd_type (ptr <PyTypeObject>)) (cons 'd_name (ptr <PyObject>)) (cons 'd_getset (ptr <PyGetSetDef>))))
(define <PyGetSetDescrObject> <c-struct:G348>)
(define-c-struct G349)
(init-c-struct! (c-struct 'G349) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'd_type (ptr <PyTypeObject>)) (cons 'd_name (ptr <PyObject>)) (cons 'd_base (ptr <c-struct:wrapperbase>)) (cons 'd_wrapped (ptr <c-void>))))
(define <PyWrapperDescrObject> <c-struct:G349>)
(define PyWrapperDescr_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyWrapperDescr_Type))))
(define PyDescr_NewMethod (make-c-func 'PyDescr_NewMethod (ptr <PyObject>) (list (ptr <PyTypeObject>) (ptr <PyMethodDef>))))
(define PyDescr_NewClassMethod (make-c-func 'PyDescr_NewClassMethod (ptr <PyObject>) (list (ptr <PyTypeObject>) (ptr <PyMethodDef>))))
(define PyDescr_NewMember (make-c-func 'PyDescr_NewMember (ptr <PyObject>) (list (ptr <PyTypeObject>) (ptr <c-struct:PyMemberDef>))))
(define PyDescr_NewGetSet (make-c-func 'PyDescr_NewGetSet (ptr <PyObject>) (list (ptr <PyTypeObject>) (ptr <c-struct:PyGetSetDef>))))
(define PyDescr_NewWrapper (make-c-func 'PyDescr_NewWrapper (ptr <PyObject>) (list (ptr <PyTypeObject>) (ptr <c-struct:wrapperbase>) (ptr <c-void>))))
(define PyDictProxy_New (make-c-func 'PyDictProxy_New (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyWrapper_New (make-c-func 'PyWrapper_New (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyProperty_Type (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol 'PyProperty_Type))))
(define-c-struct _PyWeakReference)
(define <PyWeakReference> <c-struct:_PyWeakReference>)
(init-c-struct! (c-struct '_PyWeakReference) (list (cons 'ob_refcnt <c-int>) (cons 'ob_type (ptr <c-struct:_typeobject>)) (cons 'wr_object (ptr <PyObject>)) (cons 'wr_callback (ptr <PyObject>)) (cons 'hash <c-long>) (cons 'wr_prev (ptr <PyWeakReference>)) (cons 'wr_next (ptr <PyWeakReference>))))
(define _PyWeakref_RefType (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol '_PyWeakref_RefType))))
(define _PyWeakref_ProxyType (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol '_PyWeakref_ProxyType))))
(define _PyWeakref_CallableProxyType (deref (cast (ptr <PyTypeObject>) (c-lookup-symbol '_PyWeakref_CallableProxyType))))
(define PyWeakref_NewRef (make-c-func 'PyWeakref_NewRef (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyWeakref_NewProxy (make-c-func 'PyWeakref_NewProxy (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyWeakref_GetObject (make-c-func 'PyWeakref_GetObject (ptr <PyObject>) (list (ptr <PyObject>))))
(define _PyWeakref_GetWeakrefCount (make-c-func '_PyWeakref_GetWeakrefCount <c-long> (list (ptr <PyWeakReference>))))
(define _PyWeakref_ClearRef (make-c-func '_PyWeakref_ClearRef <c-void> (list (ptr <PyWeakReference>))))
(define PyCodec_Register (make-c-func 'PyCodec_Register <c-int> (list (ptr <PyObject>))))
(define _PyCodec_Lookup (make-c-func '_PyCodec_Lookup (ptr <PyObject>) (list (ptr <c-char>))))
(define PyCodec_Encode (make-c-func 'PyCodec_Encode (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>))))
(define PyCodec_Decode (make-c-func 'PyCodec_Decode (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>))))
(define PyCodec_Encoder (make-c-func 'PyCodec_Encoder (ptr <PyObject>) (list (ptr <c-char>))))
(define PyCodec_Decoder (make-c-func 'PyCodec_Decoder (ptr <PyObject>) (list (ptr <c-char>))))
(define PyCodec_StreamReader (make-c-func 'PyCodec_StreamReader (ptr <PyObject>) (list (ptr <c-char>) (ptr <PyObject>) (ptr <c-char>))))
(define PyCodec_StreamWriter (make-c-func 'PyCodec_StreamWriter (ptr <PyObject>) (list (ptr <c-char>) (ptr <PyObject>) (ptr <c-char>))))
(define PyCodec_RegisterError (make-c-func 'PyCodec_RegisterError <c-int> (list (ptr <c-char>) (ptr <PyObject>))))
(define PyCodec_LookupError (make-c-func 'PyCodec_LookupError (ptr <PyObject>) (list (ptr <c-char>))))
(define PyCodec_StrictErrors (make-c-func 'PyCodec_StrictErrors (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyCodec_IgnoreErrors (make-c-func 'PyCodec_IgnoreErrors (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyCodec_ReplaceErrors (make-c-func 'PyCodec_ReplaceErrors (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyCodec_XMLCharRefReplaceErrors (make-c-func 'PyCodec_XMLCharRefReplaceErrors (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyCodec_BackslashReplaceErrors (make-c-func 'PyCodec_BackslashReplaceErrors (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyErr_SetNone (make-c-func 'PyErr_SetNone <c-void> (list (ptr <PyObject>))))
(define PyErr_SetObject (make-c-func 'PyErr_SetObject <c-void> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyErr_SetString (make-c-func 'PyErr_SetString <c-void> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyErr_Occurred (make-c-func 'PyErr_Occurred (ptr <PyObject>) (list)))
(define PyErr_Clear (make-c-func 'PyErr_Clear <c-void> (list)))
(define PyErr_Fetch (make-c-func 'PyErr_Fetch <c-void> (list (ptr (ptr <PyObject>)) (ptr (ptr <PyObject>)) (ptr (ptr <PyObject>)))))
(define PyErr_Restore (make-c-func 'PyErr_Restore <c-void> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyErr_GivenExceptionMatches (make-c-func 'PyErr_GivenExceptionMatches <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyErr_ExceptionMatches (make-c-func 'PyErr_ExceptionMatches <c-int> (list (ptr <PyObject>))))
(define PyErr_NormalizeException (make-c-func 'PyErr_NormalizeException <c-void> (list (ptr (ptr <PyObject>)) (ptr (ptr <PyObject>)) (ptr (ptr <PyObject>)))))
(define PyExc_Exception (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_Exception))))
(define PyExc_StopIteration (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_StopIteration))))
(define PyExc_StandardError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_StandardError))))
(define PyExc_ArithmeticError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_ArithmeticError))))
(define PyExc_LookupError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_LookupError))))
(define PyExc_AssertionError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_AssertionError))))
(define PyExc_AttributeError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_AttributeError))))
(define PyExc_EOFError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_EOFError))))
(define PyExc_FloatingPointError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_FloatingPointError))))
(define PyExc_EnvironmentError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_EnvironmentError))))
(define PyExc_IOError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_IOError))))
(define PyExc_OSError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_OSError))))
(define PyExc_ImportError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_ImportError))))
(define PyExc_IndexError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_IndexError))))
(define PyExc_KeyError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_KeyError))))
(define PyExc_KeyboardInterrupt (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_KeyboardInterrupt))))
(define PyExc_MemoryError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_MemoryError))))
(define PyExc_NameError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_NameError))))
(define PyExc_OverflowError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_OverflowError))))
(define PyExc_RuntimeError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_RuntimeError))))
(define PyExc_NotImplementedError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_NotImplementedError))))
(define PyExc_SyntaxError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_SyntaxError))))
(define PyExc_IndentationError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_IndentationError))))
(define PyExc_TabError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_TabError))))
(define PyExc_ReferenceError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_ReferenceError))))
(define PyExc_SystemError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_SystemError))))
(define PyExc_SystemExit (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_SystemExit))))
(define PyExc_TypeError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_TypeError))))
(define PyExc_UnboundLocalError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_UnboundLocalError))))
(define PyExc_UnicodeError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_UnicodeError))))
(define PyExc_UnicodeEncodeError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_UnicodeEncodeError))))
(define PyExc_UnicodeDecodeError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_UnicodeDecodeError))))
(define PyExc_UnicodeTranslateError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_UnicodeTranslateError))))
(define PyExc_ValueError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_ValueError))))
(define PyExc_ZeroDivisionError (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_ZeroDivisionError))))
(define PyExc_MemoryErrorInst (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_MemoryErrorInst))))
(define PyExc_Warning (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_Warning))))
(define PyExc_UserWarning (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_UserWarning))))
(define PyExc_DeprecationWarning (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_DeprecationWarning))))
(define PyExc_PendingDeprecationWarning (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_PendingDeprecationWarning))))
(define PyExc_SyntaxWarning (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_SyntaxWarning))))
(define PyExc_OverflowWarning (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_OverflowWarning))))
(define PyExc_RuntimeWarning (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_RuntimeWarning))))
(define PyExc_FutureWarning (deref (cast (ptr (ptr <PyObject>)) (c-lookup-symbol 'PyExc_FutureWarning))))
(define PyErr_BadArgument (make-c-func 'PyErr_BadArgument <c-int> (list)))
(define PyErr_NoMemory (make-c-func 'PyErr_NoMemory (ptr <PyObject>) (list)))
(define PyErr_SetFromErrno (make-c-func 'PyErr_SetFromErrno (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyErr_SetFromErrnoWithFilenameObject (make-c-func 'PyErr_SetFromErrnoWithFilenameObject (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyErr_SetFromErrnoWithFilename (make-c-func 'PyErr_SetFromErrnoWithFilename (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>))))
(define PyErr_Format (make-c-func-vaargs 'PyErr_Format (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>))))
(define PyErr_BadInternalCall (make-c-func 'PyErr_BadInternalCall <c-void> (list)))
(define _PyErr_BadInternalCall (make-c-func '_PyErr_BadInternalCall <c-void> (list (ptr <c-char>) <c-int>)))
(define PyErr_NewException (make-c-func 'PyErr_NewException (ptr <PyObject>) (list (ptr <c-char>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyErr_WriteUnraisable (make-c-func 'PyErr_WriteUnraisable <c-void> (list (ptr <PyObject>))))
(define PyErr_Warn (make-c-func 'PyErr_Warn <c-int> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyErr_WarnExplicit (make-c-func 'PyErr_WarnExplicit <c-int> (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>) <c-int> (ptr <c-char>) (ptr <PyObject>))))
(define PyErr_CheckSignals (make-c-func 'PyErr_CheckSignals <c-int> (list)))
(define PyErr_SetInterrupt (make-c-func 'PyErr_SetInterrupt <c-void> (list)))
(define PyErr_SyntaxLocation (make-c-func 'PyErr_SyntaxLocation <c-void> (list (ptr <c-char>) <c-int>)))
(define PyErr_ProgramText (make-c-func 'PyErr_ProgramText (ptr <PyObject>) (list (ptr <c-char>) <c-int>)))
(define PyUnicodeDecodeError_Create (make-c-func 'PyUnicodeDecodeError_Create (ptr <PyObject>) (list (ptr <c-char>) (ptr <c-char>) <c-int> <c-int> <c-int> (ptr <c-char>))))
(define PyUnicodeEncodeError_Create (make-c-func 'PyUnicodeEncodeError_Create (ptr <PyObject>) (list (ptr <c-char>) (ptr <Py_UNICODE>) <c-int> <c-int> <c-int> (ptr <c-char>))))
(define PyUnicodeTranslateError_Create (make-c-func 'PyUnicodeTranslateError_Create (ptr <PyObject>) (list (ptr <Py_UNICODE>) <c-int> <c-int> <c-int> (ptr <c-char>))))
(define PyUnicodeEncodeError_GetEncoding (make-c-func 'PyUnicodeEncodeError_GetEncoding (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeDecodeError_GetEncoding (make-c-func 'PyUnicodeDecodeError_GetEncoding (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeEncodeError_GetObject (make-c-func 'PyUnicodeEncodeError_GetObject (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeDecodeError_GetObject (make-c-func 'PyUnicodeDecodeError_GetObject (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeTranslateError_GetObject (make-c-func 'PyUnicodeTranslateError_GetObject (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeEncodeError_GetStart (make-c-func 'PyUnicodeEncodeError_GetStart <c-int> (list (ptr <PyObject>) (ptr <c-int>))))
(define PyUnicodeDecodeError_GetStart (make-c-func 'PyUnicodeDecodeError_GetStart <c-int> (list (ptr <PyObject>) (ptr <c-int>))))
(define PyUnicodeTranslateError_GetStart (make-c-func 'PyUnicodeTranslateError_GetStart <c-int> (list (ptr <PyObject>) (ptr <c-int>))))
(define PyUnicodeEncodeError_SetStart (make-c-func 'PyUnicodeEncodeError_SetStart <c-int> (list (ptr <PyObject>) <c-int>)))
(define PyUnicodeDecodeError_SetStart (make-c-func 'PyUnicodeDecodeError_SetStart <c-int> (list (ptr <PyObject>) <c-int>)))
(define PyUnicodeTranslateError_SetStart (make-c-func 'PyUnicodeTranslateError_SetStart <c-int> (list (ptr <PyObject>) <c-int>)))
(define PyUnicodeEncodeError_GetEnd (make-c-func 'PyUnicodeEncodeError_GetEnd <c-int> (list (ptr <PyObject>) (ptr <c-int>))))
(define PyUnicodeDecodeError_GetEnd (make-c-func 'PyUnicodeDecodeError_GetEnd <c-int> (list (ptr <PyObject>) (ptr <c-int>))))
(define PyUnicodeTranslateError_GetEnd (make-c-func 'PyUnicodeTranslateError_GetEnd <c-int> (list (ptr <PyObject>) (ptr <c-int>))))
(define PyUnicodeEncodeError_SetEnd (make-c-func 'PyUnicodeEncodeError_SetEnd <c-int> (list (ptr <PyObject>) <c-int>)))
(define PyUnicodeDecodeError_SetEnd (make-c-func 'PyUnicodeDecodeError_SetEnd <c-int> (list (ptr <PyObject>) <c-int>)))
(define PyUnicodeTranslateError_SetEnd (make-c-func 'PyUnicodeTranslateError_SetEnd <c-int> (list (ptr <PyObject>) <c-int>)))
(define PyUnicodeEncodeError_GetReason (make-c-func 'PyUnicodeEncodeError_GetReason (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeDecodeError_GetReason (make-c-func 'PyUnicodeDecodeError_GetReason (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeTranslateError_GetReason (make-c-func 'PyUnicodeTranslateError_GetReason (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyUnicodeEncodeError_SetReason (make-c-func 'PyUnicodeEncodeError_SetReason <c-int> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyUnicodeDecodeError_SetReason (make-c-func 'PyUnicodeDecodeError_SetReason <c-int> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyUnicodeTranslateError_SetReason (make-c-func 'PyUnicodeTranslateError_SetReason <c-int> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyOS_snprintf (make-c-func-vaargs 'PyOS_snprintf <c-int> (list (ptr <c-char>) <size_t> (ptr <c-char>))))
(define PyOS_vsnprintf (make-c-func 'PyOS_vsnprintf <c-int> (list (ptr <c-char>) <size_t> (ptr <c-char>) <va_list>)))
(define-c-struct _ts)
(define-c-struct _is)
(init-c-struct! (c-struct '_is) (list (cons 'next (ptr <c-struct:_is>)) (cons 'tstate_head (ptr <c-struct:_ts>)) (cons 'modules (ptr <PyObject>)) (cons 'sysdict (ptr <PyObject>)) (cons 'builtins (ptr <PyObject>)) (cons 'codec_search_path (ptr <PyObject>)) (cons 'codec_search_cache (ptr <PyObject>)) (cons 'codec_error_registry (ptr <PyObject>)) (cons 'dlopenflags <c-int>)))
(define <PyInterpreterState> <c-struct:_is>)
(define <Py_tracefunc> (make-c-func-ptr <c-int> (list (ptr <PyObject>) (ptr <c-struct:_frame>) <c-int> (ptr <PyObject>)) (list '#f '#f '#f '#f)))
(init-c-struct! (c-struct '_ts) (list (cons 'next (ptr <c-struct:_ts>)) (cons 'interp (ptr <PyInterpreterState>)) (cons 'frame (ptr <c-struct:_frame>)) (cons 'recursion_depth <c-int>) (cons 'tracing <c-int>) (cons 'use_tracing <c-int>) (cons 'c_profilefunc <Py_tracefunc>) (cons 'c_tracefunc <Py_tracefunc>) (cons 'c_profileobj (ptr <PyObject>)) (cons 'c_traceobj (ptr <PyObject>)) (cons 'curexc_type (ptr <PyObject>)) (cons 'curexc_value (ptr <PyObject>)) (cons 'curexc_traceback (ptr <PyObject>)) (cons 'exc_type (ptr <PyObject>)) (cons 'exc_value (ptr <PyObject>)) (cons 'exc_traceback (ptr <PyObject>)) (cons 'dict (ptr <PyObject>)) (cons 'tick_counter <c-int>) (cons 'gilstate_counter <c-int>) (cons 'async_exc (ptr <PyObject>)) (cons 'thread_id <c-long>)))
(define <PyThreadState> <c-struct:_ts>)
(define PyInterpreterState_New (make-c-func 'PyInterpreterState_New (ptr <PyInterpreterState>) (list)))
(define PyInterpreterState_Clear (make-c-func 'PyInterpreterState_Clear <c-void> (list (ptr <PyInterpreterState>))))
(define PyInterpreterState_Delete (make-c-func 'PyInterpreterState_Delete <c-void> (list (ptr <PyInterpreterState>))))
(define PyThreadState_New (make-c-func 'PyThreadState_New (ptr <PyThreadState>) (list (ptr <PyInterpreterState>))))
(define PyThreadState_Clear (make-c-func 'PyThreadState_Clear <c-void> (list (ptr <PyThreadState>))))
(define PyThreadState_Delete (make-c-func 'PyThreadState_Delete <c-void> (list (ptr <PyThreadState>))))
(define PyThreadState_DeleteCurrent (make-c-func 'PyThreadState_DeleteCurrent <c-void> (list)))
(define PyThreadState_Get (make-c-func 'PyThreadState_Get (ptr <PyThreadState>) (list)))
(define PyThreadState_Swap (make-c-func 'PyThreadState_Swap (ptr <PyThreadState>) (list (ptr <PyThreadState>))))
(define PyThreadState_GetDict (make-c-func 'PyThreadState_GetDict (ptr <PyObject>) (list)))
(define PyThreadState_SetAsyncExc (make-c-func 'PyThreadState_SetAsyncExc <c-int> (list <c-long> (ptr <PyObject>))))
(define _PyThreadState_Current (deref (cast (ptr (ptr <PyThreadState>)) (c-lookup-symbol '_PyThreadState_Current))))
(define PyGILState_LOCKED 0)
(define PyGILState_UNLOCKED 1)
(define <PyGILState_STATE> <c-int>)
(define PyGILState_Ensure (make-c-func 'PyGILState_Ensure <PyGILState_STATE> (list)))
(define PyGILState_Release (make-c-func 'PyGILState_Release <c-void> (list <PyGILState_STATE>)))
(define PyGILState_GetThisThreadState (make-c-func 'PyGILState_GetThisThreadState (ptr <PyThreadState>) (list)))
(define PyInterpreterState_Head (make-c-func 'PyInterpreterState_Head (ptr <PyInterpreterState>) (list)))
(define PyInterpreterState_Next (make-c-func 'PyInterpreterState_Next (ptr <PyInterpreterState>) (list (ptr <PyInterpreterState>))))
(define PyInterpreterState_ThreadHead (make-c-func 'PyInterpreterState_ThreadHead (ptr <PyThreadState>) (list (ptr <PyInterpreterState>))))
(define PyThreadState_Next (make-c-func 'PyThreadState_Next (ptr <PyThreadState>) (list (ptr <PyThreadState>))))
(define <PyThreadFrameGetter> (make-c-func-ptr (ptr <c-struct:_frame>) (list (ptr <PyThreadState>)) (list 'self_)))
(define _PyThreadState_GetFrame (deref (cast (ptr <PyThreadFrameGetter>) (c-lookup-symbol '_PyThreadState_GetFrame))))
(define PyArg_Parse (make-c-func-vaargs 'PyArg_Parse <c-int> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyArg_ParseTuple (make-c-func-vaargs 'PyArg_ParseTuple <c-int> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyArg_ParseTupleAndKeywords (make-c-func-vaargs 'PyArg_ParseTupleAndKeywords <c-int> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <c-char>) (ptr (ptr <c-char>)))))
(define PyArg_UnpackTuple (make-c-func-vaargs 'PyArg_UnpackTuple <c-int> (list (ptr <PyObject>) (ptr <c-char>) <c-int> <c-int>)))
(define Py_BuildValue (make-c-func-vaargs 'Py_BuildValue (ptr <PyObject>) (list (ptr <c-char>))))
(define PyArg_VaParse (make-c-func 'PyArg_VaParse <c-int> (list (ptr <PyObject>) (ptr <c-char>) <va_list>)))
(define Py_VaBuildValue (make-c-func 'Py_VaBuildValue (ptr <PyObject>) (list (ptr <c-char>) <va_list>)))
(define PyModule_AddObject (make-c-func 'PyModule_AddObject <c-int> (list (ptr <PyObject>) (ptr <c-char>) (ptr <PyObject>))))
(define PyModule_AddIntConstant (make-c-func 'PyModule_AddIntConstant <c-int> (list (ptr <PyObject>) (ptr <c-char>) <c-long>)))
(define PyModule_AddStringConstant (make-c-func 'PyModule_AddStringConstant <c-int> (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>))))
(define Py_InitModule4 (make-c-func 'Py_InitModule4 (ptr <PyObject>) (list (ptr <c-char>) (ptr <PyMethodDef>) (ptr <c-char>) (ptr <PyObject>) <c-int>)))
(define _Py_PackageContext (deref (cast (ptr (ptr <c-char>)) (c-lookup-symbol '_Py_PackageContext))))
(define-c-struct G350)
(init-c-struct! (c-struct 'G350) (list (cons 'cf_flags <c-int>)))
(define <PyCompilerFlags> <c-struct:G350>)
(define Py_SetProgramName (make-c-func 'Py_SetProgramName <c-void> (list (ptr <c-char>))))
(define Py_GetProgramName (make-c-func 'Py_GetProgramName (ptr <c-char>) (list)))
(define Py_SetPythonHome (make-c-func 'Py_SetPythonHome <c-void> (list (ptr <c-char>))))
(define Py_GetPythonHome (make-c-func 'Py_GetPythonHome (ptr <c-char>) (list)))
(define Py_Initialize (make-c-func 'Py_Initialize <c-void> (list)))
(define Py_Finalize (make-c-func 'Py_Finalize <c-void> (list)))
(define Py_IsInitialized (make-c-func 'Py_IsInitialized <c-int> (list)))
(define Py_NewInterpreter (make-c-func 'Py_NewInterpreter (ptr <PyThreadState>) (list)))
(define Py_EndInterpreter (make-c-func 'Py_EndInterpreter <c-void> (list (ptr <PyThreadState>))))
(define PyRun_AnyFile (make-c-func 'PyRun_AnyFile <c-int> (list (ptr <FILE>) (ptr <c-char>))))
(define PyRun_AnyFileEx (make-c-func 'PyRun_AnyFileEx <c-int> (list (ptr <FILE>) (ptr <c-char>) <c-int>)))
(define PyRun_AnyFileFlags (make-c-func 'PyRun_AnyFileFlags <c-int> (list (ptr <FILE>) (ptr <c-char>) (ptr <PyCompilerFlags>))))
(define PyRun_AnyFileExFlags (make-c-func 'PyRun_AnyFileExFlags <c-int> (list (ptr <FILE>) (ptr <c-char>) <c-int> (ptr <PyCompilerFlags>))))
(define PyRun_SimpleString (make-c-func 'PyRun_SimpleString <c-int> (list (ptr <c-char>))))
(define PyRun_SimpleStringFlags (make-c-func 'PyRun_SimpleStringFlags <c-int> (list (ptr <c-char>) (ptr <PyCompilerFlags>))))
(define PyRun_SimpleFile (make-c-func 'PyRun_SimpleFile <c-int> (list (ptr <FILE>) (ptr <c-char>))))
(define PyRun_SimpleFileEx (make-c-func 'PyRun_SimpleFileEx <c-int> (list (ptr <FILE>) (ptr <c-char>) <c-int>)))
(define PyRun_SimpleFileExFlags (make-c-func 'PyRun_SimpleFileExFlags <c-int> (list (ptr <FILE>) (ptr <c-char>) <c-int> (ptr <PyCompilerFlags>))))
(define PyRun_InteractiveOne (make-c-func 'PyRun_InteractiveOne <c-int> (list (ptr <FILE>) (ptr <c-char>))))
(define PyRun_InteractiveOneFlags (make-c-func 'PyRun_InteractiveOneFlags <c-int> (list (ptr <FILE>) (ptr <c-char>) (ptr <PyCompilerFlags>))))
(define PyRun_InteractiveLoop (make-c-func 'PyRun_InteractiveLoop <c-int> (list (ptr <FILE>) (ptr <c-char>))))
(define PyRun_InteractiveLoopFlags (make-c-func 'PyRun_InteractiveLoopFlags <c-int> (list (ptr <FILE>) (ptr <c-char>) (ptr <PyCompilerFlags>))))
(define-c-struct _node)
(define PyParser_SimpleParseString (make-c-func 'PyParser_SimpleParseString (ptr <c-struct:_node>) (list (ptr <c-char>) <c-int>)))
(define PyParser_SimpleParseFile (make-c-func 'PyParser_SimpleParseFile (ptr <c-struct:_node>) (list (ptr <FILE>) (ptr <c-char>) <c-int>)))
(define PyParser_SimpleParseStringFlags (make-c-func 'PyParser_SimpleParseStringFlags (ptr <c-struct:_node>) (list (ptr <c-char>) <c-int> <c-int>)))
(define PyParser_SimpleParseStringFlagsFilename (make-c-func 'PyParser_SimpleParseStringFlagsFilename (ptr <c-struct:_node>) (list (ptr <c-char>) (ptr <c-char>) <c-int> <c-int>)))
(define PyParser_SimpleParseFileFlags (make-c-func 'PyParser_SimpleParseFileFlags (ptr <c-struct:_node>) (list (ptr <FILE>) (ptr <c-char>) <c-int> <c-int>)))
(define PyRun_String (make-c-func 'PyRun_String (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <PyObject>) (ptr <PyObject>))))
(define PyRun_File (make-c-func 'PyRun_File (ptr <PyObject>) (list (ptr <FILE>) (ptr <c-char>) <c-int> (ptr <PyObject>) (ptr <PyObject>))))
(define PyRun_FileEx (make-c-func 'PyRun_FileEx (ptr <PyObject>) (list (ptr <FILE>) (ptr <c-char>) <c-int> (ptr <PyObject>) (ptr <PyObject>) <c-int>)))
(define PyRun_StringFlags (make-c-func 'PyRun_StringFlags (ptr <PyObject>) (list (ptr <c-char>) <c-int> (ptr <PyObject>) (ptr <PyObject>) (ptr <PyCompilerFlags>))))
(define PyRun_FileFlags (make-c-func 'PyRun_FileFlags (ptr <PyObject>) (list (ptr <FILE>) (ptr <c-char>) <c-int> (ptr <PyObject>) (ptr <PyObject>) (ptr <PyCompilerFlags>))))
(define PyRun_FileExFlags (make-c-func 'PyRun_FileExFlags (ptr <PyObject>) (list (ptr <FILE>) (ptr <c-char>) <c-int> (ptr <PyObject>) (ptr <PyObject>) <c-int> (ptr <PyCompilerFlags>))))
(define Py_CompileString (make-c-func 'Py_CompileString (ptr <PyObject>) (list (ptr <c-char>) (ptr <c-char>) <c-int>)))
(define Py_CompileStringFlags (make-c-func 'Py_CompileStringFlags (ptr <PyObject>) (list (ptr <c-char>) (ptr <c-char>) <c-int> (ptr <PyCompilerFlags>))))
(define-c-struct symtable)
(define Py_SymtableString (make-c-func 'Py_SymtableString (ptr <c-struct:symtable>) (list (ptr <c-char>) (ptr <c-char>) <c-int>)))
(define PyErr_Print (make-c-func 'PyErr_Print <c-void> (list)))
(define PyErr_PrintEx (make-c-func 'PyErr_PrintEx <c-void> (list <c-int>)))
(define PyErr_Display (make-c-func 'PyErr_Display <c-void> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define Py_AtExit (make-c-func 'Py_AtExit <c-int> (list (make-c-func-ptr <c-void> (list) (list)))))
(define Py_Exit (make-c-func 'Py_Exit <c-void> (list <c-int>)))
(define Py_FdIsInteractive (make-c-func 'Py_FdIsInteractive <c-int> (list (ptr <FILE>) (ptr <c-char>))))
(define Py_Main (make-c-func 'Py_Main <c-int> (list <c-int> (ptr (ptr <c-char>)))))
(define Py_GetProgramFullPath (make-c-func 'Py_GetProgramFullPath (ptr <c-char>) (list)))
(define Py_GetPrefix (make-c-func 'Py_GetPrefix (ptr <c-char>) (list)))
(define Py_GetExecPrefix (make-c-func 'Py_GetExecPrefix (ptr <c-char>) (list)))
(define Py_GetPath (make-c-func 'Py_GetPath (ptr <c-char>) (list)))
(define Py_GetVersion (make-c-func 'Py_GetVersion (ptr <c-char>) (list)))
(define Py_GetPlatform (make-c-func 'Py_GetPlatform (ptr <c-char>) (list)))
(define Py_GetCopyright (make-c-func 'Py_GetCopyright (ptr <c-char>) (list)))
(define Py_GetCompiler (make-c-func 'Py_GetCompiler (ptr <c-char>) (list)))
(define Py_GetBuildInfo (make-c-func 'Py_GetBuildInfo (ptr <c-char>) (list)))
(define _PyBuiltin_Init (make-c-func '_PyBuiltin_Init (ptr <PyObject>) (list)))
(define _PySys_Init (make-c-func '_PySys_Init (ptr <PyObject>) (list)))
(define _PyImport_Init (make-c-func '_PyImport_Init <c-void> (list)))
(define _PyExc_Init (make-c-func '_PyExc_Init <c-void> (list)))
(define _PyImportHooks_Init (make-c-func '_PyImportHooks_Init <c-void> (list)))
(define _PyFrame_Init (make-c-func '_PyFrame_Init <c-int> (list)))
(define _PyInt_Init (make-c-func '_PyInt_Init <c-int> (list)))
(define _PyExc_Fini (make-c-func '_PyExc_Fini <c-void> (list)))
(define _PyImport_Fini (make-c-func '_PyImport_Fini <c-void> (list)))
(define PyMethod_Fini (make-c-func 'PyMethod_Fini <c-void> (list)))
(define PyFrame_Fini (make-c-func 'PyFrame_Fini <c-void> (list)))
(define PyCFunction_Fini (make-c-func 'PyCFunction_Fini <c-void> (list)))
(define PyTuple_Fini (make-c-func 'PyTuple_Fini <c-void> (list)))
(define PyString_Fini (make-c-func 'PyString_Fini <c-void> (list)))
(define PyInt_Fini (make-c-func 'PyInt_Fini <c-void> (list)))
(define PyFloat_Fini (make-c-func 'PyFloat_Fini <c-void> (list)))
(define PyOS_FiniInterrupts (make-c-func 'PyOS_FiniInterrupts <c-void> (list)))
(define PyOS_Readline (make-c-func 'PyOS_Readline (ptr <c-char>) (list (ptr <FILE>) (ptr <FILE>) (ptr <c-char>))))
(define PyOS_InputHook (make-c-func 'PyOS_InputHook <c-int> (list)))
(define PyOS_ReadlineFunctionPointer (make-c-func 'PyOS_ReadlineFunctionPointer (ptr <c-char>) (list (ptr <FILE>) (ptr <FILE>) (ptr <c-char>))))
(define <PyOS_sighandler_t> (make-c-func-ptr <c-void> (list <c-int>) (list '#f)))
(define PyOS_getsig (make-c-func 'PyOS_getsig <PyOS_sighandler_t> (list <c-int>)))
(define PyOS_setsig (make-c-func 'PyOS_setsig <PyOS_sighandler_t> (list <c-int> <PyOS_sighandler_t>)))
(define PyEval_CallObjectWithKeywords (make-c-func 'PyEval_CallObjectWithKeywords (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyEval_CallObject (make-c-func 'PyEval_CallObject (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyEval_CallFunction (make-c-func-vaargs 'PyEval_CallFunction (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>))))
(define PyEval_CallMethod (make-c-func-vaargs 'PyEval_CallMethod (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>))))
(define PyEval_SetProfile (make-c-func 'PyEval_SetProfile <c-void> (list <Py_tracefunc> (ptr <PyObject>))))
(define PyEval_SetTrace (make-c-func 'PyEval_SetTrace <c-void> (list <Py_tracefunc> (ptr <PyObject>))))
(define PyEval_GetBuiltins (make-c-func 'PyEval_GetBuiltins (ptr <PyObject>) (list)))
(define PyEval_GetGlobals (make-c-func 'PyEval_GetGlobals (ptr <PyObject>) (list)))
(define PyEval_GetLocals (make-c-func 'PyEval_GetLocals (ptr <PyObject>) (list)))
(define PyEval_GetFrame (make-c-func 'PyEval_GetFrame (ptr <c-struct:_frame>) (list)))
(define PyEval_GetRestricted (make-c-func 'PyEval_GetRestricted <c-int> (list)))
(define PyEval_MergeCompilerFlags (make-c-func 'PyEval_MergeCompilerFlags <c-int> (list (ptr <PyCompilerFlags>))))
(define Py_FlushLine (make-c-func 'Py_FlushLine <c-int> (list)))
(define Py_AddPendingCall (make-c-func 'Py_AddPendingCall <c-int> (list (make-c-func-ptr <c-int> (list (ptr <c-void>)) (list '#f)) (ptr <c-void>))))
(define Py_MakePendingCalls (make-c-func 'Py_MakePendingCalls <c-int> (list)))
(define Py_SetRecursionLimit (make-c-func 'Py_SetRecursionLimit <c-void> (list <c-int>)))
(define Py_GetRecursionLimit (make-c-func 'Py_GetRecursionLimit <c-int> (list)))
(define PyEval_GetFuncName (make-c-func 'PyEval_GetFuncName (ptr <c-char>) (list (ptr <PyObject>))))
(define PyEval_GetFuncDesc (make-c-func 'PyEval_GetFuncDesc (ptr <c-char>) (list (ptr <PyObject>))))
(define PyEval_GetCallStats (make-c-func 'PyEval_GetCallStats (ptr <PyObject>) (list (ptr <PyObject>))))
(define _Py_Ticker (deref (cast (ptr <c-int>) (c-lookup-symbol '_Py_Ticker))))
(define _Py_CheckInterval (deref (cast (ptr <c-int>) (c-lookup-symbol '_Py_CheckInterval))))
(define PyEval_SaveThread (make-c-func 'PyEval_SaveThread (ptr <PyThreadState>) (list)))
(define PyEval_RestoreThread (make-c-func 'PyEval_RestoreThread <c-void> (list (ptr <PyThreadState>))))
(define PyEval_InitThreads (make-c-func 'PyEval_InitThreads <c-void> (list)))
(define PyEval_AcquireLock (make-c-func 'PyEval_AcquireLock <c-void> (list)))
(define PyEval_ReleaseLock (make-c-func 'PyEval_ReleaseLock <c-void> (list)))
(define PyEval_AcquireThread (make-c-func 'PyEval_AcquireThread <c-void> (list (ptr <PyThreadState>))))
(define PyEval_ReleaseThread (make-c-func 'PyEval_ReleaseThread <c-void> (list (ptr <PyThreadState>))))
(define PyEval_ReInitThreads (make-c-func 'PyEval_ReInitThreads <c-void> (list)))
(define _PyEval_SliceIndex (make-c-func '_PyEval_SliceIndex <c-int> (list (ptr <PyObject>) (ptr <c-int>))))
(define PySys_GetObject (make-c-func 'PySys_GetObject (ptr <PyObject>) (list (ptr <c-char>))))
(define PySys_SetObject (make-c-func 'PySys_SetObject <c-int> (list (ptr <c-char>) (ptr <PyObject>))))
(define PySys_GetFile (make-c-func 'PySys_GetFile (ptr <FILE>) (list (ptr <c-char>) (ptr <FILE>))))
(define PySys_SetArgv (make-c-func 'PySys_SetArgv <c-void> (list <c-int> (ptr (ptr <c-char>)))))
(define PySys_SetPath (make-c-func 'PySys_SetPath <c-void> (list (ptr <c-char>))))
(define PySys_WriteStdout (make-c-func-vaargs 'PySys_WriteStdout <c-void> (list (ptr <c-char>))))
(define PySys_WriteStderr (make-c-func-vaargs 'PySys_WriteStderr <c-void> (list (ptr <c-char>))))
(define PySys_ResetWarnOptions (make-c-func 'PySys_ResetWarnOptions <c-void> (list)))
(define PySys_AddWarnOption (make-c-func 'PySys_AddWarnOption <c-void> (list (ptr <c-char>))))
(define PyOS_InterruptOccurred (make-c-func 'PyOS_InterruptOccurred <c-int> (list)))
(define PyOS_InitInterrupts (make-c-func 'PyOS_InitInterrupts <c-void> (list)))
(define PyOS_AfterFork (make-c-func 'PyOS_AfterFork <c-void> (list)))
(define PyImport_GetMagicNumber (make-c-func 'PyImport_GetMagicNumber <c-long> (list)))
(define PyImport_ExecCodeModule (make-c-func 'PyImport_ExecCodeModule (ptr <PyObject>) (list (ptr <c-char>) (ptr <PyObject>))))
(define PyImport_ExecCodeModuleEx (make-c-func 'PyImport_ExecCodeModuleEx (ptr <PyObject>) (list (ptr <c-char>) (ptr <PyObject>) (ptr <c-char>))))
(define PyImport_GetModuleDict (make-c-func 'PyImport_GetModuleDict (ptr <PyObject>) (list)))
(define PyImport_AddModule (make-c-func 'PyImport_AddModule (ptr <PyObject>) (list (ptr <c-char>))))
(define PyImport_ImportModule (make-c-func 'PyImport_ImportModule (ptr <PyObject>) (list (ptr <c-char>))))
(define PyImport_ImportModuleEx (make-c-func 'PyImport_ImportModuleEx (ptr <PyObject>) (list (ptr <c-char>) (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyImport_Import (make-c-func 'PyImport_Import (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyImport_ReloadModule (make-c-func 'PyImport_ReloadModule (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyImport_Cleanup (make-c-func 'PyImport_Cleanup <c-void> (list)))
(define PyImport_ImportFrozenModule (make-c-func 'PyImport_ImportFrozenModule <c-int> (list (ptr <c-char>))))
(define _PyImport_FindExtension (make-c-func '_PyImport_FindExtension (ptr <PyObject>) (list (ptr <c-char>) (ptr <c-char>))))
(define _PyImport_FixupExtension (make-c-func '_PyImport_FixupExtension (ptr <PyObject>) (list (ptr <c-char>) (ptr <c-char>))))
(define-c-struct _inittab)
(init-c-struct! (c-struct '_inittab) (list (cons 'name (ptr <c-char>)) (cons 'initfunc (make-c-func-ptr <c-void> (list) (list)))))
(define PyImport_Inittab (deref (cast (ptr (ptr <c-struct:_inittab>)) (c-lookup-symbol 'PyImport_Inittab))))
(define PyImport_AppendInittab (make-c-func 'PyImport_AppendInittab <c-int> (list (ptr <c-char>) (make-c-func-ptr <c-void> (list) (list)))))
(define PyImport_ExtendInittab (make-c-func 'PyImport_ExtendInittab <c-int> (list (ptr <c-struct:_inittab>))))
(define-c-struct _frozen)
(init-c-struct! (c-struct '_frozen) (list (cons 'name (ptr <c-char>)) (cons 'code (ptr <c-uchar>)) (cons 'size <c-int>)))
(define PyImport_FrozenModules (deref (cast (ptr (ptr <c-struct:_frozen>)) (c-lookup-symbol 'PyImport_FrozenModules))))
(define PyObject_Cmp (make-c-func 'PyObject_Cmp <c-int> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <c-int>))))
(define PyCallable_Check (make-c-func 'PyCallable_Check <c-int> (list (ptr <PyObject>))))
(define PyObject_Call (make-c-func 'PyObject_Call (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_CallObject (make-c-func 'PyObject_CallObject (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_CallFunction (make-c-func-vaargs 'PyObject_CallFunction (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>))))
(define PyObject_CallMethod (make-c-func-vaargs 'PyObject_CallMethod (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>) (ptr <c-char>))))
(define PyObject_CallFunctionObjArgs (make-c-func-vaargs 'PyObject_CallFunctionObjArgs (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyObject_CallMethodObjArgs (make-c-func-vaargs 'PyObject_CallMethodObjArgs (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_Type (make-c-func 'PyObject_Type (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyObject_Size (make-c-func 'PyObject_Size <c-int> (list (ptr <PyObject>))))
(define PyObject_Length (make-c-func 'PyObject_Length <c-int> (list (ptr <PyObject>))))
(define PyObject_GetItem (make-c-func 'PyObject_GetItem (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_SetItem (make-c-func 'PyObject_SetItem <c-int> (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_DelItemString (make-c-func 'PyObject_DelItemString <c-int> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyObject_DelItem (make-c-func 'PyObject_DelItem <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_AsCharBuffer (make-c-func 'PyObject_AsCharBuffer <c-int> (list (ptr <PyObject>) (ptr (ptr <c-char>)) (ptr <c-int>))))
(define PyObject_CheckReadBuffer (make-c-func 'PyObject_CheckReadBuffer <c-int> (list (ptr <PyObject>))))
(define PyObject_AsReadBuffer (make-c-func 'PyObject_AsReadBuffer <c-int> (list (ptr <PyObject>) (ptr (ptr <c-void>)) (ptr <c-int>))))
(define PyObject_AsWriteBuffer (make-c-func 'PyObject_AsWriteBuffer <c-int> (list (ptr <PyObject>) (ptr (ptr <c-void>)) (ptr <c-int>))))
(define PyObject_GetIter (make-c-func 'PyObject_GetIter (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyIter_Next (make-c-func 'PyIter_Next (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyNumber_Check (make-c-func 'PyNumber_Check <c-int> (list (ptr <PyObject>))))
(define PyNumber_Add (make-c-func 'PyNumber_Add (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_Subtract (make-c-func 'PyNumber_Subtract (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_Multiply (make-c-func 'PyNumber_Multiply (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_Divide (make-c-func 'PyNumber_Divide (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_FloorDivide (make-c-func 'PyNumber_FloorDivide (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_TrueDivide (make-c-func 'PyNumber_TrueDivide (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_Remainder (make-c-func 'PyNumber_Remainder (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_Divmod (make-c-func 'PyNumber_Divmod (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_Power (make-c-func 'PyNumber_Power (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_Negative (make-c-func 'PyNumber_Negative (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyNumber_Positive (make-c-func 'PyNumber_Positive (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyNumber_Absolute (make-c-func 'PyNumber_Absolute (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyNumber_Invert (make-c-func 'PyNumber_Invert (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyNumber_Lshift (make-c-func 'PyNumber_Lshift (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_Rshift (make-c-func 'PyNumber_Rshift (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_And (make-c-func 'PyNumber_And (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_Xor (make-c-func 'PyNumber_Xor (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_Or (make-c-func 'PyNumber_Or (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_Int (make-c-func 'PyNumber_Int (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyNumber_Long (make-c-func 'PyNumber_Long (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyNumber_Float (make-c-func 'PyNumber_Float (ptr <PyObject>) (list (ptr <PyObject>))))
(define PyNumber_InPlaceAdd (make-c-func 'PyNumber_InPlaceAdd (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlaceSubtract (make-c-func 'PyNumber_InPlaceSubtract (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlaceMultiply (make-c-func 'PyNumber_InPlaceMultiply (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlaceDivide (make-c-func 'PyNumber_InPlaceDivide (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlaceFloorDivide (make-c-func 'PyNumber_InPlaceFloorDivide (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlaceTrueDivide (make-c-func 'PyNumber_InPlaceTrueDivide (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlaceRemainder (make-c-func 'PyNumber_InPlaceRemainder (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlacePower (make-c-func 'PyNumber_InPlacePower (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlaceLshift (make-c-func 'PyNumber_InPlaceLshift (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlaceRshift (make-c-func 'PyNumber_InPlaceRshift (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlaceAnd (make-c-func 'PyNumber_InPlaceAnd (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlaceXor (make-c-func 'PyNumber_InPlaceXor (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyNumber_InPlaceOr (make-c-func 'PyNumber_InPlaceOr (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PySequence_Check (make-c-func 'PySequence_Check <c-int> (list (ptr <PyObject>))))
(define PySequence_Size (make-c-func 'PySequence_Size <c-int> (list (ptr <PyObject>))))
(define PySequence_Length (make-c-func 'PySequence_Length <c-int> (list (ptr <PyObject>))))
(define PySequence_Concat (make-c-func 'PySequence_Concat (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PySequence_Repeat (make-c-func 'PySequence_Repeat (ptr <PyObject>) (list (ptr <PyObject>) <c-int>)))
(define PySequence_GetItem (make-c-func 'PySequence_GetItem (ptr <PyObject>) (list (ptr <PyObject>) <c-int>)))
(define PySequence_GetSlice (make-c-func 'PySequence_GetSlice (ptr <PyObject>) (list (ptr <PyObject>) <c-int> <c-int>)))
(define PySequence_SetItem (make-c-func 'PySequence_SetItem <c-int> (list (ptr <PyObject>) <c-int> (ptr <PyObject>))))
(define PySequence_DelItem (make-c-func 'PySequence_DelItem <c-int> (list (ptr <PyObject>) <c-int>)))
(define PySequence_SetSlice (make-c-func 'PySequence_SetSlice <c-int> (list (ptr <PyObject>) <c-int> <c-int> (ptr <PyObject>))))
(define PySequence_DelSlice (make-c-func 'PySequence_DelSlice <c-int> (list (ptr <PyObject>) <c-int> <c-int>)))
(define PySequence_Tuple (make-c-func 'PySequence_Tuple (ptr <PyObject>) (list (ptr <PyObject>))))
(define PySequence_List (make-c-func 'PySequence_List (ptr <PyObject>) (list (ptr <PyObject>))))
(define PySequence_Fast (make-c-func 'PySequence_Fast (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>))))
(define PySequence_Count (make-c-func 'PySequence_Count <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PySequence_Contains (make-c-func 'PySequence_Contains <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define _PySequence_IterSearch (make-c-func '_PySequence_IterSearch <c-int> (list (ptr <PyObject>) (ptr <PyObject>) <c-int>)))
(define PySequence_In (make-c-func 'PySequence_In <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PySequence_Index (make-c-func 'PySequence_Index <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PySequence_InPlaceConcat (make-c-func 'PySequence_InPlaceConcat (ptr <PyObject>) (list (ptr <PyObject>) (ptr <PyObject>))))
(define PySequence_InPlaceRepeat (make-c-func 'PySequence_InPlaceRepeat (ptr <PyObject>) (list (ptr <PyObject>) <c-int>)))
(define PyMapping_Check (make-c-func 'PyMapping_Check <c-int> (list (ptr <PyObject>))))
(define PyMapping_Size (make-c-func 'PyMapping_Size <c-int> (list (ptr <PyObject>))))
(define PyMapping_Length (make-c-func 'PyMapping_Length <c-int> (list (ptr <PyObject>))))
(define PyMapping_HasKeyString (make-c-func 'PyMapping_HasKeyString <c-int> (list (ptr <PyObject>) (ptr <c-char>))))
(define PyMapping_HasKey (make-c-func 'PyMapping_HasKey <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyMapping_GetItemString (make-c-func 'PyMapping_GetItemString (ptr <PyObject>) (list (ptr <PyObject>) (ptr <c-char>))))
(define PyMapping_SetItemString (make-c-func 'PyMapping_SetItemString <c-int> (list (ptr <PyObject>) (ptr <c-char>) (ptr <PyObject>))))
(define PyObject_IsInstance (make-c-func 'PyObject_IsInstance <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define PyObject_IsSubclass (make-c-func 'PyObject_IsSubclass <c-int> (list (ptr <PyObject>) (ptr <PyObject>))))
(define _Py_Mangle (make-c-func '_Py_Mangle <c-int> (list (ptr <c-char>) (ptr <c-char>) (ptr <c-char>) <size_t>)))
(define __STDC_HOSTED__ (scm-cast (begin 1)))
(define __GNUC__ (scm-cast (begin 4)))
(define __GNUC_MINOR__ (scm-cast (begin 0)))
(define __GNUC_PATCHLEVEL__ (scm-cast (begin 1)))
(define __APPLE_CC__ (scm-cast (begin 5341)))
(define __GXX_ABI_VERSION (scm-cast (begin 1002)))
(define __SCHAR_MAX__ (scm-cast (begin 127)))
(define __SHRT_MAX__ (scm-cast (begin 32767)))
(define __INT_MAX__ (scm-cast (begin 2147483647)))
(define __LONG_MAX__ (scm-cast (begin 2147483647)))
(define __LONG_LONG_MAX__ (scm-cast (begin 9223372036854775807)))
(define __WCHAR_MAX__ (scm-cast (begin 2147483647)))
(define __CHAR_BIT__ (scm-cast (begin 8)))
(define __INTMAX_MAX__ (scm-cast (begin 9223372036854775807)))
(define __FLT_EVAL_METHOD__ (scm-cast (begin 0)))
(define __FLT_RADIX__ (scm-cast (begin 2)))
(define __FLT_MANT_DIG__ (scm-cast (begin 24)))
(define __FLT_DIG__ (scm-cast (begin 6)))
(define __FLT_MIN_EXP__ (scm-cast (begin (- (cast <real> 125)))))
(define __FLT_MIN_10_EXP__ (scm-cast (begin (- (cast <real> 37)))))
(define __FLT_MAX_EXP__ (scm-cast (begin 128)))
(define __FLT_MAX_10_EXP__ (scm-cast (begin 38)))
(define __FLT_MAX__ (scm-cast (begin 3.40282347e38)))
(define __FLT_MIN__ (scm-cast (begin 1.17549435e-38)))
(define __FLT_EPSILON__ (scm-cast (begin 1.1920929e-7)))
(define __FLT_DENORM_MIN__ (scm-cast (begin 1.40129846e-45)))
(define __FLT_HAS_INFINITY__ (scm-cast (begin 1)))
(define __FLT_HAS_QUIET_NAN__ (scm-cast (begin 1)))
(define __DBL_MANT_DIG__ (scm-cast (begin 53)))
(define __DBL_DIG__ (scm-cast (begin 15)))
(define __DBL_MIN_EXP__ (scm-cast (begin (- (cast <real> 1021)))))
(define __DBL_MIN_10_EXP__ (scm-cast (begin (- (cast <real> 307)))))
(define __DBL_MAX_EXP__ (scm-cast (begin 1024)))
(define __DBL_MAX_10_EXP__ (scm-cast (begin 308)))
(define __DBL_MAX__ (scm-cast (begin 1.7976931348623157e308)))
(define __DBL_MIN__ (scm-cast (begin 2.2250738585072014e-308)))
(define __DBL_EPSILON__ (scm-cast (begin 2.220446049250313e-16)))
(define __DBL_DENORM_MIN__ (scm-cast (begin 5.0e-324)))
(define __DBL_HAS_INFINITY__ (scm-cast (begin 1)))
(define __DBL_HAS_QUIET_NAN__ (scm-cast (begin 1)))
(define __LDBL_MANT_DIG__ (scm-cast (begin 106)))
(define __LDBL_DIG__ (scm-cast (begin 31)))
(define __LDBL_MIN_EXP__ (scm-cast (begin (- (cast <real> 968)))))
(define __LDBL_MIN_10_EXP__ (scm-cast (begin (- (cast <real> 291)))))
(define __LDBL_MAX_EXP__ (scm-cast (begin 1024)))
(define __LDBL_MAX_10_EXP__ (scm-cast (begin 308)))
(define __DECIMAL_DIG__ (scm-cast (begin 33)))
(define __LDBL_HAS_INFINITY__ (scm-cast (begin 1)))
(define __LDBL_HAS_QUIET_NAN__ (scm-cast (begin 1)))
(define __REGISTER_PREFIX__ (scm-cast (begin (begin 0))))
(define __VERSION__ (scm-cast (begin "4.0.1 (Apple Computer, Inc. build 5341)")))
(define __NO_INLINE__ (scm-cast (begin 1)))
(define __FINITE_MATH_ONLY__ (scm-cast (begin 0)))
(define _ARCH_PPC (scm-cast (begin 1)))
(define __BIG_ENDIAN__ (scm-cast (begin 1)))
(define _BIG_ENDIAN (scm-cast (begin 1)))
(define __LONG_DOUBLE_128__ (scm-cast (begin 1)))
(define __ppc__ (scm-cast (begin 1)))
(define __POWERPC__ (scm-cast (begin 1)))
(define __NATURAL_ALIGNMENT__ (scm-cast (begin 1)))
(define __MACH__ (scm-cast (begin 1)))
(define __APPLE__ (scm-cast (begin 1)))
(define __strong (scm-cast (begin (begin 0))))
(define __weak (scm-cast (begin (begin 0))))
(define __PIC__ (scm-cast (begin 1)))
(define __DYNAMIC__ (scm-cast (begin 1)))
(define-syntax __attribute__ (syntax-rules () ((_ x) (scm-cast (begin (begin 0))))))
(define Py_PYTHON_H (scm-cast (begin (begin 0))))
(define PY_RELEASE_LEVEL_ALPHA (scm-cast (begin 10)))
(define PY_RELEASE_LEVEL_BETA (scm-cast (begin 11)))
(define PY_RELEASE_LEVEL_GAMMA (scm-cast (begin 12)))
(define PY_RELEASE_LEVEL_FINAL (scm-cast (begin 15)))
(define PY_MAJOR_VERSION (scm-cast (begin 2)))
(define PY_MINOR_VERSION (scm-cast (begin 3)))
(define PY_MICRO_VERSION (scm-cast (begin 5)))
(define PY_RELEASE_LEVEL (scm-cast (begin 15)))
(define PY_RELEASE_SERIAL (scm-cast (begin 0)))
(define PY_VERSION (scm-cast (begin "2.3.5")))
(define PY_VERSION_HEX (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (c-<< (cast <integer> 2) (cast <integer> 24))) (cast <integer> (c-<< (cast <integer> 3) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 5) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> 15) (cast <integer> 4))))) (cast <integer> (c-<< (cast <integer> 0) (cast <integer> 0)))))))
(define Py_PYCONFIG_H (scm-cast (begin (begin 0))))
(define ENABLE_IPV6 (scm-cast (begin 1)))
(define HAVE_ADDRINFO (scm-cast (begin 1)))
(define HAVE_ALARM (scm-cast (begin 1)))
(define HAVE_BROKEN_NICE (scm-cast (begin 1)))
(define HAVE_BROKEN_POSIX_SEMAPHORES (scm-cast (begin 1)))
(define HAVE_CHOWN (scm-cast (begin 1)))
(define HAVE_CHROOT (scm-cast (begin 1)))
(define HAVE_CLOCK (scm-cast (begin 1)))
(define HAVE_CONFSTR (scm-cast (begin 1)))
(define HAVE_CTERMID (scm-cast (begin 1)))
(define HAVE_CTERMID_R (scm-cast (begin 1)))
(define HAVE_CURSES_H (scm-cast (begin 1)))
(define HAVE_DEVICE_MACROS (scm-cast (begin 1)))
(define HAVE_DIRENT_H (scm-cast (begin 1)))
(define HAVE_DLFCN_H (scm-cast (begin 1)))
(define HAVE_DLOPEN (scm-cast (begin 1)))
(define HAVE_DUP2 (scm-cast (begin 1)))
(define HAVE_DYNAMIC_LOADING (scm-cast (begin 1)))
(define HAVE_EXECV (scm-cast (begin 1)))
(define HAVE_FCHDIR (scm-cast (begin 1)))
(define HAVE_FCNTL_H (scm-cast (begin 1)))
(define HAVE_FLOCK (scm-cast (begin 1)))
(define HAVE_FORK (scm-cast (begin 1)))
(define HAVE_FORKPTY (scm-cast (begin 1)))
(define HAVE_FPATHCONF (scm-cast (begin 1)))
(define HAVE_FSEEKO (scm-cast (begin 1)))
(define HAVE_FSTATVFS (scm-cast (begin 1)))
(define HAVE_FSYNC (scm-cast (begin 1)))
(define HAVE_FTELLO (scm-cast (begin 1)))
(define HAVE_FTIME (scm-cast (begin 1)))
(define HAVE_FTRUNCATE (scm-cast (begin 1)))
(define HAVE_GAI_STRERROR (scm-cast (begin 1)))
(define HAVE_GETADDRINFO (scm-cast (begin 1)))
(define HAVE_GETCWD (scm-cast (begin 1)))
(define HAVE_GETC_UNLOCKED (scm-cast (begin 1)))
(define HAVE_GETGROUPS (scm-cast (begin 1)))
(define HAVE_GETHOSTBYNAME (scm-cast (begin 1)))
(define HAVE_GETLOADAVG (scm-cast (begin 1)))
(define HAVE_GETLOGIN (scm-cast (begin 1)))
(define HAVE_GETNAMEINFO (scm-cast (begin 1)))
(define HAVE_GETPAGESIZE (scm-cast (begin 1)))
(define HAVE_GETPEERNAME (scm-cast (begin 1)))
(define HAVE_GETPGID (scm-cast (begin 1)))
(define HAVE_GETPGRP (scm-cast (begin 1)))
(define HAVE_GETPID (scm-cast (begin 1)))
(define HAVE_GETPRIORITY (scm-cast (begin 1)))
(define HAVE_GETPWENT (scm-cast (begin 1)))
(define HAVE_GETTIMEOFDAY (scm-cast (begin 1)))
(define HAVE_GETWD (scm-cast (begin 1)))
(define HAVE_GRP_H (scm-cast (begin 1)))
(define HAVE_HSTRERROR (scm-cast (begin 1)))
(define HAVE_HYPOT (scm-cast (begin 1)))
(define HAVE_INET_ATON (scm-cast (begin 1)))
(define HAVE_INET_PTON (scm-cast (begin 1)))
(define HAVE_INTTYPES_H (scm-cast (begin 1)))
(define HAVE_KILL (scm-cast (begin 1)))
(define HAVE_KILLPG (scm-cast (begin 1)))
(define HAVE_LANGINFO_H (scm-cast (begin 1)))
(define HAVE_LARGEFILE_SUPPORT (scm-cast (begin 1)))
(define HAVE_LCHOWN (scm-cast (begin 1)))
(define HAVE_LIBDL (scm-cast (begin 1)))
(define HAVE_LIMITS_H (scm-cast (begin 1)))
(define HAVE_LINK (scm-cast (begin 1)))
(define HAVE_LOCALE_H (scm-cast (begin 1)))
(define HAVE_LONG_LONG (scm-cast (begin 1)))
(define HAVE_LSTAT (scm-cast (begin 1)))
(define HAVE_MAKEDEV (scm-cast (begin 1)))
(define HAVE_MEMMOVE (scm-cast (begin 1)))
(define HAVE_MEMORY_H (scm-cast (begin 1)))
(define HAVE_MKFIFO (scm-cast (begin 1)))
(define HAVE_MKNOD (scm-cast (begin 1)))
(define HAVE_MKTIME (scm-cast (begin 1)))
(define HAVE_NCURSES_H (scm-cast (begin 1)))
(define HAVE_NICE (scm-cast (begin 1)))
(define HAVE_OPENPTY (scm-cast (begin 1)))
(define HAVE_PATHCONF (scm-cast (begin 1)))
(define HAVE_PAUSE (scm-cast (begin 1)))
(define HAVE_PROTOTYPES (scm-cast (begin 1)))
(define HAVE_PTHREAD_H (scm-cast (begin 1)))
(define HAVE_PTHREAD_SIGMASK (scm-cast (begin 1)))
(define HAVE_PUTENV (scm-cast (begin 1)))
(define HAVE_READLINK (scm-cast (begin 1)))
(define HAVE_REALPATH (scm-cast (begin 1)))
(define HAVE_RL_COMPLETION_APPEND_CHARACTER (scm-cast (begin 1)))
(define HAVE_RL_PRE_INPUT_HOOK (scm-cast (begin 1)))
(define HAVE_SELECT (scm-cast (begin 1)))
(define HAVE_SETEGID (scm-cast (begin 1)))
(define HAVE_SETEUID (scm-cast (begin 1)))
(define HAVE_SETGID (scm-cast (begin 1)))
(define HAVE_SETGROUPS (scm-cast (begin 1)))
(define HAVE_SETLOCALE (scm-cast (begin 1)))
(define HAVE_SETPGID (scm-cast (begin 1)))
(define HAVE_SETPGRP (scm-cast (begin 1)))
(define HAVE_SETREGID (scm-cast (begin 1)))
(define HAVE_SETREUID (scm-cast (begin 1)))
(define HAVE_SETSID (scm-cast (begin 1)))
(define HAVE_SETUID (scm-cast (begin 1)))
(define HAVE_SETVBUF (scm-cast (begin 1)))
(define HAVE_SIGACTION (scm-cast (begin 1)))
(define HAVE_SIGINTERRUPT (scm-cast (begin 1)))
(define HAVE_SIGNAL_H (scm-cast (begin 1)))
(define HAVE_SIGRELSE (scm-cast (begin 1)))
(define HAVE_SNPRINTF (scm-cast (begin 1)))
(define HAVE_SOCKADDR_SA_LEN (scm-cast (begin 1)))
(define HAVE_SOCKADDR_STORAGE (scm-cast (begin 1)))
(define HAVE_STATVFS (scm-cast (begin 1)))
(define HAVE_STDARG_H (scm-cast (begin 1)))
(define HAVE_STDARG_PROTOTYPES (scm-cast (begin 1)))
(define HAVE_STDDEF_H (scm-cast (begin 1)))
(define HAVE_STDINT_H (scm-cast (begin 1)))
(define HAVE_STDLIB_H (scm-cast (begin 1)))
(define HAVE_STRDUP (scm-cast (begin 1)))
(define HAVE_STRERROR (scm-cast (begin 1)))
(define HAVE_STRFTIME (scm-cast (begin 1)))
(define HAVE_STRINGS_H (scm-cast (begin 1)))
(define HAVE_STRING_H (scm-cast (begin 1)))
(define HAVE_STRPTIME (scm-cast (begin 1)))
(define HAVE_STRUCT_STAT_ST_BLKSIZE (scm-cast (begin 1)))
(define HAVE_STRUCT_STAT_ST_BLOCKS (scm-cast (begin 1)))
(define HAVE_STRUCT_STAT_ST_RDEV (scm-cast (begin 1)))
(define HAVE_STRUCT_TM_TM_ZONE (scm-cast (begin 1)))
(define HAVE_ST_BLOCKS (scm-cast (begin 1)))
(define HAVE_SYMLINK (scm-cast (begin 1)))
(define HAVE_SYSCONF (scm-cast (begin 1)))
(define HAVE_SYSEXITS_H (scm-cast (begin 1)))
(define HAVE_SYS_FILE_H (scm-cast (begin 1)))
(define HAVE_SYS_LOCK_H (scm-cast (begin 1)))
(define HAVE_SYS_PARAM_H (scm-cast (begin 1)))
(define HAVE_SYS_POLL_H (scm-cast (begin 1)))
(define HAVE_SYS_RESOURCE_H (scm-cast (begin 1)))
(define HAVE_SYS_SELECT_H (scm-cast (begin 1)))
(define HAVE_SYS_SOCKET_H (scm-cast (begin 1)))
(define HAVE_SYS_STAT_H (scm-cast (begin 1)))
(define HAVE_SYS_TIMES_H (scm-cast (begin 1)))
(define HAVE_SYS_TIME_H (scm-cast (begin 1)))
(define HAVE_SYS_TYPES_H (scm-cast (begin 1)))
(define HAVE_SYS_UN_H (scm-cast (begin 1)))
(define HAVE_SYS_UTSNAME_H (scm-cast (begin 1)))
(define HAVE_SYS_WAIT_H (scm-cast (begin 1)))
(define HAVE_TCGETPGRP (scm-cast (begin 1)))
(define HAVE_TCSETPGRP (scm-cast (begin 1)))
(define HAVE_TEMPNAM (scm-cast (begin 1)))
(define HAVE_TERMIOS_H (scm-cast (begin 1)))
(define HAVE_TIMEGM (scm-cast (begin 1)))
(define HAVE_TIMES (scm-cast (begin 1)))
(define HAVE_TMPFILE (scm-cast (begin 1)))
(define HAVE_TMPNAM (scm-cast (begin 1)))
(define HAVE_TM_ZONE (scm-cast (begin 1)))
(define HAVE_TRUNCATE (scm-cast (begin 1)))
(define HAVE_UNAME (scm-cast (begin 1)))
(define HAVE_UNISTD_H (scm-cast (begin 1)))
(define HAVE_UNSETENV (scm-cast (begin 1)))
(define HAVE_UTIMES (scm-cast (begin 1)))
(define HAVE_UTIME_H (scm-cast (begin 1)))
(define HAVE_WAITPID (scm-cast (begin 1)))
(define HAVE_WCHAR_H (scm-cast (begin 1)))
(define HAVE_WCSCOLL (scm-cast (begin 1)))
(define HAVE_WORKING_TZSET (scm-cast (begin 1)))
(define MVWDELCH_IS_EXPRESSION (scm-cast (begin 1)))
(define PTHREAD_SYSTEM_SCHED_SUPPORTED (scm-cast (begin 1)))
(define Py_UNICODE_SIZE (scm-cast (begin 2)))
(define Py_USING_UNICODE (scm-cast (begin 1)))
(define SETPGRP_HAVE_ARG (scm-cast (begin 1)))
(define SIZEOF_CHAR (scm-cast (begin 1)))
(define SIZEOF_DOUBLE (scm-cast (begin 8)))
(define SIZEOF_FLOAT (scm-cast (begin 4)))
(define SIZEOF_FPOS_T (scm-cast (begin 8)))
(define SIZEOF_INT (scm-cast (begin 4)))
(define SIZEOF_LONG (scm-cast (begin 4)))
(define SIZEOF_LONG_LONG (scm-cast (begin 8)))
(define SIZEOF_OFF_T (scm-cast (begin 8)))
(define SIZEOF_PTHREAD_T (scm-cast (begin 4)))
(define SIZEOF_SHORT (scm-cast (begin 2)))
(define SIZEOF_TIME_T (scm-cast (begin 4)))
(define SIZEOF_VOID_P (scm-cast (begin 4)))
(define SIZEOF_WCHAR_T (scm-cast (begin 4)))
(define STDC_HEADERS (scm-cast (begin 1)))
(define SYS_SELECT_WITH_SYS_TIME (scm-cast (begin 1)))
(define TIME_WITH_SYS_TIME (scm-cast (begin 1)))
(define USE_TOOLBOX_OBJECT_GLUE (scm-cast (begin 1)))
(define WINDOW_HAS_FLAGS (scm-cast (begin 1)))
(define WITH_DOC_STRINGS (scm-cast (begin 1)))
(define WITH_DYLD (scm-cast (begin 1)))
(define WITH_NEXT_FRAMEWORK (scm-cast (begin 1)))
(define WITH_PYMALLOC (scm-cast (begin 1)))
(define WITH_THREAD (scm-cast (begin 1)))
(define WITH_UNIVERSAL_NEWLINES (scm-cast (begin 1)))
(define WORDS_BIGENDIAN (scm-cast (begin 1)))
(define _BSD_TYPES (scm-cast (begin 1)))
(define _FILE_OFFSET_BITS (scm-cast (begin 64)))
(define _GNU_SOURCE (scm-cast (begin 1)))
(define _LARGEFILE_SOURCE (scm-cast (begin 1)))
(define _NETBSD_SOURCE (scm-cast (begin 1)))
(define _REENTRANT (scm-cast (begin 1)))
(define __BSD_VISIBLE (scm-cast (begin 1)))
(define WITH_CYCLE_GC (scm-cast (begin 1)))
(define _GCC_LIMITS_H_ (scm-cast (begin (begin 0))))
(define _LIMITS_H_ (scm-cast (begin (begin 0))))
(define _PPC_LIMITS_H_ (scm-cast (begin (begin 0))))
(define _PPC__LIMITS_H_ (scm-cast (begin (begin 0))))
(define __DARWIN_CLK_TCK (scm-cast (begin 100)))
(define CHAR_BIT (scm-cast (begin 8)))
(define MB_LEN_MAX (scm-cast (begin 6)))
(define CLK_TCK (scm-cast (begin 100)))
(define SCHAR_MAX (scm-cast (begin 127)))
(define SCHAR_MIN (scm-cast (begin (c-- (- (cast <real> 127)) (cast <real> 1)))))
(define UCHAR_MAX (scm-cast (begin (c-+ (* (cast <real> 127) (cast <real> 2)) (cast <real> 1)))))
(define CHAR_MAX (scm-cast (begin 127)))
(define CHAR_MIN (scm-cast (begin (c-- (- (cast <real> 127)) (cast <real> 1)))))
(define USHRT_MAX (scm-cast (begin (c-+ (* (cast <real> 32767) (cast <real> 2)) (cast <real> 1)))))
(define SHRT_MAX (scm-cast (begin 32767)))
(define SHRT_MIN (scm-cast (begin (c-- (- (cast <real> 32767)) (cast <real> 1)))))
(define UINT_MAX (scm-cast (begin (c-+ (* (cast <real> 2147483647) (cast <real> 2)) (cast <real> 1)))))
(define INT_MAX (scm-cast (begin 2147483647)))
(define INT_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define ULONG_MAX (scm-cast (begin (c-+ (* (cast <real> 2147483647) (cast <real> 2)) (cast <real> 1)))))
(define LONG_MAX (scm-cast (begin 2147483647)))
(define LONG_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define ULLONG_MAX (scm-cast (begin 9223372036854775807)))
(define LLONG_MAX (scm-cast (begin 9223372036854775807)))
(define LLONG_MIN (scm-cast (begin (c-- (- (cast <real> 9223372036854775807)) (cast <real> 1)))))
(define SSIZE_MAX (scm-cast (begin 2147483647)))
(define SIZE_T_MAX (scm-cast (begin (c-+ (* (cast <real> 2147483647) (cast <real> 2)) (cast <real> 1)))))
(define UQUAD_MAX (scm-cast (begin 9223372036854775807)))
(define QUAD_MAX (scm-cast (begin 9223372036854775807)))
(define QUAD_MIN (scm-cast (begin (c-- (- (cast <real> 9223372036854775807)) (cast <real> 1)))))
(define LONG_BIT (scm-cast (begin 32)))
(define WORD_BIT (scm-cast (begin 32)))
(define _SYS_SYSLIMITS_H_ (scm-cast (begin (begin 0))))
(define ARG_MAX (scm-cast (begin (* (cast <real> 256) (cast <real> 1024)))))
(define CHILD_MAX (scm-cast (begin 100)))
(define GID_MAX (scm-cast (begin 2147483647)))
(define LINK_MAX (scm-cast (begin 32767)))
(define MAX_CANON (scm-cast (begin 255)))
(define MAX_INPUT (scm-cast (begin 255)))
(define NAME_MAX (scm-cast (begin 255)))
(define NGROUPS_MAX (scm-cast (begin 16)))
(define UID_MAX (scm-cast (begin 2147483647)))
(define OPEN_MAX (scm-cast (begin 10240)))
(define PATH_MAX (scm-cast (begin 1024)))
(define PIPE_BUF (scm-cast (begin 512)))
(define BC_BASE_MAX (scm-cast (begin 99)))
(define BC_DIM_MAX (scm-cast (begin 2048)))
(define BC_SCALE_MAX (scm-cast (begin 99)))
(define BC_STRING_MAX (scm-cast (begin 1000)))
(define COLL_WEIGHTS_MAX (scm-cast (begin 2)))
(define EQUIV_CLASS_MAX (scm-cast (begin 2)))
(define EXPR_NEST_MAX (scm-cast (begin 32)))
(define LINE_MAX (scm-cast (begin 2048)))
(define RE_DUP_MAX (scm-cast (begin 255)))
(define _POSIX_AIO_LISTIO_MAX (scm-cast (begin 16)))
(define _POSIX_AIO_MAX (scm-cast (begin 1)))
(define _POSIX_DELAYTIMER_MAX (scm-cast (begin 32)))
(define _POSIX_HOST_NAME_MAX (scm-cast (begin 255)))
(define _POSIX_LOGIN_NAME_MAX (scm-cast (begin 9)))
(define _POSIX_MQ_OPEN_MAX (scm-cast (begin 8)))
(define _POSIX_MQ_PRIO_MAX (scm-cast (begin 32)))
(define _POSIX_ARG_MAX (scm-cast (begin 4096)))
(define _POSIX_CHILD_MAX (scm-cast (begin 25)))
(define _POSIX_LINK_MAX (scm-cast (begin 8)))
(define _POSIX_MAX_CANON (scm-cast (begin 255)))
(define _POSIX_MAX_INPUT (scm-cast (begin 255)))
(define _POSIX_NAME_MAX (scm-cast (begin 14)))
(define _POSIX_NGROUPS_MAX (scm-cast (begin 8)))
(define _POSIX_OPEN_MAX (scm-cast (begin 20)))
(define _POSIX_PATH_MAX (scm-cast (begin 256)))
(define _POSIX_PIPE_BUF (scm-cast (begin 512)))
(define _POSIX_SSIZE_MAX (scm-cast (begin 32767)))
(define _POSIX_STREAM_MAX (scm-cast (begin 8)))
(define _POSIX_TZNAME_MAX (scm-cast (begin 6)))
(define _POSIX_RTSIG_MAX (scm-cast (begin 8)))
(define _POSIX_SEM_NSEMS_MAX (scm-cast (begin 256)))
(define _POSIX_SEM_VALUE_MAX (scm-cast (begin 32767)))
(define _POSIX_SIGQUEUE_MAX (scm-cast (begin 32)))
(define _POSIX_SSIZE_MAX (scm-cast (begin 32767)))
(define _POSIX_STREAM_MAX (scm-cast (begin 8)))
(define _POSIX_SS_REPL_MAX (scm-cast (begin 4)))
(define _POSIX_SYMLINK_MAX (scm-cast (begin 255)))
(define _POSIX_SYMLOOP_MAX (scm-cast (begin 8)))
(define _POSIX_THREAD_DESTRUCTOR_ITERATIONS (scm-cast (begin 4)))
(define _POSIX_THREAD_KEYS_MAX (scm-cast (begin 128)))
(define _POSIX_THREAD_THREADS_MAX (scm-cast (begin 64)))
(define _POSIX_TIMER_MAX (scm-cast (begin 32)))
(define _POSIX_TRACE_EVENT_NAME_MAX (scm-cast (begin 30)))
(define _POSIX_TRACE_NAME_MAX (scm-cast (begin 8)))
(define _POSIX_TRACE_SYS_MAX (scm-cast (begin 8)))
(define _POSIX_TRACE_USER_EVENT_MAX (scm-cast (begin 32)))
(define _POSIX_TTY_NAME_MAX (scm-cast (begin 9)))
(define _POSIX2_BC_BASE_MAX (scm-cast (begin 99)))
(define _POSIX2_BC_DIM_MAX (scm-cast (begin 2048)))
(define _POSIX2_BC_SCALE_MAX (scm-cast (begin 99)))
(define _POSIX2_BC_STRING_MAX (scm-cast (begin 1000)))
(define _POSIX2_CHARCLASS_NAME_MAX (scm-cast (begin 14)))
(define _POSIX2_COLL_WEIGHTS_MAX (scm-cast (begin 2)))
(define _POSIX2_EQUIV_CLASS_MAX (scm-cast (begin 2)))
(define _POSIX2_EXPR_NEST_MAX (scm-cast (begin 32)))
(define _POSIX2_LINE_MAX (scm-cast (begin 2048)))
(define _POSIX2_RE_DUP_MAX (scm-cast (begin 255)))
(define PTHREAD_STACK_MIN (scm-cast (begin 8192)))
(define PTHREAD_DESTRUCTOR_ITERATIONS (scm-cast (begin 4)))
(define PTHREAD_KEYS_MAX (scm-cast (begin 128)))
(define PASS_MAX (scm-cast (begin 128)))
(define NL_ARGMAX (scm-cast (begin 9)))
(define NL_LANGMAX (scm-cast (begin 14)))
(define NL_MSGMAX (scm-cast (begin 32767)))
(define NL_NMAX (scm-cast (begin 1)))
(define NL_SETMAX (scm-cast (begin 255)))
(define NL_TEXTMAX (scm-cast (begin 2048)))
(define _XOPEN_IOV_MAX (scm-cast (begin 16)))
(define IOV_MAX (scm-cast (begin 1024)))
(define _XOPEN_NAME_MAX (scm-cast (begin 255)))
(define _XOPEN_PATH_MAX (scm-cast (begin 1024)))
(define _LIMITS_H___ (scm-cast (begin (begin 0))))
(define CHAR_BIT (scm-cast (begin 8)))
(define SCHAR_MIN (scm-cast (begin (c-- (- (cast <real> 127)) (cast <real> 1)))))
(define SCHAR_MAX (scm-cast (begin 127)))
(define UCHAR_MAX (scm-cast (begin (c-+ (* (cast <real> 127) (cast <real> 2)) (cast <real> 1)))))
(define CHAR_MIN (scm-cast (begin (c-- (- (cast <real> 127)) (cast <real> 1)))))
(define CHAR_MAX (scm-cast (begin 127)))
(define SHRT_MIN (scm-cast (begin (c-- (- (cast <real> 32767)) (cast <real> 1)))))
(define SHRT_MAX (scm-cast (begin 32767)))
(define USHRT_MAX (scm-cast (begin (c-+ (* (cast <real> 32767) (cast <real> 2)) (cast <real> 1)))))
(define INT_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define INT_MAX (scm-cast (begin 2147483647)))
(define UINT_MAX (scm-cast (begin (c-+ (* (cast <real> 2147483647) (cast <real> 2)) (cast <real> 1)))))
(define LONG_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define LONG_MAX (scm-cast (begin 2147483647)))
(define ULONG_MAX (scm-cast (begin (c-+ (* (cast <real> 2147483647) (cast <real> 2)) (cast <real> 1)))))
(define LONG_LONG_MIN (scm-cast (begin (c-- (- (cast <real> 9223372036854775807)) (cast <real> 1)))))
(define LONG_LONG_MAX (scm-cast (begin 9223372036854775807)))
(define ULONG_LONG_MAX (scm-cast (begin (c-+ (* (cast <real> 9223372036854775807) (cast <real> 2)) (cast <real> 1)))))
(define _STDIO_H_ (scm-cast (begin (begin 0))))
(define __TYPES_H_ (scm-cast (begin (begin 0))))
(define _SYS__TYPES_H_ (scm-cast (begin (begin 0))))
(define _CDEFS_H_ (scm-cast (begin (begin 0))))
(define __BEGIN_DECLS (scm-cast (begin (begin 0))))
(define __END_DECLS (scm-cast (begin (begin 0))))
(define-syntax __P (syntax-rules () ((_ protos) (scm-cast (begin protos)))))
(define-syntax __STRING (syntax-rules () ((_ x) (scm-cast (begin "x")))))
(define __dead2 (scm-cast (begin (begin 0))))
(define __pure2 (scm-cast (begin (begin 0))))
(define __unused (scm-cast (begin (begin 0))))
(define __dead (scm-cast (begin (begin 0))))
(define __pure (scm-cast (begin (begin 0))))
(define __restrict (scm-cast (begin (begin 0))))
(define-syntax __printflike (syntax-rules () ((_ fmtarg firstvararg) (scm-cast (begin (begin 0))))))
(define-syntax __scanflike (syntax-rules () ((_ fmtarg firstvararg) (scm-cast (begin (begin 0))))))
(define __DARWIN_UNIX03 (scm-cast (begin 0)))
(define-syntax __DARWIN_ALIAS (syntax-rules () ((_ sym) (scm-cast (begin (begin 0))))))
(define __DARWIN_LONG_DOUBLE_IS_DOUBLE (scm-cast (begin 0)))
(define __DARWIN_ALIGN_POWER (scm-cast (begin 0)))
(define __DARWIN_ALIGN_NATURAL (scm-cast (begin 0)))
(define _BSD_MACHINE__TYPES_H_ (scm-cast (begin (begin 0))))
(define _BSD_PPC__TYPES_H_ (scm-cast (begin (begin 0))))
(define __PTHREAD_SIZE__ (scm-cast (begin 596)))
(define __PTHREAD_ATTR_SIZE__ (scm-cast (begin 36)))
(define __PTHREAD_MUTEXATTR_SIZE__ (scm-cast (begin 8)))
(define __PTHREAD_MUTEX_SIZE__ (scm-cast (begin 40)))
(define __PTHREAD_CONDATTR_SIZE__ (scm-cast (begin 4)))
(define __PTHREAD_COND_SIZE__ (scm-cast (begin 24)))
(define __PTHREAD_ONCE_SIZE__ (scm-cast (begin 4)))
(define __PTHREAD_RWLOCK_SIZE__ (scm-cast (begin 124)))
(define __PTHREAD_RWLOCKATTR_SIZE__ (scm-cast (begin 12)))
(define __DARWIN_NULL (scm-cast (begin (cast (ptr <c-void>) 0))))
(define __DARWIN_WCHAR_MAX (scm-cast (begin 2147483647)))
(define __DARWIN_WCHAR_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define __DARWIN_WEOF (scm-cast (begin (cast <__darwin_wint_t> (- (cast <real> 1))))))
(define _VA_LIST (scm-cast (begin (begin 0))))
(define _SIZE_T (scm-cast (begin (begin 0))))
(define NULL (scm-cast (begin (cast (ptr <c-void>) 0))))
(define _FSTDIO (scm-cast (begin (begin 0))))
(define __SLBF (scm-cast (begin 1)))
(define __SNBF (scm-cast (begin 2)))
(define __SRD (scm-cast (begin 4)))
(define __SWR (scm-cast (begin 8)))
(define __SRW (scm-cast (begin 16)))
(define __SEOF (scm-cast (begin 32)))
(define __SERR (scm-cast (begin 64)))
(define __SMBF (scm-cast (begin 128)))
(define __SAPP (scm-cast (begin 256)))
(define __SSTR (scm-cast (begin 512)))
(define __SOPT (scm-cast (begin 1024)))
(define __SNPT (scm-cast (begin 2048)))
(define __SOFF (scm-cast (begin 4096)))
(define __SMOD (scm-cast (begin 8192)))
(define __SALC (scm-cast (begin 16384)))
(define __SIGN (scm-cast (begin 32768)))
(define _IOFBF (scm-cast (begin 0)))
(define _IOLBF (scm-cast (begin 1)))
(define _IONBF (scm-cast (begin 2)))
(define BUFSIZ (scm-cast (begin 1024)))
(define EOF (scm-cast (begin (- (cast <real> 1)))))
(define FOPEN_MAX (scm-cast (begin 20)))
(define FILENAME_MAX (scm-cast (begin 1024)))
(define P_tmpdir (scm-cast (begin "/var/tmp/")))
(define L_tmpnam (scm-cast (begin 1024)))
(define TMP_MAX (scm-cast (begin 308915776)))
(define SEEK_SET (scm-cast (begin 0)))
(define SEEK_CUR (scm-cast (begin 1)))
(define SEEK_END (scm-cast (begin 2)))
(define stdin (scm-cast (begin (ptr (ref __sF (cast <integer> 0))))))
(define stdout (scm-cast (begin (ptr (ref __sF (cast <integer> 1))))))
(define stderr (scm-cast (begin (ptr (ref __sF (cast <integer> 2))))))
(define L_cuserid (scm-cast (begin 9)))
(define L_ctermid (scm-cast (begin 1024)))
(define-syntax fropen (syntax-rules () ((_ cookie fn) (scm-cast (begin (funopen cookie fn 0 0 0))))))
(define-syntax fwopen (syntax-rules () ((_ cookie fn) (scm-cast (begin (funopen cookie 0 fn 0 0))))))
(define-syntax __sgetc (syntax-rules () ((_ p) (scm-cast (begin (c-if (cast <real> (c-< (cast <real> (pre-- (raw-ref (deref (identity p)) '_r))) (cast <real> 0))) (__srget p) (cast <c-int> (deref (post++ (raw-ref (deref (identity p)) '_p))))))))))
(define-syntax __sfeof (syntax-rules () ((_ p) (scm-cast (begin (c-!= (cast <real> (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) (cast <integer> 32))) (cast <real> 0)))))))
(define-syntax __sferror (syntax-rules () ((_ p) (scm-cast (begin (c-!= (cast <real> (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) (cast <integer> 64))) (cast <real> 0)))))))
(define-syntax __sclearerr (syntax-rules () ((_ p) (scm-cast (begin (cast <c-void> (let ((%v (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) (cast <integer> (lognot (cast <integer> (logior (cast <integer> 64) (cast <integer> 32)))))))) (set! (ref (deref (identity p)) '_flags) %v) %v)))))))
(define-syntax __sfileno (syntax-rules () ((_ p) (scm-cast (begin (raw-ref (deref (identity p)) '_file))))))
(define-syntax feof_unlocked (syntax-rules () ((_ p) (scm-cast (begin (c-!= (cast <real> (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) (cast <integer> 32))) (cast <real> 0)))))))
(define-syntax ferror_unlocked (syntax-rules () ((_ p) (scm-cast (begin (c-!= (cast <real> (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) (cast <integer> 64))) (cast <real> 0)))))))
(define-syntax clearerr_unlocked (syntax-rules () ((_ p) (scm-cast (begin (cast <c-void> (let ((%v (logand (cast <integer> (raw-ref (deref (identity p)) '_flags)) (cast <integer> (lognot (cast <integer> (logior (cast <integer> 64) (cast <integer> 32)))))))) (set! (ref (deref (identity p)) '_flags) %v) %v)))))))
(define-syntax fileno_unlocked (syntax-rules () ((_ p) (scm-cast (begin (raw-ref (deref (identity p)) '_file))))))
(define-syntax getc_unlocked (syntax-rules () ((_ fp) (scm-cast (begin (c-if (cast <real> (c-< (cast <real> (pre-- (raw-ref (deref (identity fp)) '_r))) (cast <real> 0))) (__srget fp) (cast <c-int> (deref (post++ (raw-ref (deref (identity fp)) '_p))))))))))
(define-syntax getchar_unlocked (syntax-rules () ((_ ||) (scm-cast (begin (c-if (cast <real> (c-< (cast <real> (pre-- (raw-ref (deref (ptr (ref __sF (cast <integer> 0)))) '_r))) (cast <real> 0))) (__srget (ptr (ref __sF (cast <integer> 0)))) (cast <c-int> (deref (post++ (raw-ref (deref (ptr (ref __sF (cast <integer> 0)))) '_p))))))))))
(define _STRING_H_ (scm-cast (begin (begin 0))))
(define _SSIZE_T (scm-cast (begin (begin 0))))
(define _SYS_ERRNO_H_ (scm-cast (begin (begin 0))))
(define EPERM (scm-cast (begin 1)))
(define ENOENT (scm-cast (begin 2)))
(define ESRCH (scm-cast (begin 3)))
(define EINTR (scm-cast (begin 4)))
(define EIO (scm-cast (begin 5)))
(define ENXIO (scm-cast (begin 6)))
(define E2BIG (scm-cast (begin 7)))
(define ENOEXEC (scm-cast (begin 8)))
(define EBADF (scm-cast (begin 9)))
(define ECHILD (scm-cast (begin 10)))
(define EDEADLK (scm-cast (begin 11)))
(define ENOMEM (scm-cast (begin 12)))
(define EACCES (scm-cast (begin 13)))
(define EFAULT (scm-cast (begin 14)))
(define ENOTBLK (scm-cast (begin 15)))
(define EBUSY (scm-cast (begin 16)))
(define EEXIST (scm-cast (begin 17)))
(define EXDEV (scm-cast (begin 18)))
(define ENODEV (scm-cast (begin 19)))
(define ENOTDIR (scm-cast (begin 20)))
(define EISDIR (scm-cast (begin 21)))
(define EINVAL (scm-cast (begin 22)))
(define ENFILE (scm-cast (begin 23)))
(define EMFILE (scm-cast (begin 24)))
(define ENOTTY (scm-cast (begin 25)))
(define ETXTBSY (scm-cast (begin 26)))
(define EFBIG (scm-cast (begin 27)))
(define ENOSPC (scm-cast (begin 28)))
(define ESPIPE (scm-cast (begin 29)))
(define EROFS (scm-cast (begin 30)))
(define EMLINK (scm-cast (begin 31)))
(define EPIPE (scm-cast (begin 32)))
(define EDOM (scm-cast (begin 33)))
(define ERANGE (scm-cast (begin 34)))
(define EAGAIN (scm-cast (begin 35)))
(define EWOULDBLOCK (scm-cast (begin 35)))
(define EINPROGRESS (scm-cast (begin 36)))
(define EALREADY (scm-cast (begin 37)))
(define ENOTSOCK (scm-cast (begin 38)))
(define EDESTADDRREQ (scm-cast (begin 39)))
(define EMSGSIZE (scm-cast (begin 40)))
(define EPROTOTYPE (scm-cast (begin 41)))
(define ENOPROTOOPT (scm-cast (begin 42)))
(define EPROTONOSUPPORT (scm-cast (begin 43)))
(define ESOCKTNOSUPPORT (scm-cast (begin 44)))
(define ENOTSUP (scm-cast (begin 45)))
(define EOPNOTSUPP (scm-cast (begin 45)))
(define EPFNOSUPPORT (scm-cast (begin 46)))
(define EAFNOSUPPORT (scm-cast (begin 47)))
(define EADDRINUSE (scm-cast (begin 48)))
(define EADDRNOTAVAIL (scm-cast (begin 49)))
(define ENETDOWN (scm-cast (begin 50)))
(define ENETUNREACH (scm-cast (begin 51)))
(define ENETRESET (scm-cast (begin 52)))
(define ECONNABORTED (scm-cast (begin 53)))
(define ECONNRESET (scm-cast (begin 54)))
(define ENOBUFS (scm-cast (begin 55)))
(define EISCONN (scm-cast (begin 56)))
(define ENOTCONN (scm-cast (begin 57)))
(define ESHUTDOWN (scm-cast (begin 58)))
(define ETOOMANYREFS (scm-cast (begin 59)))
(define ETIMEDOUT (scm-cast (begin 60)))
(define ECONNREFUSED (scm-cast (begin 61)))
(define ELOOP (scm-cast (begin 62)))
(define ENAMETOOLONG (scm-cast (begin 63)))
(define EHOSTDOWN (scm-cast (begin 64)))
(define EHOSTUNREACH (scm-cast (begin 65)))
(define ENOTEMPTY (scm-cast (begin 66)))
(define EPROCLIM (scm-cast (begin 67)))
(define EUSERS (scm-cast (begin 68)))
(define EDQUOT (scm-cast (begin 69)))
(define ESTALE (scm-cast (begin 70)))
(define EREMOTE (scm-cast (begin 71)))
(define EBADRPC (scm-cast (begin 72)))
(define ERPCMISMATCH (scm-cast (begin 73)))
(define EPROGUNAVAIL (scm-cast (begin 74)))
(define EPROGMISMATCH (scm-cast (begin 75)))
(define EPROCUNAVAIL (scm-cast (begin 76)))
(define ENOLCK (scm-cast (begin 77)))
(define ENOSYS (scm-cast (begin 78)))
(define EFTYPE (scm-cast (begin 79)))
(define EAUTH (scm-cast (begin 80)))
(define ENEEDAUTH (scm-cast (begin 81)))
(define EPWROFF (scm-cast (begin 82)))
(define EDEVERR (scm-cast (begin 83)))
(define EOVERFLOW (scm-cast (begin 84)))
(define EBADEXEC (scm-cast (begin 85)))
(define EBADARCH (scm-cast (begin 86)))
(define ESHLIBVERS (scm-cast (begin 87)))
(define EBADMACHO (scm-cast (begin 88)))
(define ECANCELED (scm-cast (begin 89)))
(define EIDRM (scm-cast (begin 90)))
(define ENOMSG (scm-cast (begin 91)))
(define EILSEQ (scm-cast (begin 92)))
(define ENOATTR (scm-cast (begin 93)))
(define EBADMSG (scm-cast (begin 94)))
(define EMULTIHOP (scm-cast (begin 95)))
(define ENODATA (scm-cast (begin 96)))
(define ENOLINK (scm-cast (begin 97)))
(define ENOSR (scm-cast (begin 98)))
(define ENOSTR (scm-cast (begin 99)))
(define EPROTO (scm-cast (begin 100)))
(define ETIME (scm-cast (begin 101)))
(define ELAST (scm-cast (begin 102)))
(define _STDLIB_H_ (scm-cast (begin (begin 0))))
(define _SYS_WAIT_H_ (scm-cast (begin (begin 0))))
(define _PID_T (scm-cast (begin (begin 0))))
(define _ID_T (scm-cast (begin (begin 0))))
(define _SYS_SIGNAL_H_ (scm-cast (begin (begin 0))))
(define __SYS_APPLEAPIOPTS_H__ (scm-cast (begin (begin 0))))
(define __APPLE_API_STANDARD (scm-cast (begin (begin 0))))
(define __APPLE_API_STABLE (scm-cast (begin (begin 0))))
(define __APPLE_API_EVOLVING (scm-cast (begin (begin 0))))
(define __APPLE_API_UNSTABLE (scm-cast (begin (begin 0))))
(define __APPLE_API_PRIVATE (scm-cast (begin (begin 0))))
(define __APPLE_API_OBSOLETE (scm-cast (begin (begin 0))))
(define NSIG (scm-cast (begin 32)))
(define _BSD_MACHINE_SIGNAL_H_ (scm-cast (begin (begin 0))))
(define _PPC_SIGNAL_ (scm-cast (begin 1)))
(define SV_SAVE_REGS (scm-cast (begin 4096)))
(define SIGHUP (scm-cast (begin 1)))
(define SIGINT (scm-cast (begin 2)))
(define SIGQUIT (scm-cast (begin 3)))
(define SIGILL (scm-cast (begin 4)))
(define SIGTRAP (scm-cast (begin 5)))
(define SIGABRT (scm-cast (begin 6)))
(define SIGIOT (scm-cast (begin 6)))
(define SIGEMT (scm-cast (begin 7)))
(define SIGFPE (scm-cast (begin 8)))
(define SIGKILL (scm-cast (begin 9)))
(define SIGBUS (scm-cast (begin 10)))
(define SIGSEGV (scm-cast (begin 11)))
(define SIGSYS (scm-cast (begin 12)))
(define SIGPIPE (scm-cast (begin 13)))
(define SIGALRM (scm-cast (begin 14)))
(define SIGTERM (scm-cast (begin 15)))
(define SIGURG (scm-cast (begin 16)))
(define SIGSTOP (scm-cast (begin 17)))
(define SIGTSTP (scm-cast (begin 18)))
(define SIGCONT (scm-cast (begin 19)))
(define SIGCHLD (scm-cast (begin 20)))
(define SIGTTIN (scm-cast (begin 21)))
(define SIGTTOU (scm-cast (begin 22)))
(define SIGIO (scm-cast (begin 23)))
(define SIGXCPU (scm-cast (begin 24)))
(define SIGXFSZ (scm-cast (begin 25)))
(define SIGVTALRM (scm-cast (begin 26)))
(define SIGPROF (scm-cast (begin 27)))
(define SIGWINCH (scm-cast (begin 28)))
(define SIGINFO (scm-cast (begin 29)))
(define SIGUSR1 (scm-cast (begin 30)))
(define SIGUSR2 (scm-cast (begin 31)))
(define SIG_DFL (scm-cast (begin (cast (make-c-func-ptr <c-void> (list) (list)) 0))))
(define SIG_IGN (scm-cast (begin (cast (make-c-func-ptr <c-void> (list) (list)) 1))))
(define SIG_HOLD (scm-cast (begin (cast (make-c-func-ptr <c-void> (list) (list)) 5))))
(define SIG_ERR (scm-cast (begin (cast (make-c-func-ptr <c-void> (list) (list)) (- (cast <real> 1))))))
(define _MCONTEXT_T (scm-cast (begin (begin 0))))
(define _MCONTEXT64_T (scm-cast (begin (begin 0))))
(define _PTHREAD_ATTR_T (scm-cast (begin (begin 0))))
(define _SIGSET_T (scm-cast (begin (begin 0))))
(define _UCONTEXT_T (scm-cast (begin (begin 0))))
(define _UCONTEXT64_T (scm-cast (begin (begin 0))))
(define _UID_T (scm-cast (begin (begin 0))))
(define SIGEV_NONE (scm-cast (begin 0)))
(define SIGEV_SIGNAL (scm-cast (begin 1)))
(define SIGEV_THREAD (scm-cast (begin 3)))
(define ILL_NOOP (scm-cast (begin 0)))
(define ILL_ILLOPC (scm-cast (begin 1)))
(define ILL_ILLTRP (scm-cast (begin 2)))
(define ILL_PRVOPC (scm-cast (begin 3)))
(define ILL_ILLOPN (scm-cast (begin 4)))
(define ILL_ILLADR (scm-cast (begin 5)))
(define ILL_PRVREG (scm-cast (begin 6)))
(define ILL_COPROC (scm-cast (begin 7)))
(define ILL_BADSTK (scm-cast (begin 8)))
(define FPE_NOOP (scm-cast (begin 0)))
(define FPE_FLTDIV (scm-cast (begin 1)))
(define FPE_FLTOVF (scm-cast (begin 2)))
(define FPE_FLTUND (scm-cast (begin 3)))
(define FPE_FLTRES (scm-cast (begin 4)))
(define FPE_FLTINV (scm-cast (begin 5)))
(define FPE_FLTSUB (scm-cast (begin 6)))
(define FPE_INTDIV (scm-cast (begin 7)))
(define FPE_INTOVF (scm-cast (begin 8)))
(define SEGV_NOOP (scm-cast (begin 0)))
(define SEGV_MAPERR (scm-cast (begin 1)))
(define SEGV_ACCERR (scm-cast (begin 2)))
(define BUS_NOOP (scm-cast (begin 0)))
(define BUS_ADRALN (scm-cast (begin 1)))
(define BUS_ADRERR (scm-cast (begin 2)))
(define BUS_OBJERR (scm-cast (begin 3)))
(define TRAP_BRKPT (scm-cast (begin 1)))
(define TRAP_TRACE (scm-cast (begin 2)))
(define CLD_NOOP (scm-cast (begin 0)))
(define CLD_EXITED (scm-cast (begin 1)))
(define CLD_KILLED (scm-cast (begin 2)))
(define CLD_DUMPED (scm-cast (begin 3)))
(define CLD_TRAPPED (scm-cast (begin 4)))
(define CLD_STOPPED (scm-cast (begin 5)))
(define CLD_CONTINUED (scm-cast (begin 6)))
(define POLL_IN (scm-cast (begin 1)))
(define POLL_OUT (scm-cast (begin 2)))
(define POLL_MSG (scm-cast (begin 3)))
(define POLL_ERR (scm-cast (begin 4)))
(define POLL_PRI (scm-cast (begin 5)))
(define POLL_HUP (scm-cast (begin 6)))
(define SA_ONSTACK (scm-cast (begin 1)))
(define SA_RESTART (scm-cast (begin 2)))
(define SA_DISABLE (scm-cast (begin 4)))
(define SA_RESETHAND (scm-cast (begin 4)))
(define SA_NOCLDSTOP (scm-cast (begin 8)))
(define SA_NODEFER (scm-cast (begin 16)))
(define SA_NOCLDWAIT (scm-cast (begin 32)))
(define SA_SIGINFO (scm-cast (begin 64)))
(define SA_USERTRAMP (scm-cast (begin 256)))
(define SA_64REGSET (scm-cast (begin 512)))
(define SIG_BLOCK (scm-cast (begin 1)))
(define SIG_UNBLOCK (scm-cast (begin 2)))
(define SIG_SETMASK (scm-cast (begin 3)))
(define SI_USER (scm-cast (begin 65537)))
(define SI_QUEUE (scm-cast (begin 65538)))
(define SI_TIMER (scm-cast (begin 65539)))
(define SI_ASYNCIO (scm-cast (begin 65540)))
(define SI_MESGQ (scm-cast (begin 65541)))
(define _STACK_T (scm-cast (begin (begin 0))))
(define SS_ONSTACK (scm-cast (begin 1)))
(define SS_DISABLE (scm-cast (begin 4)))
(define MINSIGSTKSZ (scm-cast (begin 32768)))
(define SIGSTKSZ (scm-cast (begin 131072)))
(define SV_ONSTACK (scm-cast (begin 1)))
(define SV_INTERRUPT (scm-cast (begin 2)))
(define SV_RESETHAND (scm-cast (begin 4)))
(define SV_NODEFER (scm-cast (begin 16)))
(define SV_NOCLDSTOP (scm-cast (begin 8)))
(define SV_SIGINFO (scm-cast (begin 64)))
(define-syntax sigmask (syntax-rules () ((_ m) (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> (c-- (identity m) (cast <real> 1)))))))))
(define BADSIG (scm-cast (begin (cast (make-c-func-ptr <c-void> (list) (list)) (- (cast <real> 1))))))
(define _SYS_RESOURCE_H_ (scm-cast (begin (begin 0))))
(define _TIMEVAL (scm-cast (begin (begin 0))))
(define PRIO_PROCESS (scm-cast (begin 0)))
(define PRIO_PGRP (scm-cast (begin 1)))
(define PRIO_USER (scm-cast (begin 2)))
(define PRIO_MIN (scm-cast (begin (- (cast <real> 20)))))
(define PRIO_MAX (scm-cast (begin 20)))
(define RUSAGE_SELF (scm-cast (begin 0)))
(define RUSAGE_CHILDREN (scm-cast (begin (- (cast <real> 1)))))
(define RLIM_INFINITY (scm-cast (begin (c-- (c-<< (cast <integer> (cast <__uint64_t> 1)) (cast <integer> 63)) (cast <real> 1)))))
(define RLIM_SAVED_MAX (scm-cast (begin (c-- (c-<< (cast <integer> (cast <__uint64_t> 1)) (cast <integer> 63)) (cast <real> 1)))))
(define RLIM_SAVED_CUR (scm-cast (begin (c-- (c-<< (cast <integer> (cast <__uint64_t> 1)) (cast <integer> 63)) (cast <real> 1)))))
(define RLIMIT_CPU (scm-cast (begin 0)))
(define RLIMIT_FSIZE (scm-cast (begin 1)))
(define RLIMIT_DATA (scm-cast (begin 2)))
(define RLIMIT_STACK (scm-cast (begin 3)))
(define RLIMIT_CORE (scm-cast (begin 4)))
(define RLIMIT_AS (scm-cast (begin 5)))
(define RLIMIT_RSS (scm-cast (begin 5)))
(define RLIMIT_MEMLOCK (scm-cast (begin 6)))
(define RLIMIT_NPROC (scm-cast (begin 7)))
(define RLIMIT_NOFILE (scm-cast (begin 8)))
(define RLIM_NLIMITS (scm-cast (begin 9)))
(define WNOHANG (scm-cast (begin 1)))
(define WUNTRACED (scm-cast (begin 2)))
(define-syntax _W_INT (syntax-rules () ((_ w) (scm-cast (begin (deref (cast (ptr <c-int>) (ptr (identity w)))))))))
(define WCOREFLAG (scm-cast (begin 128)))
(define-syntax _WSTATUS (syntax-rules () ((_ x) (scm-cast (begin (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) (cast <integer> 127)))))))
(define _WSTOPPED (scm-cast (begin 127)))
(define-syntax WEXITSTATUS (syntax-rules () ((_ x) (scm-cast (begin (c->> (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) (cast <integer> 8)))))))
(define-syntax WIFCONTINUED (syntax-rules () ((_ x) (scm-cast (begin (c-== (cast <real> x) (cast <real> 19)))))))
(define-syntax WIFEXITED (syntax-rules () ((_ x) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) (cast <integer> 127))) (cast <real> 0)))))))
(define-syntax WIFSIGNALED (syntax-rules () ((_ x) (scm-cast (begin (c-and (cast <real> (c-!= (cast <real> (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) (cast <integer> 127))) (cast <real> 127))) (c-!= (cast <real> (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) (cast <integer> 127))) (cast <real> 0))))))))
(define-syntax WIFSTOPPED (syntax-rules () ((_ x) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) (cast <integer> 127))) (cast <real> 127)))))))
(define-syntax WSTOPSIG (syntax-rules () ((_ x) (scm-cast (begin (c->> (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) (cast <integer> 8)))))))
(define-syntax WTERMSIG (syntax-rules () ((_ x) (scm-cast (begin (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) (cast <integer> 127)))))))
(define-syntax WCOREDUMP (syntax-rules () ((_ x) (scm-cast (begin (logand (cast <integer> (deref (cast (ptr <c-int>) (ptr (identity x))))) (cast <integer> 128)))))))
(define-syntax W_EXITCODE (syntax-rules () ((_ ret sig) (scm-cast (begin (logior (cast <integer> (c-<< (cast <integer> (identity ret)) (cast <integer> 8))) (cast <integer> (identity sig))))))))
(define-syntax W_STOPCODE (syntax-rules () ((_ sig) (scm-cast (begin (logior (cast <integer> (c-<< (cast <integer> (identity sig)) (cast <integer> 8))) (cast <integer> 127)))))))
(define WEXITED (scm-cast (begin 4)))
(define WCONTINUED (scm-cast (begin 16)))
(define WNOWAIT (scm-cast (begin 32)))
(define WAIT_ANY (scm-cast (begin (- (cast <real> 1)))))
(define WAIT_MYPGRP (scm-cast (begin 0)))
(define _BSD_MACHINE_ENDIAN_H_ (scm-cast (begin (begin 0))))
(define _PPC_ENDIAN_H_ (scm-cast (begin (begin 0))))
(define _QUAD_HIGHWORD (scm-cast (begin 0)))
(define _QUAD_LOWWORD (scm-cast (begin 1)))
(define __DARWIN_LITTLE_ENDIAN (scm-cast (begin 1234)))
(define __DARWIN_BIG_ENDIAN (scm-cast (begin 4321)))
(define __DARWIN_PDP_ENDIAN (scm-cast (begin 3412)))
(define __DARWIN_BYTE_ORDER (scm-cast (begin 4321)))
(define LITTLE_ENDIAN (scm-cast (begin 1234)))
(define BIG_ENDIAN (scm-cast (begin 4321)))
(define PDP_ENDIAN (scm-cast (begin 3412)))
(define BYTE_ORDER (scm-cast (begin 4321)))
(define _SYS__ENDIAN_H_ (scm-cast (begin (begin 0))))
(define _STDINT_H_ (scm-cast (begin (begin 0))))
(define _INT8_T (scm-cast (begin (begin 0))))
(define _INT16_T (scm-cast (begin (begin 0))))
(define _INT32_T (scm-cast (begin (begin 0))))
(define _INT64_T (scm-cast (begin (begin 0))))
(define _UINT8_T (scm-cast (begin (begin 0))))
(define _UINT16_T (scm-cast (begin (begin 0))))
(define _UINT32_T (scm-cast (begin (begin 0))))
(define _UINT64_T (scm-cast (begin (begin 0))))
(define _INTPTR_T (scm-cast (begin (begin 0))))
(define _UINTPTR_T (scm-cast (begin (begin 0))))
(define _INTMAX_T (scm-cast (begin (begin 0))))
(define _UINTMAX_T (scm-cast (begin (begin 0))))
(define INT8_MAX (scm-cast (begin 127)))
(define INT16_MAX (scm-cast (begin 32767)))
(define INT32_MAX (scm-cast (begin 2147483647)))
(define INT64_MAX (scm-cast (begin 9223372036854775807)))
(define INT8_MIN (scm-cast (begin (- (cast <real> 128)))))
(define INT16_MIN (scm-cast (begin (- (cast <real> 32768)))))
(define INT32_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define INT64_MIN (scm-cast (begin (c-- (- (cast <real> 9223372036854775807)) (cast <real> 1)))))
(define UINT8_MAX (scm-cast (begin 255)))
(define UINT16_MAX (scm-cast (begin 65535)))
(define UINT32_MAX (scm-cast (begin 4294967295)))
(define UINT64_MAX (scm-cast (begin 9223372036854775807)))
(define INT_LEAST8_MIN (scm-cast (begin (- (cast <real> 128)))))
(define INT_LEAST16_MIN (scm-cast (begin (- (cast <real> 32768)))))
(define INT_LEAST32_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define INT_LEAST64_MIN (scm-cast (begin (c-- (- (cast <real> 9223372036854775807)) (cast <real> 1)))))
(define INT_LEAST8_MAX (scm-cast (begin 127)))
(define INT_LEAST16_MAX (scm-cast (begin 32767)))
(define INT_LEAST32_MAX (scm-cast (begin 2147483647)))
(define INT_LEAST64_MAX (scm-cast (begin 9223372036854775807)))
(define UINT_LEAST8_MAX (scm-cast (begin 255)))
(define UINT_LEAST16_MAX (scm-cast (begin 65535)))
(define UINT_LEAST32_MAX (scm-cast (begin 4294967295)))
(define UINT_LEAST64_MAX (scm-cast (begin 9223372036854775807)))
(define INT_FAST8_MIN (scm-cast (begin (- (cast <real> 128)))))
(define INT_FAST16_MIN (scm-cast (begin (- (cast <real> 32768)))))
(define INT_FAST32_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define INT_FAST64_MIN (scm-cast (begin (c-- (- (cast <real> 9223372036854775807)) (cast <real> 1)))))
(define INT_FAST8_MAX (scm-cast (begin 127)))
(define INT_FAST16_MAX (scm-cast (begin 32767)))
(define INT_FAST32_MAX (scm-cast (begin 2147483647)))
(define INT_FAST64_MAX (scm-cast (begin 9223372036854775807)))
(define UINT_FAST8_MAX (scm-cast (begin 255)))
(define UINT_FAST16_MAX (scm-cast (begin 65535)))
(define UINT_FAST32_MAX (scm-cast (begin 4294967295)))
(define UINT_FAST64_MAX (scm-cast (begin 9223372036854775807)))
(define INTPTR_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define INTPTR_MAX (scm-cast (begin 2147483647)))
(define UINTPTR_MAX (scm-cast (begin 4294967295)))
(define INTMAX_MIN (scm-cast (begin (c-- (- (cast <real> 9223372036854775807)) (cast <real> 1)))))
(define INTMAX_MAX (scm-cast (begin 9223372036854775807)))
(define UINTMAX_MAX (scm-cast (begin 9223372036854775807)))
(define PTRDIFF_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define PTRDIFF_MAX (scm-cast (begin 2147483647)))
(define SIZE_MAX (scm-cast (begin 4294967295)))
(define WCHAR_MAX (scm-cast (begin 2147483647)))
(define WCHAR_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define WINT_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define WINT_MAX (scm-cast (begin 2147483647)))
(define SIG_ATOMIC_MIN (scm-cast (begin (c-- (- (cast <real> 2147483647)) (cast <real> 1)))))
(define SIG_ATOMIC_MAX (scm-cast (begin 2147483647)))
(define-syntax INT8_C (syntax-rules () ((_ v) (scm-cast (begin (identity v))))))
(define-syntax INT16_C (syntax-rules () ((_ v) (scm-cast (begin (identity v))))))
(define-syntax INT32_C (syntax-rules () ((_ v) (scm-cast (begin (identity v))))))
(define _OS_OSBYTEORDER_H (scm-cast (begin (begin 0))))
(define-syntax OSSwapConstInt16 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint16_t> (logior (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) (cast <integer> 65280))) (cast <integer> 8))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) (cast <integer> 255))) (cast <integer> 8))))))))))
(define-syntax OSSwapConstInt32 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint32_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 4278190080))) (cast <integer> 24))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 16711680))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 65280))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 255))) (cast <integer> 24))))))))))
(define-syntax OSSwapConstInt64 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint64_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 9223372036854775807))) (cast <integer> 56))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 71776119061217280))) (cast <integer> 40))))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 280375465082880))) (cast <integer> 24))))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 1095216660480))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 4278190080))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 16711680))) (cast <integer> 24))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 65280))) (cast <integer> 40))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 255))) (cast <integer> 56))))))))))
(define _OS_OSBYTEORDERPPC_H (scm-cast (begin (begin 0))))
(define-syntax OSSwapBigToHostInt (syntax-rules () ((_ x) (scm-cast (begin (cast <uint32_t> (identity x)))))))
(define-syntax OSSwapHostToBigInt (syntax-rules () ((_ x) (scm-cast (begin (cast <uint32_t> (identity x)))))))
(define-syntax OSSwapHostToBigConstInt16 (syntax-rules () ((_ x) (scm-cast (begin (identity x))))))
(define-syntax OSSwapHostToBigConstInt32 (syntax-rules () ((_ x) (scm-cast (begin (identity x))))))
(define-syntax OSSwapHostToBigConstInt64 (syntax-rules () ((_ x) (scm-cast (begin (identity x))))))
(define-syntax OSSwapHostToBigInt16 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint16_t> (identity x)))))))
(define-syntax OSSwapHostToBigInt32 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint32_t> (identity x)))))))
(define-syntax OSSwapHostToBigInt64 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint64_t> (identity x)))))))
(define-syntax OSSwapHostToLittleConstInt16 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint16_t> (logior (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) (cast <integer> 65280))) (cast <integer> 8))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) (cast <integer> 255))) (cast <integer> 8))))))))))
(define-syntax OSSwapHostToLittleConstInt32 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint32_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 4278190080))) (cast <integer> 24))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 16711680))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 65280))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 255))) (cast <integer> 24))))))))))
(define-syntax OSSwapHostToLittleConstInt64 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint64_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 9223372036854775807))) (cast <integer> 56))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 71776119061217280))) (cast <integer> 40))))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 280375465082880))) (cast <integer> 24))))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 1095216660480))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 4278190080))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 16711680))) (cast <integer> 24))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 65280))) (cast <integer> 40))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 255))) (cast <integer> 56))))))))))
(define-syntax OSSwapBigToHostConstInt16 (syntax-rules () ((_ x) (scm-cast (begin (identity x))))))
(define-syntax OSSwapBigToHostConstInt32 (syntax-rules () ((_ x) (scm-cast (begin (identity x))))))
(define-syntax OSSwapBigToHostConstInt64 (syntax-rules () ((_ x) (scm-cast (begin (identity x))))))
(define-syntax OSSwapBigToHostInt16 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint16_t> (identity x)))))))
(define-syntax OSSwapBigToHostInt32 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint32_t> (identity x)))))))
(define-syntax OSSwapBigToHostInt64 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint64_t> (identity x)))))))
(define-syntax OSSwapLittleToHostConstInt16 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint16_t> (logior (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) (cast <integer> 65280))) (cast <integer> 8))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint16_t> (identity x))) (cast <integer> 255))) (cast <integer> 8))))))))))
(define-syntax OSSwapLittleToHostConstInt32 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint32_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 4278190080))) (cast <integer> 24))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 16711680))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 65280))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint32_t> (identity x))) (cast <integer> 255))) (cast <integer> 24))))))))))
(define-syntax OSSwapLittleToHostConstInt64 (syntax-rules () ((_ x) (scm-cast (begin (cast <uint64_t> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 9223372036854775807))) (cast <integer> 56))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 71776119061217280))) (cast <integer> 40))))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 280375465082880))) (cast <integer> 24))))) (cast <integer> (c->> (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 1095216660480))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 4278190080))) (cast <integer> 8))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 16711680))) (cast <integer> 24))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 65280))) (cast <integer> 40))))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (cast <uint64_t> (identity x))) (cast <integer> 255))) (cast <integer> 56))))))))))
(define-syntax ntohs (syntax-rules () ((_ x) (scm-cast (begin (cast <uint16_t> (identity x)))))))
(define-syntax htons (syntax-rules () ((_ x) (scm-cast (begin (cast <uint16_t> (identity x)))))))
(define-syntax ntohl (syntax-rules () ((_ x) (scm-cast (begin (cast <uint32_t> (identity x)))))))
(define-syntax htonl (syntax-rules () ((_ x) (scm-cast (begin (cast <uint32_t> (identity x)))))))
(define WSTOPPED (scm-cast (begin 127)))
(define _ALLOCA_H_ (scm-cast (begin (begin 0))))
(define _CT_RUNE_T (scm-cast (begin (begin 0))))
(define _RUNE_T (scm-cast (begin (begin 0))))
(define _WCHAR_T (scm-cast (begin (begin 0))))
(define EXIT_FAILURE (scm-cast (begin 1)))
(define EXIT_SUCCESS (scm-cast (begin 0)))
(define RAND_MAX (scm-cast (begin 2147483647)))
(define MB_CUR_MAX (scm-cast (begin __mb_cur_max)))
(define _BSD_MACHINE_TYPES_H_ (scm-cast (begin (begin 0))))
(define _MACHTYPES_H_ (scm-cast (begin (begin 0))))
(define USER_ADDR_NULL (scm-cast (begin (cast <user_addr_t> 0))))
(define-syntax CAST_USER_ADDR_T (syntax-rules () ((_ a_ptr) (scm-cast (begin (cast <user_addr_t> (cast <uintptr_t> (identity a_ptr))))))))
(define _DEV_T (scm-cast (begin (begin 0))))
(define _MODE_T (scm-cast (begin (begin 0))))
(define _UNISTD_H_ (scm-cast (begin (begin 0))))
(define _SYS_UNISTD_H_ (scm-cast (begin (begin 0))))
(define _POSIX_VERSION (scm-cast (begin 200112)))
(define _POSIX2_VERSION (scm-cast (begin 200112)))
(define _POSIX_VDISABLE (scm-cast (begin (cast <c-uchar> 255))))
(define _POSIX_THREAD_KEYS_MAX (scm-cast (begin 128)))
(define F_OK (scm-cast (begin 0)))
(define X_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 0)))))
(define W_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 1)))))
(define R_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 2)))))
(define _READ_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 9)))))
(define _WRITE_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 10)))))
(define _EXECUTE_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 11)))))
(define _DELETE_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 12)))))
(define _APPEND_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 13)))))
(define _RMFILE_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 14)))))
(define _RATTR_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 15)))))
(define _WATTR_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 16)))))
(define _REXT_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 17)))))
(define _WEXT_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 18)))))
(define _RPERM_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 19)))))
(define _WPERM_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 20)))))
(define _CHOWN_OK (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 21)))))
(define _ACCESS_EXTENDED_MASK (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 9))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 10))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 11))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 12))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 13))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 14))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 17))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 18))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 15))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 19))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 20))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 21)))))))
(define L_SET (scm-cast (begin 0)))
(define L_INCR (scm-cast (begin 1)))
(define L_XTND (scm-cast (begin 2)))
(define ACCESSX_MAX_DESCRIPTORS (scm-cast (begin 100)))
(define ACCESSX_MAX_TABLESIZE (scm-cast (begin (* (cast <real> 16) (cast <real> 1024)))))
(define _PC_LINK_MAX (scm-cast (begin 1)))
(define _PC_MAX_CANON (scm-cast (begin 2)))
(define _PC_MAX_INPUT (scm-cast (begin 3)))
(define _PC_NAME_MAX (scm-cast (begin 4)))
(define _PC_PATH_MAX (scm-cast (begin 5)))
(define _PC_PIPE_BUF (scm-cast (begin 6)))
(define _PC_CHOWN_RESTRICTED (scm-cast (begin 7)))
(define _PC_NO_TRUNC (scm-cast (begin 8)))
(define _PC_VDISABLE (scm-cast (begin 9)))
(define _PC_NAME_CHARS_MAX (scm-cast (begin 10)))
(define _PC_CASE_SENSITIVE (scm-cast (begin 11)))
(define _PC_CASE_PRESERVING (scm-cast (begin 12)))
(define _PC_EXTENDED_SECURITY_NP (scm-cast (begin 13)))
(define _PC_AUTH_OPAQUE_NP (scm-cast (begin 14)))
(define _CS_PATH (scm-cast (begin 1)))
(define _GID_T (scm-cast (begin (begin 0))))
(define _OFF_T (scm-cast (begin (begin 0))))
(define _USECONDS_T (scm-cast (begin (begin 0))))
(define _UUID_T (scm-cast (begin (begin 0))))
(define STDIN_FILENO (scm-cast (begin 0)))
(define STDOUT_FILENO (scm-cast (begin 1)))
(define STDERR_FILENO (scm-cast (begin 2)))
(define _XOPEN_VERSION (scm-cast (begin 600)))
(define _XOPEN_XCU_VERSION (scm-cast (begin 4)))
(define _POSIX_ADVISORY_INFO (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_ASYNCHRONOUS_IO (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_BARRIERS (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_CHOWN_RESTRICTED (scm-cast (begin 200112)))
(define _POSIX_CLOCK_SELECTION (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_CPUTIME (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_FSYNC (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_IPV6 (scm-cast (begin 200112)))
(define _POSIX_JOB_CONTROL (scm-cast (begin 200112)))
(define _POSIX_MAPPED_FILES (scm-cast (begin 200112)))
(define _POSIX_MEMLOCK (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_MEMLOCK_RANGE (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_MEMORY_PROTECTION (scm-cast (begin 200112)))
(define _POSIX_MESSAGE_PASSING (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_MONOTONIC_CLOCK (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_NO_TRUNC (scm-cast (begin 200112)))
(define _POSIX_PRIORITIZED_IO (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_PRIORITY_SCHEDULING (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_RAW_SOCKETS (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_READER_WRITER_LOCKS (scm-cast (begin 200112)))
(define _POSIX_REALTIME_SIGNALS (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_REGEXP (scm-cast (begin 200112)))
(define _POSIX_SAVED_IDS (scm-cast (begin 200112)))
(define _POSIX_SEMAPHORES (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_SHARED_MEMORY_OBJECTS (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_SHELL (scm-cast (begin 200112)))
(define _POSIX_SPAWN (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_SPIN_LOCKS (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_SPORADIC_SERVER (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_SYNCHRONIZED_IO (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_THREAD_ATTR_STACKADDR (scm-cast (begin 200112)))
(define _POSIX_THREAD_ATTR_STACKSIZE (scm-cast (begin 200112)))
(define _POSIX_THREAD_CPUTIME (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_THREAD_PRIO_INHERIT (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_THREAD_PRIO_PROTECT (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_THREAD_PRIORITY_SCHEDULING (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_THREAD_PROCESS_SHARED (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_THREAD_SAFE_FUNCTIONS (scm-cast (begin 200112)))
(define _POSIX_THREAD_SPORADIC_SERVER (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_THREADS (scm-cast (begin 200112)))
(define _POSIX_TIMEOUTS (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_TIMERS (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_TRACE (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_TRACE_EVENT_FILTER (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_TRACE_INHERIT (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_TRACE_LOG (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX_TYPED_MEMORY_OBJECTS (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX2_C_BIND (scm-cast (begin 200112)))
(define _POSIX2_C_DEV (scm-cast (begin 200112)))
(define _POSIX2_CHAR_TERM (scm-cast (begin 200112)))
(define _POSIX2_FORT_DEV (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX2_FORT_RUN (scm-cast (begin 200112)))
(define _POSIX2_LOCALEDEF (scm-cast (begin 200112)))
(define _POSIX2_PBS (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX2_PBS_ACCOUNTING (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX2_PBS_CHECKPOINT (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX2_PBS_LOCATE (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX2_PBS_MESSAGE (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX2_PBS_TRACK (scm-cast (begin (- (cast <real> 1)))))
(define _POSIX2_SW_DEV (scm-cast (begin 200112)))
(define _POSIX2_UPE (scm-cast (begin 200112)))
(define _V6_ILP32_OFF32 (scm-cast (begin (- (cast <real> 1)))))
(define _V6_ILP32_OFFBIG (scm-cast (begin 1)))
(define _V6_LP64_OFF64 (scm-cast (begin 1)))
(define _V6_LPBIG_OFFBIG (scm-cast (begin 1)))
(define _XBS5_ILP32_OFF32 (scm-cast (begin (- (cast <real> 1)))))
(define _XBS5_ILP32_OFFBIG (scm-cast (begin 1)))
(define _XBS5_LP64_OFF64 (scm-cast (begin 1)))
(define _XBS5_LPBIG_OFFBIG (scm-cast (begin 1)))
(define _XOPEN_CRYPT (scm-cast (begin 1)))
(define _XOPEN_ENH_I18N (scm-cast (begin 1)))
(define _XOPEN_LEGACY (scm-cast (begin (- (cast <real> 1)))))
(define _XOPEN_REALTIME (scm-cast (begin (- (cast <real> 1)))))
(define _XOPEN_REALTIME_THREADS (scm-cast (begin (- (cast <real> 1)))))
(define _XOPEN_SHM (scm-cast (begin 1)))
(define _XOPEN_STREAMS (scm-cast (begin (- (cast <real> 1)))))
(define _XOPEN_UNIX (scm-cast (begin 1)))
(define F_ULOCK (scm-cast (begin 0)))
(define F_LOCK (scm-cast (begin 1)))
(define F_TLOCK (scm-cast (begin 2)))
(define F_TEST (scm-cast (begin 3)))
(define _SC_ARG_MAX (scm-cast (begin 1)))
(define _SC_CHILD_MAX (scm-cast (begin 2)))
(define _SC_CLK_TCK (scm-cast (begin 3)))
(define _SC_NGROUPS_MAX (scm-cast (begin 4)))
(define _SC_OPEN_MAX (scm-cast (begin 5)))
(define _SC_JOB_CONTROL (scm-cast (begin 6)))
(define _SC_SAVED_IDS (scm-cast (begin 7)))
(define _SC_VERSION (scm-cast (begin 8)))
(define _SC_BC_BASE_MAX (scm-cast (begin 9)))
(define _SC_BC_DIM_MAX (scm-cast (begin 10)))
(define _SC_BC_SCALE_MAX (scm-cast (begin 11)))
(define _SC_BC_STRING_MAX (scm-cast (begin 12)))
(define _SC_COLL_WEIGHTS_MAX (scm-cast (begin 13)))
(define _SC_EXPR_NEST_MAX (scm-cast (begin 14)))
(define _SC_LINE_MAX (scm-cast (begin 15)))
(define _SC_RE_DUP_MAX (scm-cast (begin 16)))
(define _SC_2_VERSION (scm-cast (begin 17)))
(define _SC_2_C_BIND (scm-cast (begin 18)))
(define _SC_2_C_DEV (scm-cast (begin 19)))
(define _SC_2_CHAR_TERM (scm-cast (begin 20)))
(define _SC_2_FORT_DEV (scm-cast (begin 21)))
(define _SC_2_FORT_RUN (scm-cast (begin 22)))
(define _SC_2_LOCALEDEF (scm-cast (begin 23)))
(define _SC_2_SW_DEV (scm-cast (begin 24)))
(define _SC_2_UPE (scm-cast (begin 25)))
(define _SC_STREAM_MAX (scm-cast (begin 26)))
(define _SC_TZNAME_MAX (scm-cast (begin 27)))
(define _SC_ASYNCHRONOUS_IO (scm-cast (begin 28)))
(define _SC_PAGESIZE (scm-cast (begin 29)))
(define _SC_MEMLOCK (scm-cast (begin 30)))
(define _SC_MEMLOCK_RANGE (scm-cast (begin 31)))
(define _SC_MEMORY_PROTECTION (scm-cast (begin 32)))
(define _SC_MESSAGE_PASSING (scm-cast (begin 33)))
(define _SC_PRIORITIZED_IO (scm-cast (begin 34)))
(define _SC_PRIORITY_SCHEDULING (scm-cast (begin 35)))
(define _SC_REALTIME_SIGNALS (scm-cast (begin 36)))
(define _SC_SEMAPHORES (scm-cast (begin 37)))
(define _SC_FSYNC (scm-cast (begin 38)))
(define _SC_SHARED_MEMORY_OBJECTS (scm-cast (begin 39)))
(define _SC_SYNCHRONIZED_IO (scm-cast (begin 40)))
(define _SC_TIMERS (scm-cast (begin 41)))
(define _SC_AIO_LISTIO_MAX (scm-cast (begin 42)))
(define _SC_AIO_MAX (scm-cast (begin 43)))
(define _SC_AIO_PRIO_DELTA_MAX (scm-cast (begin 44)))
(define _SC_DELAYTIMER_MAX (scm-cast (begin 45)))
(define _SC_MQ_OPEN_MAX (scm-cast (begin 46)))
(define _SC_MAPPED_FILES (scm-cast (begin 47)))
(define _SC_RTSIG_MAX (scm-cast (begin 48)))
(define _SC_SEM_NSEMS_MAX (scm-cast (begin 49)))
(define _SC_SEM_VALUE_MAX (scm-cast (begin 50)))
(define _SC_SIGQUEUE_MAX (scm-cast (begin 51)))
(define _SC_TIMER_MAX (scm-cast (begin 52)))
(define _SC_2_PBS (scm-cast (begin 59)))
(define _SC_2_PBS_ACCOUNTING (scm-cast (begin 60)))
(define _SC_2_PBS_CHECKPOINT (scm-cast (begin 61)))
(define _SC_2_PBS_LOCATE (scm-cast (begin 62)))
(define _SC_2_PBS_MESSAGE (scm-cast (begin 63)))
(define _SC_2_PBS_TRACK (scm-cast (begin 64)))
(define _SC_ADVISORY_INFO (scm-cast (begin 65)))
(define _SC_BARRIERS (scm-cast (begin 66)))
(define _SC_CLOCK_SELECTION (scm-cast (begin 67)))
(define _SC_CPUTIME (scm-cast (begin 68)))
(define _SC_FILE_LOCKING (scm-cast (begin 69)))
(define _SC_GETGR_R_SIZE_MAX (scm-cast (begin 70)))
(define _SC_GETPW_R_SIZE_MAX (scm-cast (begin 71)))
(define _SC_HOST_NAME_MAX (scm-cast (begin 72)))
(define _SC_LOGIN_NAME_MAX (scm-cast (begin 73)))
(define _SC_MONOTONIC_CLOCK (scm-cast (begin 74)))
(define _SC_MQ_PRIO_MAX (scm-cast (begin 75)))
(define _SC_READER_WRITER_LOCKS (scm-cast (begin 76)))
(define _SC_REGEXP (scm-cast (begin 77)))
(define _SC_SHELL (scm-cast (begin 78)))
(define _SC_SPAWN (scm-cast (begin 79)))
(define _SC_SPIN_LOCKS (scm-cast (begin 80)))
(define _SC_SPORADIC_SERVER (scm-cast (begin 81)))
(define _SC_THREAD_ATTR_STACKADDR (scm-cast (begin 82)))
(define _SC_THREAD_ATTR_STACKSIZE (scm-cast (begin 83)))
(define _SC_THREAD_CPUTIME (scm-cast (begin 84)))
(define _SC_THREAD_DESTRUCTOR_ITERATIONS (scm-cast (begin 85)))
(define _SC_THREAD_KEYS_MAX (scm-cast (begin 86)))
(define _SC_THREAD_PRIO_INHERIT (scm-cast (begin 87)))
(define _SC_THREAD_PRIO_PROTECT (scm-cast (begin 88)))
(define _SC_THREAD_PRIORITY_SCHEDULING (scm-cast (begin 89)))
(define _SC_THREAD_PROCESS_SHARED (scm-cast (begin 90)))
(define _SC_THREAD_SAFE_FUNCTIONS (scm-cast (begin 91)))
(define _SC_THREAD_SPORADIC_SERVER (scm-cast (begin 92)))
(define _SC_THREAD_STACK_MIN (scm-cast (begin 93)))
(define _SC_THREAD_THREADS_MAX (scm-cast (begin 94)))
(define _SC_TIMEOUTS (scm-cast (begin 95)))
(define _SC_THREADS (scm-cast (begin 96)))
(define _SC_TRACE (scm-cast (begin 97)))
(define _SC_TRACE_EVENT_FILTER (scm-cast (begin 98)))
(define _SC_TRACE_INHERIT (scm-cast (begin 99)))
(define _SC_TRACE_LOG (scm-cast (begin 100)))
(define _SC_TTY_NAME_MAX (scm-cast (begin 101)))
(define _SC_TYPED_MEMORY_OBJECTS (scm-cast (begin 102)))
(define _SC_V6_ILP32_OFF32 (scm-cast (begin 103)))
(define _SC_V6_ILP32_OFFBIG (scm-cast (begin 104)))
(define _SC_V6_LP64_OFF64 (scm-cast (begin 105)))
(define _SC_V6_LPBIG_OFFBIG (scm-cast (begin 106)))
(define _SC_IPV6 (scm-cast (begin 118)))
(define _SC_RAW_SOCKETS (scm-cast (begin 119)))
(define _SC_SYMLOOP_MAX (scm-cast (begin 120)))
(define _SC_ATEXIT_MAX (scm-cast (begin 107)))
(define _SC_IOV_MAX (scm-cast (begin 56)))
(define _SC_PAGE_SIZE (scm-cast (begin 29)))
(define _SC_XOPEN_CRYPT (scm-cast (begin 108)))
(define _SC_XOPEN_ENH_I18N (scm-cast (begin 109)))
(define _SC_XOPEN_LEGACY (scm-cast (begin 110)))
(define _SC_XOPEN_REALTIME (scm-cast (begin 111)))
(define _SC_XOPEN_REALTIME_THREADS (scm-cast (begin 112)))
(define _SC_XOPEN_SHM (scm-cast (begin 113)))
(define _SC_XOPEN_STREAMS (scm-cast (begin 114)))
(define _SC_XOPEN_UNIX (scm-cast (begin 115)))
(define _SC_XOPEN_VERSION (scm-cast (begin 116)))
(define _SC_XOPEN_XCU_VERSION (scm-cast (begin 121)))
(define _SC_XBS5_ILP32_OFF32 (scm-cast (begin 122)))
(define _SC_XBS5_ILP32_OFFBIG (scm-cast (begin 123)))
(define _SC_XBS5_LP64_OFF64 (scm-cast (begin 124)))
(define _SC_XBS5_LPBIG_OFFBIG (scm-cast (begin 125)))
(define _CS_POSIX_V6_ILP32_OFF32_CFLAGS (scm-cast (begin 2)))
(define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS (scm-cast (begin 3)))
(define _CS_POSIX_V6_ILP32_OFF32_LIBS (scm-cast (begin 4)))
(define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS (scm-cast (begin 5)))
(define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS (scm-cast (begin 6)))
(define _CS_POSIX_V6_ILP32_OFFBIG_LIBS (scm-cast (begin 7)))
(define _CS_POSIX_V6_LP64_OFF64_CFLAGS (scm-cast (begin 8)))
(define _CS_POSIX_V6_LP64_OFF64_LDFLAGS (scm-cast (begin 9)))
(define _CS_POSIX_V6_LP64_OFF64_LIBS (scm-cast (begin 10)))
(define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS (scm-cast (begin 11)))
(define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS (scm-cast (begin 12)))
(define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS (scm-cast (begin 13)))
(define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS (scm-cast (begin 14)))
(define _CS_XBS5_ILP32_OFF32_CFLAGS (scm-cast (begin 20)))
(define _CS_XBS5_ILP32_OFF32_LDFLAGS (scm-cast (begin 21)))
(define _CS_XBS5_ILP32_OFF32_LIBS (scm-cast (begin 22)))
(define _CS_XBS5_ILP32_OFF32_LINTFLAGS (scm-cast (begin 23)))
(define _CS_XBS5_ILP32_OFFBIG_CFLAGS (scm-cast (begin 24)))
(define _CS_XBS5_ILP32_OFFBIG_LDFLAGS (scm-cast (begin 25)))
(define _CS_XBS5_ILP32_OFFBIG_LIBS (scm-cast (begin 26)))
(define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS (scm-cast (begin 27)))
(define _CS_XBS5_LP64_OFF64_CFLAGS (scm-cast (begin 28)))
(define _CS_XBS5_LP64_OFF64_LDFLAGS (scm-cast (begin 29)))
(define _CS_XBS5_LP64_OFF64_LIBS (scm-cast (begin 30)))
(define _CS_XBS5_LP64_OFF64_LINTFLAGS (scm-cast (begin 31)))
(define _CS_XBS5_LPBIG_OFFBIG_CFLAGS (scm-cast (begin 32)))
(define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS (scm-cast (begin 33)))
(define _CS_XBS5_LPBIG_OFFBIG_LIBS (scm-cast (begin 34)))
(define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS (scm-cast (begin 35)))
(define _SYS_SELECT_H_ (scm-cast (begin (begin 0))))
(define _TIME_T (scm-cast (begin (begin 0))))
(define _SUSECONDS_T (scm-cast (begin (begin 0))))
(define _TIMESPEC (scm-cast (begin (begin 0))))
(define _FD_SET (scm-cast (begin (begin 0))))
(define FD_SETSIZE (scm-cast (begin 1024)))
(define __DARWIN_NBBY (scm-cast (begin 8)))
(define __DARWIN_NFDBITS (scm-cast (begin (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8)))))
(define-syntax __DARWIN_howmany (syntax-rules () ((_ x y) (scm-cast (begin (/ (cast <real> (c-+ (identity x) (cast <real> (c-- (identity y) (cast <real> 1))))) (cast <real> (identity y))))))))
(define-syntax FD_SET (syntax-rules () ((_ n p) (scm-cast (begin (let ((%v (logior (cast <integer> (ref (raw-ref (deref (identity p)) 'fds_bits) (cast <integer> (/ (cast <real> (identity n)) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8))))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> (modulo (cast <integer> (identity n)) (cast <integer> (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8)))))))))) (set! (ref (raw-ref (deref (identity p)) 'fds_bits) (cast <integer> (/ (cast <real> (identity n)) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8)))))) %v) %v))))))
(define-syntax FD_CLR (syntax-rules () ((_ n p) (scm-cast (begin (let ((%v (logand (cast <integer> (ref (raw-ref (deref (identity p)) 'fds_bits) (cast <integer> (/ (cast <real> (identity n)) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8))))))) (cast <integer> (lognot (cast <integer> (c-<< (cast <integer> 1) (cast <integer> (modulo (cast <integer> (identity n)) (cast <integer> (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8)))))))))))) (set! (ref (raw-ref (deref (identity p)) 'fds_bits) (cast <integer> (/ (cast <real> (identity n)) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8)))))) %v) %v))))))
(define-syntax FD_ISSET (syntax-rules () ((_ n p) (scm-cast (begin (logand (cast <integer> (ref (raw-ref (deref (identity p)) 'fds_bits) (cast <integer> (/ (cast <real> (identity n)) (cast <real> (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8))))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> (modulo (cast <integer> (identity n)) (cast <integer> (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8)))))))))))))
(define-syntax FD_COPY (syntax-rules () ((_ f t) (scm-cast (begin (bcopy f t (c-sizeof (deref (identity f)))))))))
(define _SYS_TYPES_H_ (scm-cast (begin (begin 0))))
(define _U_LONG (scm-cast (begin (begin 0))))
(define _BLKCNT_T (scm-cast (begin (begin 0))))
(define _BLKSIZE_T (scm-cast (begin (begin 0))))
(define _IN_ADDR_T (scm-cast (begin (begin 0))))
(define _IN_PORT_T (scm-cast (begin (begin 0))))
(define _INO_T (scm-cast (begin (begin 0))))
(define _KEY_T (scm-cast (begin (begin 0))))
(define _NLINK_T (scm-cast (begin (begin 0))))
(define-syntax major (syntax-rules () ((_ x) (scm-cast (begin (cast <int32_t> (logand (cast <integer> (c->> (cast <integer> (cast <u_int32_t> (identity x))) (cast <integer> 24))) (cast <integer> 255))))))))
(define-syntax minor (syntax-rules () ((_ x) (scm-cast (begin (cast <int32_t> (logand (cast <integer> (identity x)) (cast <integer> 16777215))))))))
(define-syntax makedev (syntax-rules () ((_ x y) (scm-cast (begin (cast <dev_t> (logior (cast <integer> (c-<< (cast <integer> (identity x)) (cast <integer> 24))) (cast <integer> (identity y)))))))))
(define _CLOCK_T (scm-cast (begin (begin 0))))
(define NBBY (scm-cast (begin 8)))
(define NFDBITS (scm-cast (begin (* (cast <real> (c-sizeof <__int32_t>)) (cast <real> 8)))))
(define-syntax howmany (syntax-rules () ((_ x y) (scm-cast (begin (/ (cast <real> (c-+ (identity x) (cast <real> (c-- (identity y) (cast <real> 1))))) (cast <real> (identity y))))))))
(define _PTHREAD_COND_T (scm-cast (begin (begin 0))))
(define _PTHREAD_CONDATTR_T (scm-cast (begin (begin 0))))
(define _PTHREAD_MUTEX_T (scm-cast (begin (begin 0))))
(define _PTHREAD_MUTEXATTR_T (scm-cast (begin (begin 0))))
(define _PTHREAD_ONCE_T (scm-cast (begin (begin 0))))
(define _PTHREAD_RWLOCK_T (scm-cast (begin (begin 0))))
(define _PTHREAD_RWLOCKATTR_T (scm-cast (begin (begin 0))))
(define _PTHREAD_T (scm-cast (begin (begin 0))))
(define _PTHREAD_KEY_T (scm-cast (begin (begin 0))))
(define _FSBLKCNT_T (scm-cast (begin (begin 0))))
(define _FSFILCNT_T (scm-cast (begin (begin 0))))
(define _USER_SIGNAL_H (scm-cast (begin (begin 0))))
(define-syntax sigaddset (syntax-rules () ((_ set signo) (scm-cast (begin (begin (let ((%v (logior (cast <integer> (deref (identity set))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> (c-- (identity signo) (cast <real> 1)))))))) (set! (deref (identity set)) %v) %v) 0))))))
(define-syntax sigdelset (syntax-rules () ((_ set signo) (scm-cast (begin (begin (let ((%v (logand (cast <integer> (deref (identity set))) (cast <integer> (lognot (cast <integer> (c-<< (cast <integer> 1) (cast <integer> (c-- (identity signo) (cast <real> 1)))))))))) (set! (deref (identity set)) %v) %v) 0))))))
(define-syntax sigemptyset (syntax-rules () ((_ set) (scm-cast (begin (begin (let ((%v 0)) (set! (deref (identity set)) %v) %v) 0))))))
(define-syntax sigfillset (syntax-rules () ((_ set) (scm-cast (begin (begin (let ((%v (lognot (cast <integer> (cast <sigset_t> 0))))) (set! (deref (identity set)) %v) %v) 0))))))
(define-syntax sigismember (syntax-rules () ((_ set signo) (scm-cast (begin (c-!= (cast <real> (logand (cast <integer> (deref (identity set))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> (c-- (identity signo) (cast <real> 1))))))) (cast <real> 0)))))))
(define _SYS_TIME_H_ (scm-cast (begin (begin 0))))
(define ITIMER_REAL (scm-cast (begin 0)))
(define ITIMER_VIRTUAL (scm-cast (begin 1)))
(define ITIMER_PROF (scm-cast (begin 2)))
(define-syntax TIMEVAL_TO_TIMESPEC (syntax-rules () ((_ tv ts) (scm-cast (begin (begin (let ((%v (raw-ref (deref (identity tv)) 'tv_sec))) (set! (ref (deref (identity ts)) 'tv_sec) %v) %v) (let ((%v (* (cast <real> (raw-ref (deref (identity tv)) 'tv_usec)) (cast <real> 1000)))) (set! (ref (deref (identity ts)) 'tv_nsec) %v) %v)) (begin 0))))))
(define-syntax TIMESPEC_TO_TIMEVAL (syntax-rules () ((_ tv ts) (scm-cast (begin (begin (let ((%v (raw-ref (deref (identity ts)) 'tv_sec))) (set! (ref (deref (identity tv)) 'tv_sec) %v) %v) (let ((%v (/ (cast <real> (raw-ref (deref (identity ts)) 'tv_nsec)) (cast <real> 1000)))) (set! (ref (deref (identity tv)) 'tv_usec) %v) %v)) (begin 0))))))
(define DST_NONE (scm-cast (begin 0)))
(define DST_USA (scm-cast (begin 1)))
(define DST_AUST (scm-cast (begin 2)))
(define DST_WET (scm-cast (begin 3)))
(define DST_MET (scm-cast (begin 4)))
(define DST_EET (scm-cast (begin 5)))
(define DST_CAN (scm-cast (begin 6)))
(define-syntax timerclear (syntax-rules () ((_ tvp) (scm-cast (begin (let ((%v (let ((%v 0)) (set! (ref (deref (identity tvp)) 'tv_usec) %v) %v))) (set! (ref (deref (identity tvp)) 'tv_sec) %v) %v))))))
(define-syntax timerisset (syntax-rules () ((_ tvp) (scm-cast (begin (c-or (cast <real> (raw-ref (deref (identity tvp)) 'tv_sec)) (raw-ref (deref (identity tvp)) 'tv_usec)))))))
(define-syntax timeradd (syntax-rules () ((_ tvp uvp vvp) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (c-+ (raw-ref (deref (identity tvp)) 'tv_sec) (cast <real> (raw-ref (deref (identity uvp)) 'tv_sec))))) (set! (ref (deref (identity vvp)) 'tv_sec) %v) %v) (let ((%v (c-+ (raw-ref (deref (identity tvp)) 'tv_usec) (cast <real> (raw-ref (deref (identity uvp)) 'tv_usec))))) (set! (ref (deref (identity vvp)) 'tv_usec) %v) %v) (c-if (cast <real> (c->= (cast <real> (raw-ref (deref (identity vvp)) 'tv_usec)) (cast <real> 1000000))) (begin (post++ (raw-ref (deref (identity vvp)) 'tv_sec)) (let ((%v (c-- (raw-ref (deref (identity vvp)) 'tv_usec) (cast <real> 1000000)))) (set! (ref (deref (identity vvp)) 'tv_usec) %v) %v)) #t)) (%continue))) (%continue (lambda () (c-if 0 (%body) (%break 0))))) (%body)))))))))
(define-syntax timersub (syntax-rules () ((_ tvp uvp vvp) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (let ((%v (c-- (raw-ref (deref (identity tvp)) 'tv_sec) (cast <real> (raw-ref (deref (identity uvp)) 'tv_sec))))) (set! (ref (deref (identity vvp)) 'tv_sec) %v) %v) (let ((%v (c-- (raw-ref (deref (identity tvp)) 'tv_usec) (cast <real> (raw-ref (deref (identity uvp)) 'tv_usec))))) (set! (ref (deref (identity vvp)) 'tv_usec) %v) %v) (c-if (cast <real> (c-< (cast <real> (raw-ref (deref (identity vvp)) 'tv_usec)) (cast <real> 0))) (begin (post-- (raw-ref (deref (identity vvp)) 'tv_sec)) (let ((%v (c-+ (raw-ref (deref (identity vvp)) 'tv_usec) (cast <real> 1000000)))) (set! (ref (deref (identity vvp)) 'tv_usec) %v) %v)) #t)) (%continue))) (%continue (lambda () (c-if 0 (%body) (%break 0))))) (%body)))))))))
(define _TIME_H_ (scm-cast (begin (begin 0))))
(define _BSD_MACHINE__LIMITS_H_ (scm-cast (begin (begin 0))))
(define CLOCKS_PER_SEC (scm-cast (begin 100)))
(define Py_PYPORT_H (scm-cast (begin (begin 0))))
(define-syntax Py_PROTO (syntax-rules () ((_ x) (scm-cast (begin x)))))
(define-syntax Py_FPROTO (syntax-rules () ((_ x) (scm-cast (begin x)))))
(define __MATH_H__ (scm-cast (begin (begin 0))))
(define __MATH__ (scm-cast (begin (begin 0))))
(define __WANT_LONG_DOUBLE_FORMAT__ (scm-cast (begin 128)))
(define HUGE_VAL (scm-cast (begin #i1/0)))
(define HUGE_VALF (scm-cast (begin 1.0e50)))
(define INFINITY (scm-cast (begin 1.0e50)))
(define FP_NAN (scm-cast (begin _FP_NAN)))
(define FP_INFINITE (scm-cast (begin _FP_INFINITE)))
(define FP_ZERO (scm-cast (begin _FP_ZERO)))
(define FP_NORMAL (scm-cast (begin _FP_NORMAL)))
(define FP_SUBNORMAL (scm-cast (begin _FP_SUBNORMAL)))
(define FP_SUPERNORMAL (scm-cast (begin _FP_SUPERNORMAL)))
(define FP_ILOGB0 (scm-cast (begin (- (cast <real> 2147483647)))))
(define FP_ILOGBNAN (scm-cast (begin 2147483647)))
(define MATH_ERRNO (scm-cast (begin 1)))
(define MATH_ERREXCEPT (scm-cast (begin 2)))
(define-syntax fpclassify (syntax-rules () ((_ x) (scm-cast (begin (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-double>)))) (__fpclassifyd (cast <c-double> (identity x))) (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-float>)))) (__fpclassifyf (cast <c-float> (identity x))) (__fpclassify (cast <c-longdouble> (identity x))))))))))
(define-syntax isnormal (syntax-rules () ((_ x) (scm-cast (begin (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-double>)))) (__isnormald (cast <c-double> (identity x))) (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-float>)))) (__isnormalf (cast <c-float> (identity x))) (__isnormal (cast <c-longdouble> (identity x))))))))))
(define-syntax isfinite (syntax-rules () ((_ x) (scm-cast (begin (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-double>)))) (__isfinited (cast <c-double> (identity x))) (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-float>)))) (__isfinitef (cast <c-float> (identity x))) (__isfinite (cast <c-longdouble> (identity x))))))))))
(define-syntax isinf (syntax-rules () ((_ x) (scm-cast (begin (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-double>)))) (__isinfd (cast <c-double> (identity x))) (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-float>)))) (__isinff (cast <c-float> (identity x))) (__isinf (cast <c-longdouble> (identity x))))))))))
(define-syntax isnan (syntax-rules () ((_ x) (scm-cast (begin (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-double>)))) (__isnand (cast <c-double> (identity x))) (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-float>)))) (__isnanf (cast <c-float> (identity x))) (__isnan (cast <c-longdouble> (identity x))))))))))
(define-syntax signbit (syntax-rules () ((_ x) (scm-cast (begin (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-double>)))) (__signbitd (cast <c-double> (identity x))) (c-if (cast <real> (c-== (cast <real> (c-sizeof (identity x))) (cast <real> (c-sizeof <c-float>)))) (__signbitf (cast <c-float> (identity x))) (__signbitl (cast <c-longdouble> (identity x))))))))))
(define M_E (scm-cast (begin 2.718281828459045)))
(define M_LOG2E (scm-cast (begin 1.4426950408889634)))
(define M_LOG10E (scm-cast (begin 0.4342944819032518)))
(define M_LN2 (scm-cast (begin 0.6931471805599453)))
(define M_LN10 (scm-cast (begin 2.302585092994046)))
(define M_PI (scm-cast (begin 3.141592653589793)))
(define M_PI_2 (scm-cast (begin 1.5707963267948966)))
(define M_PI_4 (scm-cast (begin 0.7853981633974483)))
(define M_1_PI (scm-cast (begin 0.3183098861837907)))
(define M_2_PI (scm-cast (begin 0.6366197723675814)))
(define M_2_SQRTPI (scm-cast (begin 1.1283791670955126)))
(define M_SQRT2 (scm-cast (begin 1.4142135623730951)))
(define M_SQRT1_2 (scm-cast (begin 0.7071067811865476)))
(define MAXFLOAT (scm-cast (begin (cast <c-float> 3.4028234663852886e38))))
(define __WANT_EXTENSIONS__ (scm-cast (begin (begin 0))))
(define FP_SNAN (scm-cast (begin _FP_NAN)))
(define FP_QNAN (scm-cast (begin _FP_NAN)))
(define fdlibm_ieee (scm-cast (begin _fdlibm_ieee)))
(define fdlibm_svid (scm-cast (begin _fdlibm_svid)))
(define fdlibm_xopen (scm-cast (begin _fdlibm_xopen)))
(define fdlibm_posix (scm-cast (begin _fdlibm_posix)))
(define _LIB_VERSION (scm-cast (begin _fdlib_version)))
(define _IEEE_ (scm-cast (begin _fdlibm_ieee)))
(define _SVID_ (scm-cast (begin _fdlibm_svid)))
(define _XOPEN_ (scm-cast (begin _fdlibm_xopen)))
(define _POSIX_ (scm-cast (begin _fdlibm_posix)))
(define HUGE (scm-cast (begin (cast <c-float> 3.4028234663852886e38))))
(define X_TLOSS (scm-cast (begin 1.414847550405688e16)))
(define DOMAIN (scm-cast (begin 1)))
(define SING (scm-cast (begin 2)))
(define OVERFLOW (scm-cast (begin 3)))
(define UNDERFLOW (scm-cast (begin 4)))
(define TLOSS (scm-cast (begin 5)))
(define PLOSS (scm-cast (begin 6)))
(define HAVE_STAT (scm-cast (begin (begin 0))))
(define HAVE_FSTAT (scm-cast (begin (begin 0))))
(define _SYS_STAT_H_ (scm-cast (begin (begin 0))))
(define S_IFMT (scm-cast (begin 61440)))
(define S_IFIFO (scm-cast (begin 4096)))
(define S_IFCHR (scm-cast (begin 8192)))
(define S_IFDIR (scm-cast (begin 16384)))
(define S_IFBLK (scm-cast (begin 24576)))
(define S_IFREG (scm-cast (begin 32768)))
(define S_IFLNK (scm-cast (begin 40960)))
(define S_IFSOCK (scm-cast (begin 49152)))
(define S_IFWHT (scm-cast (begin 57344)))
(define S_IFXATTR (scm-cast (begin 65536)))
(define S_IRWXU (scm-cast (begin 448)))
(define S_IRUSR (scm-cast (begin 256)))
(define S_IWUSR (scm-cast (begin 128)))
(define S_IXUSR (scm-cast (begin 64)))
(define S_IRWXG (scm-cast (begin 56)))
(define S_IRGRP (scm-cast (begin 32)))
(define S_IWGRP (scm-cast (begin 16)))
(define S_IXGRP (scm-cast (begin 8)))
(define S_IRWXO (scm-cast (begin 7)))
(define S_IROTH (scm-cast (begin 4)))
(define S_IWOTH (scm-cast (begin 2)))
(define S_IXOTH (scm-cast (begin 1)))
(define S_ISUID (scm-cast (begin 2048)))
(define S_ISGID (scm-cast (begin 1024)))
(define S_ISVTX (scm-cast (begin 512)))
(define S_ISTXT (scm-cast (begin 512)))
(define S_IREAD (scm-cast (begin 256)))
(define S_IWRITE (scm-cast (begin 128)))
(define S_IEXEC (scm-cast (begin 64)))
(define-syntax S_ISBLK (syntax-rules () ((_ m) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (identity m)) (cast <integer> 61440))) (cast <real> 24576)))))))
(define-syntax S_ISCHR (syntax-rules () ((_ m) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (identity m)) (cast <integer> 61440))) (cast <real> 8192)))))))
(define-syntax S_ISDIR (syntax-rules () ((_ m) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (identity m)) (cast <integer> 61440))) (cast <real> 16384)))))))
(define-syntax S_ISFIFO (syntax-rules () ((_ m) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (identity m)) (cast <integer> 61440))) (cast <real> 4096)))))))
(define-syntax S_ISREG (syntax-rules () ((_ m) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (identity m)) (cast <integer> 61440))) (cast <real> 32768)))))))
(define-syntax S_ISLNK (syntax-rules () ((_ m) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (identity m)) (cast <integer> 61440))) (cast <real> 40960)))))))
(define-syntax S_ISSOCK (syntax-rules () ((_ m) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (identity m)) (cast <integer> 61440))) (cast <real> 49152)))))))
(define-syntax S_ISWHT (syntax-rules () ((_ m) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (identity m)) (cast <integer> 61440))) (cast <real> 57344)))))))
(define-syntax S_ISXATTR (syntax-rules () ((_ m) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (identity m)) (cast <integer> 65536))) (cast <real> 65536)))))))
(define-syntax S_TYPEISMQ (syntax-rules () ((_ buf) (scm-cast (begin 0)))))
(define-syntax S_TYPEISSEM (syntax-rules () ((_ buf) (scm-cast (begin 0)))))
(define-syntax S_TYPEISSHM (syntax-rules () ((_ buf) (scm-cast (begin 0)))))
(define-syntax S_TYPEISTMO (syntax-rules () ((_ buf) (scm-cast (begin 0)))))
(define ACCESSPERMS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> 448) (cast <integer> 56))) (cast <integer> 7)))))
(define ALLPERMS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> 2048) (cast <integer> 1024))) (cast <integer> 512))) (cast <integer> 448))) (cast <integer> 56))) (cast <integer> 7)))))
(define DEFFILEMODE (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> 256) (cast <integer> 128))) (cast <integer> 32))) (cast <integer> 16))) (cast <integer> 4))) (cast <integer> 2)))))
(define S_BLKSIZE (scm-cast (begin 512)))
(define UF_SETTABLE (scm-cast (begin 65535)))
(define UF_NODUMP (scm-cast (begin 1)))
(define UF_IMMUTABLE (scm-cast (begin 2)))
(define UF_APPEND (scm-cast (begin 4)))
(define UF_OPAQUE (scm-cast (begin 8)))
(define SF_SETTABLE (scm-cast (begin 4294901760)))
(define SF_ARCHIVED (scm-cast (begin 65536)))
(define SF_IMMUTABLE (scm-cast (begin 131072)))
(define SF_APPEND (scm-cast (begin 262144)))
(define _FILESEC_T (scm-cast (begin (begin 0))))
(define-syntax Py_ARITHMETIC_RIGHT_SHIFT (syntax-rules () ((_ TYPE I J) (scm-cast (begin (c->> (cast <integer> (identity I)) (cast <integer> (identity J))))))))
(define-syntax Py_FORCE_EXPANSION (syntax-rules () ((_ X) (scm-cast (begin X)))))
(define-syntax Py_SAFE_DOWNCAST (syntax-rules () ((_ VALUE WIDE NARROW) (scm-cast (begin (#f VALUE))))))
(define-syntax Py_IS_INFINITY (syntax-rules () ((_ X) (scm-cast (begin (c-and (cast <real> (identity X)) (c-== (cast <real> (* (cast <real> (identity X)) (cast <real> 0.5))) (cast <real> (identity X)))))))))
(define Py_HUGE_VAL (scm-cast (begin #i1/0)))
(define-syntax Py_OVERFLOWED (syntax-rules () ((_ X) (scm-cast (begin (c-and (cast <real> (c-!= (cast <real> (identity X)) (cast <real> 0.0))) (c-or (cast <real> (c-or (cast <real> (c-== (cast <real> (deref (__error))) (cast <real> 34))) (c-== (cast <real> (identity X)) (cast <real> #i1/0)))) (c-== (cast <real> (identity X)) (cast <real> (- (cast <real> #i1/0)))))))))))
(define-syntax Py_SET_ERANGE_IF_OVERFLOW (syntax-rules () ((_ X) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (c-if (cast <real> (c-and (cast <real> (c-== (cast <real> (deref (__error))) (cast <real> 0))) (c-or (cast <real> (c-== (cast <real> (identity X)) (cast <real> #i1/0))) (c-== (cast <real> (identity X)) (cast <real> (- (cast <real> #i1/0))))))) (let ((%v 34)) (set! (deref (__error)) %v) %v) #t)) (%continue))) (%continue (lambda () (c-if 0 (%body) (%break 0))))) (%body)))))))))
(define-syntax Py_ADJUST_ERANGE1 (syntax-rules () ((_ X) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (c-if (cast <real> (c-== (cast <real> (deref (__error))) (cast <real> 0))) (begin (c-if (cast <real> (c-or (cast <real> (c-== (cast <real> (identity X)) (cast <real> #i1/0))) (c-== (cast <real> (identity X)) (cast <real> (- (cast <real> #i1/0)))))) (let ((%v 34)) (set! (deref (__error)) %v) %v) #t)) (c-if (cast <real> (c-and (cast <real> (c-== (cast <real> (deref (__error))) (cast <real> 34))) (c-== (cast <real> (identity X)) (cast <real> 0.0)))) (let ((%v 0)) (set! (deref (__error)) %v) %v) #t))) (%continue))) (%continue (lambda () (c-if 0 (%body) (%break 0))))) (%body)))))))))
(define-syntax Py_ADJUST_ERANGE2 (syntax-rules () ((_ X Y) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (begin (c-if (cast <real> (c-or (cast <real> (c-or (cast <real> (c-or (cast <real> (c-== (cast <real> (identity X)) (cast <real> #i1/0))) (c-== (cast <real> (identity X)) (cast <real> (- (cast <real> #i1/0)))))) (c-== (cast <real> (identity Y)) (cast <real> #i1/0)))) (c-== (cast <real> (identity Y)) (cast <real> (- (cast <real> #i1/0)))))) (begin (c-if (cast <real> (c-== (cast <real> (deref (__error))) (cast <real> 0))) (let ((%v 34)) (set! (deref (__error)) %v) %v) #t)) (c-if (cast <real> (c-== (cast <real> (deref (__error))) (cast <real> 34))) (let ((%v 0)) (set! (deref (__error)) %v) %v) #t))) (%continue))) (%continue (lambda () (c-if 0 (%body) (%break 0))))) (%body)))))))))
(define-syntax Py_DEPRECATED (syntax-rules () ((_ VERSION_UNUSED) (scm-cast (begin (begin 0))))))
(define __TERMIOS_H__ (scm-cast (begin (begin 0))))
(define _SYS_TERMIOS_H_ (scm-cast (begin (begin 0))))
(define VEOF (scm-cast (begin 0)))
(define VEOL (scm-cast (begin 1)))
(define VEOL2 (scm-cast (begin 2)))
(define VERASE (scm-cast (begin 3)))
(define VWERASE (scm-cast (begin 4)))
(define VKILL (scm-cast (begin 5)))
(define VREPRINT (scm-cast (begin 6)))
(define VINTR (scm-cast (begin 8)))
(define VQUIT (scm-cast (begin 9)))
(define VSUSP (scm-cast (begin 10)))
(define VDSUSP (scm-cast (begin 11)))
(define VSTART (scm-cast (begin 12)))
(define VSTOP (scm-cast (begin 13)))
(define VLNEXT (scm-cast (begin 14)))
(define VDISCARD (scm-cast (begin 15)))
(define VMIN (scm-cast (begin 16)))
(define VTIME (scm-cast (begin 17)))
(define VSTATUS (scm-cast (begin 18)))
(define NCCS (scm-cast (begin 20)))
(define-syntax CCEQ (syntax-rules () ((_ val c) (scm-cast (begin (c-if (cast <real> (c-== (cast <real> (identity c)) (cast <real> (identity val)))) (c-!= (cast <real> (identity val)) (cast <real> (cast <c-uchar> 255))) 0))))))
(define IGNBRK (scm-cast (begin 1)))
(define BRKINT (scm-cast (begin 2)))
(define IGNPAR (scm-cast (begin 4)))
(define PARMRK (scm-cast (begin 8)))
(define INPCK (scm-cast (begin 16)))
(define ISTRIP (scm-cast (begin 32)))
(define INLCR (scm-cast (begin 64)))
(define IGNCR (scm-cast (begin 128)))
(define ICRNL (scm-cast (begin 256)))
(define IXON (scm-cast (begin 512)))
(define IXOFF (scm-cast (begin 1024)))
(define IXANY (scm-cast (begin 2048)))
(define IMAXBEL (scm-cast (begin 8192)))
(define OPOST (scm-cast (begin 1)))
(define ONLCR (scm-cast (begin 2)))
(define OXTABS (scm-cast (begin 4)))
(define ONOEOT (scm-cast (begin 8)))
(define OCRNL (scm-cast (begin 16)))
(define ONOCR (scm-cast (begin 32)))
(define ONLRET (scm-cast (begin 64)))
(define OFILL (scm-cast (begin 128)))
(define NLDLY (scm-cast (begin 768)))
(define TABDLY (scm-cast (begin 3072)))
(define CRDLY (scm-cast (begin 12288)))
(define FFDLY (scm-cast (begin 16384)))
(define BSDLY (scm-cast (begin 32768)))
(define VTDLY (scm-cast (begin 65536)))
(define OFDEL (scm-cast (begin 131072)))
(define NL0 (scm-cast (begin 0)))
(define NL1 (scm-cast (begin 256)))
(define NL2 (scm-cast (begin 512)))
(define NL3 (scm-cast (begin 768)))
(define TAB0 (scm-cast (begin 0)))
(define TAB1 (scm-cast (begin 1024)))
(define TAB2 (scm-cast (begin 2048)))
(define TAB3 (scm-cast (begin 3072)))
(define CR0 (scm-cast (begin 0)))
(define CR1 (scm-cast (begin 4096)))
(define CR2 (scm-cast (begin 8192)))
(define CR3 (scm-cast (begin 12288)))
(define FF0 (scm-cast (begin 0)))
(define FF1 (scm-cast (begin 16384)))
(define BS0 (scm-cast (begin 0)))
(define BS1 (scm-cast (begin 32768)))
(define VT0 (scm-cast (begin 0)))
(define VT1 (scm-cast (begin 65536)))
(define CIGNORE (scm-cast (begin 1)))
(define CSIZE (scm-cast (begin 768)))
(define CS5 (scm-cast (begin 0)))
(define CS6 (scm-cast (begin 256)))
(define CS7 (scm-cast (begin 512)))
(define CS8 (scm-cast (begin 768)))
(define CSTOPB (scm-cast (begin 1024)))
(define CREAD (scm-cast (begin 2048)))
(define PARENB (scm-cast (begin 4096)))
(define PARODD (scm-cast (begin 8192)))
(define HUPCL (scm-cast (begin 16384)))
(define CLOCAL (scm-cast (begin 32768)))
(define CCTS_OFLOW (scm-cast (begin 65536)))
(define CRTSCTS (scm-cast (begin (logior (cast <integer> 65536) (cast <integer> 131072)))))
(define CRTS_IFLOW (scm-cast (begin 131072)))
(define CDTR_IFLOW (scm-cast (begin 262144)))
(define CDSR_OFLOW (scm-cast (begin 524288)))
(define CCAR_OFLOW (scm-cast (begin 1048576)))
(define MDMBUF (scm-cast (begin 1048576)))
(define ECHOKE (scm-cast (begin 1)))
(define ECHOE (scm-cast (begin 2)))
(define ECHOK (scm-cast (begin 4)))
(define ECHO (scm-cast (begin 8)))
(define ECHONL (scm-cast (begin 16)))
(define ECHOPRT (scm-cast (begin 32)))
(define ECHOCTL (scm-cast (begin 64)))
(define ISIG (scm-cast (begin 128)))
(define ICANON (scm-cast (begin 256)))
(define ALTWERASE (scm-cast (begin 512)))
(define IEXTEN (scm-cast (begin 1024)))
(define EXTPROC (scm-cast (begin 2048)))
(define TOSTOP (scm-cast (begin 4194304)))
(define FLUSHO (scm-cast (begin 8388608)))
(define NOKERNINFO (scm-cast (begin 33554432)))
(define PENDIN (scm-cast (begin 536870912)))
(define NOFLSH (scm-cast (begin 2147483648)))
(define TCSANOW (scm-cast (begin 0)))
(define TCSADRAIN (scm-cast (begin 1)))
(define TCSAFLUSH (scm-cast (begin 2)))
(define TCSASOFT (scm-cast (begin 16)))
(define B0 (scm-cast (begin 0)))
(define B50 (scm-cast (begin 50)))
(define B75 (scm-cast (begin 75)))
(define B110 (scm-cast (begin 110)))
(define B134 (scm-cast (begin 134)))
(define B150 (scm-cast (begin 150)))
(define B200 (scm-cast (begin 200)))
(define B300 (scm-cast (begin 300)))
(define B600 (scm-cast (begin 600)))
(define B1200 (scm-cast (begin 1200)))
(define B1800 (scm-cast (begin 1800)))
(define B2400 (scm-cast (begin 2400)))
(define B4800 (scm-cast (begin 4800)))
(define B9600 (scm-cast (begin 9600)))
(define B19200 (scm-cast (begin 19200)))
(define B38400 (scm-cast (begin 38400)))
(define B7200 (scm-cast (begin 7200)))
(define B14400 (scm-cast (begin 14400)))
(define B28800 (scm-cast (begin 28800)))
(define B57600 (scm-cast (begin 57600)))
(define B76800 (scm-cast (begin 76800)))
(define B115200 (scm-cast (begin 115200)))
(define B230400 (scm-cast (begin 230400)))
(define EXTA (scm-cast (begin 19200)))
(define EXTB (scm-cast (begin 38400)))
(define TCIFLUSH (scm-cast (begin 1)))
(define TCOFLUSH (scm-cast (begin 2)))
(define TCIOFLUSH (scm-cast (begin 3)))
(define TCOOFF (scm-cast (begin 1)))
(define TCOON (scm-cast (begin 2)))
(define TCIOFF (scm-cast (begin 3)))
(define TCION (scm-cast (begin 4)))
(define _SYS_TTYCOM_H_ (scm-cast (begin (begin 0))))
(define _SYS_IOCCOM_H_ (scm-cast (begin (begin 0))))
(define IOCPARM_MASK (scm-cast (begin 8191)))
(define-syntax IOCPARM_LEN (syntax-rules () ((_ x) (scm-cast (begin (logand (cast <integer> (c->> (cast <integer> (identity x)) (cast <integer> 16))) (cast <integer> 8191)))))))
(define-syntax IOCBASECMD (syntax-rules () ((_ x) (scm-cast (begin (logand (cast <integer> (identity x)) (cast <integer> (lognot (cast <integer> (c-<< (cast <integer> 8191) (cast <integer> 16)))))))))))
(define-syntax IOCGROUP (syntax-rules () ((_ x) (scm-cast (begin (logand (cast <integer> (c->> (cast <integer> (identity x)) (cast <integer> 8))) (cast <integer> 255)))))))
(define IOCPARM_MAX (scm-cast (begin (c-+ 8191 (cast <real> 1)))))
(define IOC_VOID (scm-cast (begin (cast <c-ulong> 536870912))))
(define IOC_OUT (scm-cast (begin (cast <c-ulong> 1073741824))))
(define IOC_IN (scm-cast (begin (cast <c-ulong> 2147483648))))
(define IOC_INOUT (scm-cast (begin (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824))))))
(define IOC_DIRMASK (scm-cast (begin (cast <c-ulong> 3758096384))))
(define-syntax _IOC (syntax-rules () ((_ inout group num len) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> inout) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> len) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> (identity group)) (cast <integer> 8))))) (cast <integer> (identity num))))))))
(define-syntax _IO (syntax-rules () ((_ g n) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> (identity g)) (cast <integer> 8))))) (cast <integer> (identity n))))))))
(define-syntax _IOR (syntax-rules () ((_ g n t) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof (identity t))) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> (identity g)) (cast <integer> 8))))) (cast <integer> (identity n))))))))
(define-syntax _IOW (syntax-rules () ((_ g n t) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof (identity t))) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> (identity g)) (cast <integer> 8))))) (cast <integer> (identity n))))))))
(define-syntax _IOWR (syntax-rules () ((_ g n t) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (cast <c-ulong> 1073741824)))) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof (identity t))) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> (identity g)) (cast <integer> 8))))) (cast <integer> (identity n))))))))
(define TIOCMODG (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 3)))))
(define TIOCMODS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 4)))))
(define TIOCM_LE (scm-cast (begin 1)))
(define TIOCM_DTR (scm-cast (begin 2)))
(define TIOCM_RTS (scm-cast (begin 4)))
(define TIOCM_ST (scm-cast (begin 8)))
(define TIOCM_SR (scm-cast (begin 16)))
(define TIOCM_CTS (scm-cast (begin 32)))
(define TIOCM_CAR (scm-cast (begin 64)))
(define TIOCM_CD (scm-cast (begin 64)))
(define TIOCM_RNG (scm-cast (begin 128)))
(define TIOCM_RI (scm-cast (begin 128)))
(define TIOCM_DSR (scm-cast (begin 256)))
(define TIOCEXCL (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 13)))))
(define TIOCNXCL (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 14)))))
(define TIOCFLUSH (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 16)))))
(define TIOCGETA (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-struct:termios>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 19)))))
(define TIOCSETA (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-struct:termios>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 20)))))
(define TIOCSETAW (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-struct:termios>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 21)))))
(define TIOCSETAF (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-struct:termios>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 22)))))
(define TIOCGETD (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 26)))))
(define TIOCSETD (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 27)))))
(define TIOCSBRK (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 123)))))
(define TIOCCBRK (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 122)))))
(define TIOCSDTR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 121)))))
(define TIOCCDTR (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 120)))))
(define TIOCGPGRP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 119)))))
(define TIOCSPGRP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 118)))))
(define TIOCOUTQ (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 115)))))
(define TIOCSTI (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-char>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 114)))))
(define TIOCNOTTY (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 113)))))
(define TIOCPKT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 112)))))
(define TIOCPKT_DATA (scm-cast (begin 0)))
(define TIOCPKT_FLUSHREAD (scm-cast (begin 1)))
(define TIOCPKT_FLUSHWRITE (scm-cast (begin 2)))
(define TIOCPKT_STOP (scm-cast (begin 4)))
(define TIOCPKT_START (scm-cast (begin 8)))
(define TIOCPKT_NOSTOP (scm-cast (begin 16)))
(define TIOCPKT_DOSTOP (scm-cast (begin 32)))
(define TIOCPKT_IOCTL (scm-cast (begin 64)))
(define TIOCSTOP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 111)))))
(define TIOCSTART (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 110)))))
(define TIOCMSET (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 109)))))
(define TIOCMBIS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 108)))))
(define TIOCMBIC (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 107)))))
(define TIOCMGET (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 106)))))
(define TIOCREMOTE (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 105)))))
(define TIOCGWINSZ (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-struct:winsize>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 104)))))
(define TIOCSWINSZ (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-struct:winsize>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 103)))))
(define TIOCUCNTL (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 102)))))
(define TIOCSTAT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 101)))))
(define-syntax UIOCCMD (syntax-rules () ((_ n) (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 117) (cast <integer> 8))))) (cast <integer> (identity n))))))))
(define TIOCSCONS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 99)))))
(define TIOCCONS (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 98)))))
(define TIOCSCTTY (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 97)))))
(define TIOCEXT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 96)))))
(define TIOCSIG (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 95)))))
(define TIOCDRAIN (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 94)))))
(define TIOCMSDTRWAIT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 91)))))
(define TIOCMGDTRWAIT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 90)))))
(define TIOCTIMESTAMP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-struct:timeval>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 89)))))
(define TIOCDCDTIMESTAMP (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-struct:timeval>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 88)))))
(define TIOCSDRAINWAIT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 2147483648)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 87)))))
(define TIOCGDRAINWAIT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 1073741824)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> (c-sizeof <c-int>)) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 86)))))
(define TIOCDSIMICROCODE (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (cast <c-ulong> 536870912)) (cast <integer> (c-<< (cast <integer> (logand (cast <integer> 0) (cast <integer> 8191))) (cast <integer> 16))))) (cast <integer> (c-<< (cast <integer> 116) (cast <integer> 8))))) (cast <integer> 85)))))
(define TTYDISC (scm-cast (begin 0)))
(define TABLDISC (scm-cast (begin 3)))
(define SLIPDISC (scm-cast (begin 4)))
(define PPPDISC (scm-cast (begin 5)))
(define _SYS_TTYDEFAULTS_H_ (scm-cast (begin (begin 0))))
(define TTYDEF_IFLAG (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> 2) (cast <integer> 256))) (cast <integer> 8192))) (cast <integer> 512))) (cast <integer> 2048)))))
(define TTYDEF_OFLAG (scm-cast (begin (logior (cast <integer> 1) (cast <integer> 2)))))
(define TTYDEF_LFLAG (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> 8) (cast <integer> 256))) (cast <integer> 128))) (cast <integer> 1024))) (cast <integer> 2))) (cast <integer> 1))) (cast <integer> 64)))))
(define TTYDEF_CFLAG (scm-cast (begin (logior (cast <integer> (logior (cast <integer> 2048) (cast <integer> 768))) (cast <integer> 16384)))))
(define TTYDEF_SPEED (scm-cast (begin 9600)))
(define-syntax CTRL (syntax-rules () ((_ x) (scm-cast (begin (logand (cast <integer> x) (cast <integer> 31)))))))
(define CEOF (scm-cast (begin (logand (cast <integer> 100) (cast <integer> 31)))))
(define CEOL (scm-cast (begin 255)))
(define CERASE (scm-cast (begin 127)))
(define CINTR (scm-cast (begin (logand (cast <integer> 99) (cast <integer> 31)))))
(define CSTATUS (scm-cast (begin (logand (cast <integer> 116) (cast <integer> 31)))))
(define CKILL (scm-cast (begin (logand (cast <integer> 117) (cast <integer> 31)))))
(define CMIN (scm-cast (begin 1)))
(define CQUIT (scm-cast (begin 28)))
(define CSUSP (scm-cast (begin (logand (cast <integer> 122) (cast <integer> 31)))))
(define CTIME (scm-cast (begin 0)))
(define CDSUSP (scm-cast (begin (logand (cast <integer> 121) (cast <integer> 31)))))
(define CSTART (scm-cast (begin (logand (cast <integer> 113) (cast <integer> 31)))))
(define CSTOP (scm-cast (begin (logand (cast <integer> 115) (cast <integer> 31)))))
(define CLNEXT (scm-cast (begin (logand (cast <integer> 118) (cast <integer> 31)))))
(define CDISCARD (scm-cast (begin (logand (cast <integer> 111) (cast <integer> 31)))))
(define CWERASE (scm-cast (begin (logand (cast <integer> 119) (cast <integer> 31)))))
(define CREPRINT (scm-cast (begin (logand (cast <integer> 114) (cast <integer> 31)))))
(define CEOT (scm-cast (begin (logand (cast <integer> 100) (cast <integer> 31)))))
(define CBRK (scm-cast (begin 255)))
(define CRPRNT (scm-cast (begin (logand (cast <integer> 114) (cast <integer> 31)))))
(define CFLUSH (scm-cast (begin (logand (cast <integer> 111) (cast <integer> 31)))))
(define-syntax PyAPI_FUNC (syntax-rules () ((_ RTYPE) (scm-cast (begin RTYPE)))))
(define-syntax DL_EXPORT (syntax-rules () ((_ RTYPE) (scm-cast (begin RTYPE)))))
(define-syntax DL_IMPORT (syntax-rules () ((_ RTYPE) (scm-cast (begin RTYPE)))))
(define-syntax Py_GCC_ATTRIBUTE (syntax-rules () ((_ x) (scm-cast (begin (begin 0))))))
(define Py_PYMEM_H (scm-cast (begin (begin 0))))
(define-syntax PyMem_MALLOC (syntax-rules () ((_ n) (scm-cast (begin (malloc (c-if (cast <real> (identity n)) (identity n) 1)))))))
(define-syntax PyMem_REALLOC (syntax-rules () ((_ p n) (scm-cast (begin (realloc (identity p) (c-if (cast <real> (identity n)) (identity n) 1)))))))
(define PyMem_FREE (scm-cast (begin PyObject_Free)))
(define PyMem_Del (scm-cast (begin PyObject_Free)))
(define PyMem_DEL (scm-cast (begin PyObject_Free)))
(define Py_OBJECT_H (scm-cast (begin (begin 0))))
(define _PyObject_HEAD_EXTRA (scm-cast (begin (begin 0))))
(define _PyObject_EXTRA_INIT (scm-cast (begin (begin 0))))
(define-syntax PyObject_TypeCheck (syntax-rules () ((_ ob tp) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity ob)) 'ob_type)) (cast <real> (identity tp)))) (PyType_IsSubtype (raw-ref (deref (identity ob)) 'ob_type) (identity tp))))))))
(define-syntax PyType_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyType_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyType_Type))))))))
(define-syntax PyType_CheckExact (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyType_Type))))))))
(define-syntax PyObject_REPR (syntax-rules () ((_ obj) (scm-cast (begin (raw-ref (deref (cast (ptr <PyStringObject>) (PyObject_Repr obj))) 'ob_sval))))))
(define Py_PRINT_RAW (scm-cast (begin 1)))
(define Py_TPFLAGS_HAVE_GETCHARBUFFER (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 0)))))
(define Py_TPFLAGS_HAVE_SEQUENCE_IN (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 1)))))
(define Py_TPFLAGS_GC (scm-cast (begin 0)))
(define Py_TPFLAGS_HAVE_INPLACEOPS (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 3)))))
(define Py_TPFLAGS_CHECKTYPES (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 4)))))
(define Py_TPFLAGS_HAVE_RICHCOMPARE (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 5)))))
(define Py_TPFLAGS_HAVE_WEAKREFS (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 6)))))
(define Py_TPFLAGS_HAVE_ITER (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 7)))))
(define Py_TPFLAGS_HAVE_CLASS (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 8)))))
(define Py_TPFLAGS_HEAPTYPE (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 9)))))
(define Py_TPFLAGS_BASETYPE (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 10)))))
(define Py_TPFLAGS_READY (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 12)))))
(define Py_TPFLAGS_READYING (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 13)))))
(define Py_TPFLAGS_HAVE_GC (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 14)))))
(define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (scm-cast (begin 0)))
(define Py_TPFLAGS_DEFAULT (scm-cast (begin (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (logior (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 0))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 1))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 3))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 5))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 6))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 7))))) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 8))))) (cast <integer> 0))) (cast <integer> 0)))))
(define-syntax PyType_HasFeature (syntax-rules () ((_ t f) (scm-cast (begin (c-!= (cast <real> (logand (cast <integer> (raw-ref (deref (identity t)) 'tp_flags)) (cast <integer> (identity f)))) (cast <real> 0)))))))
(define _Py_INC_REFTOTAL (scm-cast (begin (begin 0))))
(define _Py_DEC_REFTOTAL (scm-cast (begin (begin 0))))
(define _Py_REF_DEBUG_COMMA (scm-cast (begin (begin 0))))
(define-syntax _Py_CHECK_REFCNT (syntax-rules () ((_ OP) (scm-cast (begin (begin 0) (begin 0))))))
(define-syntax _Py_INC_TPALLOCS (syntax-rules () ((_ OP) (scm-cast (begin (begin 0))))))
(define-syntax _Py_INC_TPFREES (syntax-rules () ((_ OP) (scm-cast (begin (begin 0))))))
(define-syntax _Py_DEC_TPFREES (syntax-rules () ((_ OP) (scm-cast (begin (begin 0))))))
(define _Py_COUNT_ALLOCS_COMMA (scm-cast (begin (begin 0))))
(define-syntax _Py_NewReference (syntax-rules () ((_ op) (scm-cast (begin (let ((%v 1)) (set! (ref (deref (identity op)) 'ob_refcnt) %v) %v))))))
(define-syntax _Py_ForgetReference (syntax-rules () ((_ op) (scm-cast (begin (begin 0))))))
(define-syntax _Py_Dealloc (syntax-rules () ((_ op) (scm-cast (begin ((deref (raw-ref (deref (raw-ref (deref (identity op)) 'ob_type)) 'tp_dealloc)) (cast (ptr <PyObject>) (identity op))))))))
(define-syntax Py_INCREF (syntax-rules () ((_ op) (scm-cast (begin (post++ (raw-ref (deref (identity op)) 'ob_refcnt)))))))
(define-syntax Py_DECREF (syntax-rules () ((_ op) (scm-cast (begin (c-if (cast <real> (c-!= (cast <real> (pre-- (raw-ref (deref (identity op)) 'ob_refcnt))) (cast <real> 0))) (begin 0) ((deref (raw-ref (deref (raw-ref (deref (cast (ptr <PyObject>) (identity op))) 'ob_type)) 'tp_dealloc)) (cast (ptr <PyObject>) (cast (ptr <PyObject>) (identity op))))))))))
(define-syntax Py_XINCREF (syntax-rules () ((_ op) (scm-cast (begin (c-if (cast <real> (c-== (cast <real> (identity op)) (cast <real> (cast (ptr <c-void>) 0)))) (begin 0) (post++ (raw-ref (deref (identity op)) 'ob_refcnt))))))))
(define-syntax Py_XDECREF (syntax-rules () ((_ op) (scm-cast (begin (c-if (cast <real> (c-== (cast <real> (identity op)) (cast <real> (cast (ptr <c-void>) 0)))) (begin 0) (c-if (cast <real> (c-!= (cast <real> (pre-- (raw-ref (deref (identity op)) 'ob_refcnt))) (cast <real> 0))) (begin 0) ((deref (raw-ref (deref (raw-ref (deref (cast (ptr <PyObject>) (identity op))) 'ob_type)) 'tp_dealloc)) (cast (ptr <PyObject>) (cast (ptr <PyObject>) (identity op)))))))))))
(define Py_None (scm-cast (begin (ptr _Py_NoneStruct))))
(define Py_NotImplemented (scm-cast (begin (ptr _Py_NotImplementedStruct))))
(define Py_LT (scm-cast (begin 0)))
(define Py_LE (scm-cast (begin 1)))
(define Py_EQ (scm-cast (begin 2)))
(define Py_NE (scm-cast (begin 3)))
(define Py_GT (scm-cast (begin 4)))
(define Py_GE (scm-cast (begin 5)))
(define PyTrash_UNWIND_LEVEL (scm-cast (begin 50)))
(define Py_OBJIMPL_H (scm-cast (begin (begin 0))))
(define PyObject_MALLOC (scm-cast (begin PyObject_Malloc)))
(define PyObject_REALLOC (scm-cast (begin PyObject_Realloc)))
(define PyObject_FREE (scm-cast (begin PyObject_Free)))
(define PyObject_Del (scm-cast (begin PyObject_Free)))
(define PyObject_DEL (scm-cast (begin PyObject_Free)))
(define _PyObject_Del (scm-cast (begin PyObject_Free)))
(define-syntax PyObject_INIT (syntax-rules () ((_ op typeobj) (scm-cast (begin (begin (begin (let ((%v (identity typeobj))) (set! (ref (deref (identity op)) 'ob_type) %v) %v) (let ((%v 1)) (set! (ref (deref (cast (ptr <PyObject>) (identity op))) 'ob_refcnt) %v) %v)) (identity op)))))))
(define-syntax PyObject_INIT_VAR (syntax-rules () ((_ op typeobj size) (scm-cast (begin (begin (let ((%v (identity size))) (set! (ref (deref (identity op)) 'ob_size) %v) %v) (begin (begin (let ((%v (identity typeobj))) (set! (ref (deref (identity op)) 'ob_type) %v) %v) (let ((%v 1)) (set! (ref (deref (cast (ptr <PyObject>) (identity op))) 'ob_refcnt) %v) %v)) (identity op))))))))
(define-syntax _PyObject_SIZE (syntax-rules () ((_ typeobj) (scm-cast (begin (raw-ref (deref (identity typeobj)) 'tp_basicsize))))))
(define-syntax _PyObject_VAR_SIZE (syntax-rules () ((_ typeobj nitems) (scm-cast (begin (cast <size_t> (logand (cast <integer> (c-+ (c-+ (raw-ref (deref (identity typeobj)) 'tp_basicsize) (cast <real> (* (cast <real> (identity nitems)) (cast <real> (raw-ref (deref (identity typeobj)) 'tp_itemsize))))) (cast <real> (c-- 4 (cast <real> 1))))) (cast <integer> (lognot (cast <integer> (c-- 4 (cast <real> 1))))))))))))
(define-syntax PyType_IS_GC (syntax-rules () ((_ t) (scm-cast (begin (c-!= (cast <real> (logand (cast <integer> (raw-ref (deref (identity t)) 'tp_flags)) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 14))))) (cast <real> 0)))))))
(define-syntax PyObject_IS_GC (syntax-rules () ((_ o) (scm-cast (begin (c-and (cast <real> (c-!= (cast <real> (logand (cast <integer> (raw-ref (deref (raw-ref (deref (identity o)) 'ob_type)) 'tp_flags)) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 14))))) (cast <real> 0))) (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (raw-ref (deref (identity o)) 'ob_type)) 'tp_is_gc)) (cast <real> (cast (ptr <c-void>) 0)))) ((raw-ref (deref (raw-ref (deref (identity o)) 'ob_type)) 'tp_is_gc) o))))))))
(define _PyObject_GC_Del (scm-cast (begin PyObject_GC_Del)))
(define-syntax _Py_AS_GC (syntax-rules () ((_ o) (scm-cast (begin (c-- (cast (ptr <PyGC_Head>) (identity o)) (cast <real> 1)))))))
(define _PyGC_REFS_UNTRACKED (scm-cast (begin (- (cast <real> 2)))))
(define _PyGC_REFS_REACHABLE (scm-cast (begin (- (cast <real> 3)))))
(define _PyGC_REFS_TENTATIVELY_UNREACHABLE (scm-cast (begin (- (cast <real> 4)))))
(define-syntax _PyObject_GC_TRACK (syntax-rules () ((_ o) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (let* ((g (make (ptr <PyGC_Head>)))) (set! (ref g) (c-- (cast (ptr <PyGC_Head>) (identity o)) (cast <real> 1))) (c-if (cast <real> (c-!= (cast <real> (raw-ref (raw-ref (deref g) 'gc) 'gc_refs)) (cast <real> (- (cast <real> 2))))) (Py_FatalError "GC object already tracked") #t) (let ((%v (- (cast <real> 3)))) (set! (ref (raw-ref (deref g) 'gc) 'gc_refs) %v) %v) (let ((%v _PyGC_generation0)) (set! (ref (raw-ref (deref g) 'gc) 'gc_next) %v) %v) (let ((%v (raw-ref (raw-ref (deref _PyGC_generation0) 'gc) 'gc_prev))) (set! (ref (raw-ref (deref g) 'gc) 'gc_prev) %v) %v) (let ((%v g)) (set! (ref (raw-ref (deref (raw-ref (raw-ref (deref g) 'gc) 'gc_prev)) 'gc) 'gc_next) %v) %v) (let ((%v g)) (set! (ref (raw-ref (deref _PyGC_generation0) 'gc) 'gc_prev) %v) %v)) (%continue))) (%continue (lambda () (c-if 0 (%body) (%break 0))))) (%body)))) (begin 0))))))
(define PyGC_HEAD_SIZE (scm-cast (begin 0)))
(define-syntax PyObject_GC_Init (syntax-rules () ((_ op) (scm-cast (begin (begin 0))))))
(define-syntax PyObject_GC_Fini (syntax-rules () ((_ op) (scm-cast (begin (begin 0))))))
(define-syntax PyObject_AS_GC (syntax-rules () ((_ op) (scm-cast (begin (identity op))))))
(define-syntax PyObject_FROM_GC (syntax-rules () ((_ op) (scm-cast (begin (identity op))))))
(define-syntax PyType_SUPPORTS_WEAKREFS (syntax-rules () ((_ t) (scm-cast (begin (c-and (cast <real> (c-!= (cast <real> (logand (cast <integer> (raw-ref (deref (identity t)) 'tp_flags)) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 6))))) (cast <real> 0))) (c-> (cast <real> (raw-ref (deref (identity t)) 'tp_weaklistoffset)) (cast <real> 0))))))))
(define-syntax PyObject_GET_WEAKREFS_LISTPTR (syntax-rules () ((_ o) (scm-cast (begin (cast (ptr (ptr <PyObject>)) (c-+ (cast (ptr <c-char>) (identity o)) (cast <real> (raw-ref (deref (raw-ref (deref (identity o)) 'ob_type)) 'tp_weaklistoffset)))))))))
(define Py_PYDEBUG_H (scm-cast (begin (begin 0))))
(define-syntax Py_GETENV (syntax-rules () ((_ s) (scm-cast (begin (c-if (cast <real> Py_IgnoreEnvironmentFlag) (cast (ptr <c-void>) 0) (getenv s)))))))
(define Py_UNICODEOBJECT_H (scm-cast (begin (begin 0))))
(define _CTYPE_H_ (scm-cast (begin (begin 0))))
(define _RUNETYPE_H_ (scm-cast (begin (begin 0))))
(define _WINT_T (scm-cast (begin (begin 0))))
(define _CACHED_RUNES (scm-cast (begin (c-<< (cast <integer> 1) (cast <integer> 8)))))
(define _CRMASK (scm-cast (begin (lognot (cast <integer> (c-- (c-<< (cast <integer> 1) (cast <integer> 8)) (cast <real> 1)))))))
(define _RUNE_MAGIC_1 (scm-cast (begin "RuneMagi")))
(define _CTYPE_A (scm-cast (begin 256)))
(define _CTYPE_C (scm-cast (begin 512)))
(define _CTYPE_D (scm-cast (begin 1024)))
(define _CTYPE_G (scm-cast (begin 2048)))
(define _CTYPE_L (scm-cast (begin 4096)))
(define _CTYPE_P (scm-cast (begin 8192)))
(define _CTYPE_S (scm-cast (begin 16384)))
(define _CTYPE_U (scm-cast (begin 32768)))
(define _CTYPE_X (scm-cast (begin 65536)))
(define _CTYPE_B (scm-cast (begin 131072)))
(define _CTYPE_R (scm-cast (begin 262144)))
(define _CTYPE_I (scm-cast (begin 524288)))
(define _CTYPE_T (scm-cast (begin 1048576)))
(define _CTYPE_Q (scm-cast (begin 2097152)))
(define _CTYPE_SW0 (scm-cast (begin 536870912)))
(define _CTYPE_SW1 (scm-cast (begin 1073741824)))
(define _CTYPE_SW2 (scm-cast (begin 2147483648)))
(define _CTYPE_SW3 (scm-cast (begin 3221225472)))
(define _CTYPE_SWM (scm-cast (begin 3758096384)))
(define _CTYPE_SWS (scm-cast (begin 30)))
(define-syntax tolower (syntax-rules () ((_ c) (scm-cast (begin (__tolower c))))))
(define-syntax toupper (syntax-rules () ((_ c) (scm-cast (begin (__toupper c))))))
(define-syntax _tolower (syntax-rules () ((_ c) (scm-cast (begin (__tolower c))))))
(define-syntax _toupper (syntax-rules () ((_ c) (scm-cast (begin (__toupper c))))))
(define-syntax digittoint (syntax-rules () ((_ c) (scm-cast (begin (__maskrune (identity c) 255))))))
(define-syntax isascii (syntax-rules () ((_ c) (scm-cast (begin (c-== (cast <real> (logand (cast <integer> (identity c)) (cast <integer> (lognot (cast <integer> 127))))) (cast <real> 0)))))))
(define-syntax toascii (syntax-rules () ((_ c) (scm-cast (begin (logand (cast <integer> (identity c)) (cast <integer> 127)))))))
(define _WCHAR_H_ (scm-cast (begin (begin 0))))
(define _MBSTATE_T (scm-cast (begin (begin 0))))
(define _STDARG_H (scm-cast (begin (begin 0))))
(define _ANSI_STDARG_H_ (scm-cast (begin (begin 0))))
(define __GNUC_VA_LIST (scm-cast (begin (begin 0))))
(define _VA_LIST_ (scm-cast (begin (begin 0))))
(define _VA_LIST_DEFINED (scm-cast (begin (begin 0))))
(define _VA_LIST_T_H (scm-cast (begin (begin 0))))
(define __va_list__ (scm-cast (begin (begin 0))))
(define __WCTYPE_H_ (scm-cast (begin (begin 0))))
(define _WCTYPE_T (scm-cast (begin (begin 0))))
(define WEOF (scm-cast (begin (cast <__darwin_wint_t> (- (cast <real> 1))))))
(define-syntax towlower (syntax-rules () ((_ wc) (scm-cast (begin (__tolower wc))))))
(define-syntax towupper (syntax-rules () ((_ wc) (scm-cast (begin (__toupper wc))))))
(define PyUnicode_AsASCIIString (scm-cast (begin PyUnicodeUCS2_AsASCIIString)))
(define PyUnicode_AsCharmapString (scm-cast (begin PyUnicodeUCS2_AsCharmapString)))
(define PyUnicode_AsEncodedString (scm-cast (begin PyUnicodeUCS2_AsEncodedString)))
(define PyUnicode_AsLatin1String (scm-cast (begin PyUnicodeUCS2_AsLatin1String)))
(define PyUnicode_AsRawUnicodeEscapeString (scm-cast (begin PyUnicodeUCS2_AsRawUnicodeEscapeString)))
(define PyUnicode_AsUTF16String (scm-cast (begin PyUnicodeUCS2_AsUTF16String)))
(define PyUnicode_AsUTF8String (scm-cast (begin PyUnicodeUCS2_AsUTF8String)))
(define PyUnicode_AsUnicode (scm-cast (begin PyUnicodeUCS2_AsUnicode)))
(define PyUnicode_AsUnicodeEscapeString (scm-cast (begin PyUnicodeUCS2_AsUnicodeEscapeString)))
(define PyUnicode_AsWideChar (scm-cast (begin PyUnicodeUCS2_AsWideChar)))
(define PyUnicode_Compare (scm-cast (begin PyUnicodeUCS2_Compare)))
(define PyUnicode_Concat (scm-cast (begin PyUnicodeUCS2_Concat)))
(define PyUnicode_Contains (scm-cast (begin PyUnicodeUCS2_Contains)))
(define PyUnicode_Count (scm-cast (begin PyUnicodeUCS2_Count)))
(define PyUnicode_Decode (scm-cast (begin PyUnicodeUCS2_Decode)))
(define PyUnicode_DecodeASCII (scm-cast (begin PyUnicodeUCS2_DecodeASCII)))
(define PyUnicode_DecodeCharmap (scm-cast (begin PyUnicodeUCS2_DecodeCharmap)))
(define PyUnicode_DecodeLatin1 (scm-cast (begin PyUnicodeUCS2_DecodeLatin1)))
(define PyUnicode_DecodeRawUnicodeEscape (scm-cast (begin PyUnicodeUCS2_DecodeRawUnicodeEscape)))
(define PyUnicode_DecodeUTF16 (scm-cast (begin PyUnicodeUCS2_DecodeUTF16)))
(define PyUnicode_DecodeUTF8 (scm-cast (begin PyUnicodeUCS2_DecodeUTF8)))
(define PyUnicode_DecodeUnicodeEscape (scm-cast (begin PyUnicodeUCS2_DecodeUnicodeEscape)))
(define PyUnicode_Encode (scm-cast (begin PyUnicodeUCS2_Encode)))
(define PyUnicode_EncodeASCII (scm-cast (begin PyUnicodeUCS2_EncodeASCII)))
(define PyUnicode_EncodeCharmap (scm-cast (begin PyUnicodeUCS2_EncodeCharmap)))
(define PyUnicode_EncodeDecimal (scm-cast (begin PyUnicodeUCS2_EncodeDecimal)))
(define PyUnicode_EncodeLatin1 (scm-cast (begin PyUnicodeUCS2_EncodeLatin1)))
(define PyUnicode_EncodeRawUnicodeEscape (scm-cast (begin PyUnicodeUCS2_EncodeRawUnicodeEscape)))
(define PyUnicode_EncodeUTF16 (scm-cast (begin PyUnicodeUCS2_EncodeUTF16)))
(define PyUnicode_EncodeUTF8 (scm-cast (begin PyUnicodeUCS2_EncodeUTF8)))
(define PyUnicode_EncodeUnicodeEscape (scm-cast (begin PyUnicodeUCS2_EncodeUnicodeEscape)))
(define PyUnicode_Find (scm-cast (begin PyUnicodeUCS2_Find)))
(define PyUnicode_Format (scm-cast (begin PyUnicodeUCS2_Format)))
(define PyUnicode_FromEncodedObject (scm-cast (begin PyUnicodeUCS2_FromEncodedObject)))
(define PyUnicode_FromObject (scm-cast (begin PyUnicodeUCS2_FromObject)))
(define PyUnicode_FromOrdinal (scm-cast (begin PyUnicodeUCS2_FromOrdinal)))
(define PyUnicode_FromUnicode (scm-cast (begin PyUnicodeUCS2_FromUnicode)))
(define PyUnicode_FromWideChar (scm-cast (begin PyUnicodeUCS2_FromWideChar)))
(define PyUnicode_GetDefaultEncoding (scm-cast (begin PyUnicodeUCS2_GetDefaultEncoding)))
(define PyUnicode_GetMax (scm-cast (begin PyUnicodeUCS2_GetMax)))
(define PyUnicode_GetSize (scm-cast (begin PyUnicodeUCS2_GetSize)))
(define PyUnicode_Join (scm-cast (begin PyUnicodeUCS2_Join)))
(define PyUnicode_Replace (scm-cast (begin PyUnicodeUCS2_Replace)))
(define PyUnicode_Resize (scm-cast (begin PyUnicodeUCS2_Resize)))
(define PyUnicode_SetDefaultEncoding (scm-cast (begin PyUnicodeUCS2_SetDefaultEncoding)))
(define PyUnicode_Split (scm-cast (begin PyUnicodeUCS2_Split)))
(define PyUnicode_Splitlines (scm-cast (begin PyUnicodeUCS2_Splitlines)))
(define PyUnicode_Tailmatch (scm-cast (begin PyUnicodeUCS2_Tailmatch)))
(define PyUnicode_Translate (scm-cast (begin PyUnicodeUCS2_Translate)))
(define PyUnicode_TranslateCharmap (scm-cast (begin PyUnicodeUCS2_TranslateCharmap)))
(define _PyUnicode_AsDefaultEncodedString (scm-cast (begin _PyUnicodeUCS2_AsDefaultEncodedString)))
(define _PyUnicode_IsAlpha (scm-cast (begin _PyUnicodeUCS2_IsAlpha)))
(define _PyUnicode_IsDecimalDigit (scm-cast (begin _PyUnicodeUCS2_IsDecimalDigit)))
(define _PyUnicode_IsDigit (scm-cast (begin _PyUnicodeUCS2_IsDigit)))
(define _PyUnicode_IsLinebreak (scm-cast (begin _PyUnicodeUCS2_IsLinebreak)))
(define _PyUnicode_IsLowercase (scm-cast (begin _PyUnicodeUCS2_IsLowercase)))
(define _PyUnicode_IsNumeric (scm-cast (begin _PyUnicodeUCS2_IsNumeric)))
(define _PyUnicode_IsTitlecase (scm-cast (begin _PyUnicodeUCS2_IsTitlecase)))
(define _PyUnicode_IsUppercase (scm-cast (begin _PyUnicodeUCS2_IsUppercase)))
(define _PyUnicode_IsWhitespace (scm-cast (begin _PyUnicodeUCS2_IsWhitespace)))
(define _PyUnicode_ToDecimalDigit (scm-cast (begin _PyUnicodeUCS2_ToDecimalDigit)))
(define _PyUnicode_ToDigit (scm-cast (begin _PyUnicodeUCS2_ToDigit)))
(define _PyUnicode_ToLowercase (scm-cast (begin _PyUnicodeUCS2_ToLowercase)))
(define _PyUnicode_ToNumeric (scm-cast (begin _PyUnicodeUCS2_ToNumeric)))
(define _PyUnicode_ToTitlecase (scm-cast (begin _PyUnicodeUCS2_ToTitlecase)))
(define _PyUnicode_ToUppercase (scm-cast (begin _PyUnicodeUCS2_ToUppercase)))
(define-syntax Py_UNICODE_ISSPACE (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_IsWhitespace ch))))))
(define-syntax Py_UNICODE_ISLOWER (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_IsLowercase ch))))))
(define-syntax Py_UNICODE_ISUPPER (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_IsUppercase ch))))))
(define-syntax Py_UNICODE_ISTITLE (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_IsTitlecase ch))))))
(define-syntax Py_UNICODE_ISLINEBREAK (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_IsLinebreak ch))))))
(define-syntax Py_UNICODE_TOLOWER (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_ToLowercase ch))))))
(define-syntax Py_UNICODE_TOUPPER (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_ToUppercase ch))))))
(define-syntax Py_UNICODE_TOTITLE (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_ToTitlecase ch))))))
(define-syntax Py_UNICODE_ISDECIMAL (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_IsDecimalDigit ch))))))
(define-syntax Py_UNICODE_ISDIGIT (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_IsDigit ch))))))
(define-syntax Py_UNICODE_ISNUMERIC (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_IsNumeric ch))))))
(define-syntax Py_UNICODE_TODECIMAL (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_ToDecimalDigit ch))))))
(define-syntax Py_UNICODE_TODIGIT (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_ToDigit ch))))))
(define-syntax Py_UNICODE_TONUMERIC (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_ToNumeric ch))))))
(define-syntax Py_UNICODE_ISALPHA (syntax-rules () ((_ ch) (scm-cast (begin (_PyUnicodeUCS2_IsAlpha ch))))))
(define-syntax Py_UNICODE_ISALNUM (syntax-rules () ((_ ch) (scm-cast (begin (c-or (cast <real> (c-or (cast <real> (c-or (cast <real> (_PyUnicodeUCS2_IsAlpha ch)) (_PyUnicodeUCS2_IsDecimalDigit ch))) (_PyUnicodeUCS2_IsDigit ch))) (_PyUnicodeUCS2_IsNumeric ch)))))))
(define-syntax Py_UNICODE_COPY (syntax-rules () ((_ target source length) (scm-cast (begin (memcpy (identity target) (identity source) (* (cast <real> (identity length)) (cast <real> (c-sizeof <Py_UNICODE>)))))))))
(define-syntax Py_UNICODE_FILL (syntax-rules () ((_ target value length) (scm-cast (begin (call/cc (lambda (%break) (letrec ((%body (lambda () (let* ((i (make <c-int>))) (call/cc (lambda (%break) (let ((%v 0)) (set! (ref i) %v) %v) (let %continue () (c-if (c-< (cast <real> i) (cast <real> (identity length))) (begin (let ((%v (identity value))) (set! (ref (identity target) (cast <integer> i)) %v) %v) (post++ i) (%continue)) (%break 0)))))) (%continue))) (%continue (lambda () (c-if 0 (%body) (%break 0))))) (%body)))))))))
(define-syntax Py_UNICODE_MATCH (syntax-rules () ((_ string offset substring) (scm-cast (begin (c-and (cast <real> (c-== (cast <real> (deref (c-+ (raw-ref (deref (identity string)) 'str) (cast <real> (identity offset))))) (cast <real> (deref (raw-ref (deref (identity substring)) 'str))))) (c-if (cast <integer> (memcmp (c-+ (raw-ref (deref (identity string)) 'str) (cast <real> (identity offset))) (raw-ref (deref (identity substring)) 'str) (* (cast <real> (raw-ref (deref (identity substring)) 'length)) (cast <real> (c-sizeof <Py_UNICODE>))))) 0 1)))))))
(define-syntax PyUnicode_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyUnicode_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyUnicode_Type))))))))
(define-syntax PyUnicode_CheckExact (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyUnicode_Type))))))))
(define-syntax PyUnicode_GET_SIZE (syntax-rules () ((_ op) (scm-cast (begin (raw-ref (deref (cast (ptr <PyUnicodeObject>) (identity op))) 'length))))))
(define-syntax PyUnicode_GET_DATA_SIZE (syntax-rules () ((_ op) (scm-cast (begin (* (cast <real> (raw-ref (deref (cast (ptr <PyUnicodeObject>) (identity op))) 'length)) (cast <real> (c-sizeof <Py_UNICODE>))))))))
(define-syntax PyUnicode_AS_UNICODE (syntax-rules () ((_ op) (scm-cast (begin (raw-ref (deref (cast (ptr <PyUnicodeObject>) (identity op))) 'str))))))
(define-syntax PyUnicode_AS_DATA (syntax-rules () ((_ op) (scm-cast (begin (cast (ptr <c-char>) (raw-ref (deref (cast (ptr <PyUnicodeObject>) (identity op))) 'str)))))))
(define Py_UNICODE_REPLACEMENT_CHARACTER (scm-cast (begin (cast <Py_UNICODE> 65533))))
(define Py_INTOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyInt_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyInt_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyInt_Type))))))))
(define-syntax PyInt_CheckExact (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyInt_Type))))))))
(define-syntax PyInt_AS_LONG (syntax-rules () ((_ op) (scm-cast (begin (raw-ref (deref (cast (ptr <PyIntObject>) (identity op))) 'ob_ival))))))
(define Py_BOOLOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyBool_Check (syntax-rules () ((_ x) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity x)) 'ob_type)) (cast <real> (ptr PyBool_Type))))))))
(define Py_False (scm-cast (begin (cast (ptr <PyObject>) (ptr _Py_ZeroStruct)))))
(define Py_True (scm-cast (begin (cast (ptr <PyObject>) (ptr _Py_TrueStruct)))))
(define Py_LONGOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyLong_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyLong_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyLong_Type))))))))
(define-syntax PyLong_CheckExact (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyLong_Type))))))))
(define Py_FLOATOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyFloat_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyFloat_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyFloat_Type))))))))
(define-syntax PyFloat_CheckExact (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyFloat_Type))))))))
(define-syntax PyFloat_AS_DOUBLE (syntax-rules () ((_ op) (scm-cast (begin (raw-ref (deref (cast (ptr <PyFloatObject>) (identity op))) 'ob_fval))))))
(define Py_COMPLEXOBJECT_H (scm-cast (begin (begin 0))))
(define c_sum (scm-cast (begin _Py_c_sum)))
(define c_diff (scm-cast (begin _Py_c_diff)))
(define c_neg (scm-cast (begin _Py_c_neg)))
(define c_prod (scm-cast (begin _Py_c_prod)))
(define c_quot (scm-cast (begin _Py_c_quot)))
(define c_pow (scm-cast (begin _Py_c_pow)))
(define-syntax PyComplex_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyComplex_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyComplex_Type))))))))
(define-syntax PyComplex_CheckExact (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyComplex_Type))))))))
(define Py_RANGEOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyRange_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyRange_Type))))))))
(define Py_STRINGOBJECT_H (scm-cast (begin (begin 0))))
(define SSTATE_NOT_INTERNED (scm-cast (begin 0)))
(define SSTATE_INTERNED_MORTAL (scm-cast (begin 1)))
(define SSTATE_INTERNED_IMMORTAL (scm-cast (begin 2)))
(define-syntax PyString_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyString_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyString_Type))))))))
(define-syntax PyString_CheckExact (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyString_Type))))))))
(define-syntax PyString_CHECK_INTERNED (syntax-rules () ((_ op) (scm-cast (begin (raw-ref (deref (cast (ptr <PyStringObject>) (identity op))) 'ob_sstate))))))
(define-syntax PyString_AS_STRING (syntax-rules () ((_ op) (scm-cast (begin (raw-ref (deref (cast (ptr <PyStringObject>) (identity op))) 'ob_sval))))))
(define-syntax PyString_GET_SIZE (syntax-rules () ((_ op) (scm-cast (begin (raw-ref (deref (cast (ptr <PyStringObject>) (identity op))) 'ob_size))))))
(define Py_BUFFEROBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyBuffer_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyBuffer_Type))))))))
(define Py_END_OF_BUFFER (scm-cast (begin (- (cast <real> 1)))))
(define Py_TUPLEOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyTuple_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyTuple_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyTuple_Type))))))))
(define-syntax PyTuple_CheckExact (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyTuple_Type))))))))
(define-syntax PyTuple_GET_ITEM (syntax-rules () ((_ op i) (scm-cast (begin (ref (raw-ref (deref (cast (ptr <PyTupleObject>) (identity op))) 'ob_item) (cast <integer> i)))))))
(define-syntax PyTuple_GET_SIZE (syntax-rules () ((_ op) (scm-cast (begin (raw-ref (deref (cast (ptr <PyTupleObject>) (identity op))) 'ob_size))))))
(define-syntax PyTuple_SET_ITEM (syntax-rules () ((_ op i v) (scm-cast (begin (let ((%v v)) (set! (ref (raw-ref (deref (cast (ptr <PyTupleObject>) (identity op))) 'ob_item) (cast <integer> i)) %v) %v))))))
(define Py_LISTOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyList_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyList_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyList_Type))))))))
(define-syntax PyList_CheckExact (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyList_Type))))))))
(define-syntax PyList_GET_ITEM (syntax-rules () ((_ op i) (scm-cast (begin (ref (raw-ref (deref (cast (ptr <PyListObject>) (identity op))) 'ob_item) (cast <integer> i)))))))
(define-syntax PyList_SET_ITEM (syntax-rules () ((_ op i v) (scm-cast (begin (let ((%v (identity v))) (set! (ref (raw-ref (deref (cast (ptr <PyListObject>) (identity op))) 'ob_item) (cast <integer> i)) %v) %v))))))
(define-syntax PyList_GET_SIZE (syntax-rules () ((_ op) (scm-cast (begin (raw-ref (deref (cast (ptr <PyListObject>) (identity op))) 'ob_size))))))
(define Py_DICTOBJECT_H (scm-cast (begin (begin 0))))
(define PyDict_MINSIZE (scm-cast (begin 8)))
(define-syntax PyDict_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyDict_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyDict_Type))))))))
(define Py_ENUMOBJECT_H (scm-cast (begin (begin 0))))
(define Py_METHODOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyCFunction_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyCFunction_Type))))))))
(define-syntax PyCFunction_GET_FUNCTION (syntax-rules () ((_ func) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <PyCFunctionObject>) func)) 'm_ml)) 'ml_meth))))))
(define-syntax PyCFunction_GET_SELF (syntax-rules () ((_ func) (scm-cast (begin (raw-ref (deref (cast (ptr <PyCFunctionObject>) func)) 'm_self))))))
(define-syntax PyCFunction_GET_FLAGS (syntax-rules () ((_ func) (scm-cast (begin (raw-ref (deref (raw-ref (deref (cast (ptr <PyCFunctionObject>) func)) 'm_ml)) 'ml_flags))))))
(define-syntax PyCFunction_New (syntax-rules () ((_ ML SELF) (scm-cast (begin (PyCFunction_NewEx (identity ML) (identity SELF) (cast (ptr <c-void>) 0)))))))
(define METH_OLDARGS (scm-cast (begin 0)))
(define METH_VARARGS (scm-cast (begin 1)))
(define METH_KEYWORDS (scm-cast (begin 2)))
(define METH_NOARGS (scm-cast (begin 4)))
(define METH_O (scm-cast (begin 8)))
(define METH_CLASS (scm-cast (begin 16)))
(define METH_STATIC (scm-cast (begin 32)))
(define Py_MODULEOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyModule_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyModule_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyModule_Type))))))))
(define-syntax PyModule_CheckExact (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyModule_Type))))))))
(define Py_FUNCOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyFunction_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyFunction_Type))))))))
(define-syntax PyFunction_GET_CODE (syntax-rules () ((_ func) (scm-cast (begin (raw-ref (deref (cast (ptr <PyFunctionObject>) func)) 'func_code))))))
(define-syntax PyFunction_GET_GLOBALS (syntax-rules () ((_ func) (scm-cast (begin (raw-ref (deref (cast (ptr <PyFunctionObject>) func)) 'func_globals))))))
(define-syntax PyFunction_GET_MODULE (syntax-rules () ((_ func) (scm-cast (begin (raw-ref (deref (cast (ptr <PyFunctionObject>) func)) 'func_module))))))
(define-syntax PyFunction_GET_DEFAULTS (syntax-rules () ((_ func) (scm-cast (begin (raw-ref (deref (cast (ptr <PyFunctionObject>) func)) 'func_defaults))))))
(define-syntax PyFunction_GET_CLOSURE (syntax-rules () ((_ func) (scm-cast (begin (raw-ref (deref (cast (ptr <PyFunctionObject>) func)) 'func_closure))))))
(define Py_CLASSOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyClass_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyClass_Type))))))))
(define-syntax PyInstance_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyInstance_Type))))))))
(define-syntax PyMethod_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyMethod_Type))))))))
(define-syntax PyMethod_GET_FUNCTION (syntax-rules () ((_ meth) (scm-cast (begin (raw-ref (deref (cast (ptr <PyMethodObject>) meth)) 'im_func))))))
(define-syntax PyMethod_GET_SELF (syntax-rules () ((_ meth) (scm-cast (begin (raw-ref (deref (cast (ptr <PyMethodObject>) meth)) 'im_self))))))
(define-syntax PyMethod_GET_CLASS (syntax-rules () ((_ meth) (scm-cast (begin (raw-ref (deref (cast (ptr <PyMethodObject>) meth)) 'im_class))))))
(define Py_FILEOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyFile_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyFile_Type)))) (PyType_IsSubtype (raw-ref (deref (identity op)) 'ob_type) (ptr PyFile_Type))))))))
(define-syntax PyFile_CheckExact (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyFile_Type))))))))
(define PY_STDIOTEXTMODE (scm-cast (begin "b")))
(define Py_COBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyCObject_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyCObject_Type))))))))
(define Py_TRACEBACK_H (scm-cast (begin (begin 0))))
(define-syntax PyTraceBack_Check (syntax-rules () ((_ v) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity v)) 'ob_type)) (cast <real> (ptr PyTraceBack_Type))))))))
(define Py_SLICEOBJECT_H (scm-cast (begin (begin 0))))
(define Py_Ellipsis (scm-cast (begin (ptr _Py_EllipsisObject))))
(define-syntax PySlice_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PySlice_Type))))))))
(define Py_CELLOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyCell_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyCell_Type))))))))
(define-syntax PyCell_GET (syntax-rules () ((_ op) (scm-cast (begin (raw-ref (deref (cast (ptr <PyCellObject>) (identity op))) 'ob_ref))))))
(define-syntax PyCell_SET (syntax-rules () ((_ op v) (scm-cast (begin (let ((%v v)) (set! (ref (deref (cast (ptr <PyCellObject>) (identity op))) 'ob_ref) %v) %v))))))
(define Py_ITEROBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PySeqIter_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PySeqIter_Type))))))))
(define-syntax PyCallIter_Check (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr PyCallIter_Type))))))))
(define Py_DESCROBJECT_H (scm-cast (begin (begin 0))))
(define PyWrapperFlag_KEYWORDS (scm-cast (begin 1)))
(define-syntax PyDescr_IsData (syntax-rules () ((_ d) (scm-cast (begin (c-!= (cast <real> (raw-ref (deref (raw-ref (deref (identity d)) 'ob_type)) 'tp_descr_set)) (cast <real> (cast (ptr <c-void>) 0))))))))
(define Py_WEAKREFOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyWeakref_CheckRef (syntax-rules () ((_ op) (scm-cast (begin (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr _PyWeakref_RefType))))))))
(define-syntax PyWeakref_CheckProxy (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr _PyWeakref_ProxyType)))) (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr _PyWeakref_CallableProxyType)))))))))
(define-syntax PyWeakref_Check (syntax-rules () ((_ op) (scm-cast (begin (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr _PyWeakref_RefType)))) (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr _PyWeakref_ProxyType)))) (c-== (cast <real> (raw-ref (deref (identity op)) 'ob_type)) (cast <real> (ptr _PyWeakref_CallableProxyType))))))))))
(define-syntax PyWeakref_GET_OBJECT (syntax-rules () ((_ ref) (scm-cast (begin (raw-ref (deref (cast (ptr <PyWeakReference>) (identity ref))) 'wr_object))))))
(define Py_CODECREGISTRY_H (scm-cast (begin (begin 0))))
(define Py_ERRORS_H (scm-cast (begin (begin 0))))
(define-syntax PyErr_BadInternalCall (syntax-rules () ((_ ||) (scm-cast (begin (_PyErr_BadInternalCall "<stdin>" 2138))))))
(define Py_PYSTATE_H (scm-cast (begin (begin 0))))
(define PyTrace_CALL (scm-cast (begin 0)))
(define PyTrace_EXCEPTION (scm-cast (begin 1)))
(define PyTrace_LINE (scm-cast (begin 2)))
(define PyTrace_RETURN (scm-cast (begin 3)))
(define-syntax PyThreadState_GET (syntax-rules () ((_ ||) (scm-cast (begin (identity _PyThreadState_Current))))))
(define Py_MODSUPPORT_H (scm-cast (begin (begin 0))))
(define PYTHON_API_VERSION (scm-cast (begin 1012)))
(define PYTHON_API_STRING (scm-cast (begin "1012")))
(define-syntax Py_InitModule (syntax-rules () ((_ name methods) (scm-cast (begin (Py_InitModule4 name methods (cast (ptr <c-char>) (cast (ptr <c-void>) 0)) (cast (ptr <PyObject>) (cast (ptr <c-void>) 0)) 1012))))))
(define-syntax Py_InitModule3 (syntax-rules () ((_ name methods doc) (scm-cast (begin (Py_InitModule4 name methods doc (cast (ptr <PyObject>) (cast (ptr <c-void>) 0)) 1012))))))
(define Py_PYTHONRUN_H (scm-cast (begin (begin 0))))
(define PyCF_SOURCE_IS_UTF8 (scm-cast (begin 256)))
(define PyCF_DONT_IMPLY_DEDENT (scm-cast (begin 512)))
(define PYOS_STACK_MARGIN (scm-cast (begin 2048)))
(define Py_CEVAL_H (scm-cast (begin (begin 0))))
(define-syntax PyEval_CallObject (syntax-rules () ((_ func arg) (scm-cast (begin (PyEval_CallObjectWithKeywords func arg (cast (ptr <PyObject>) (cast (ptr <c-void>) 0))))))))
(define Py_SYSMODULE_H (scm-cast (begin (begin 0))))
(define Py_INTRCHECK_H (scm-cast (begin (begin 0))))
(define Py_IMPORT_H (scm-cast (begin (begin 0))))
(define Py_ABSTRACTOBJECT_H (scm-cast (begin (begin 0))))
(define-syntax PyObject_DelAttrString (syntax-rules () ((_ O A) (scm-cast (begin (PyObject_SetAttrString (identity O) (identity A) (cast (ptr <c-void>) 0)))))))
(define-syntax PyObject_DelAttr (syntax-rules () ((_ O A) (scm-cast (begin (PyObject_SetAttr (identity O) (identity A) (cast (ptr <c-void>) 0)))))))
(define PyObject_Length (scm-cast (begin PyObject_Size)))
(define-syntax PyIter_Check (syntax-rules () ((_ obj) (scm-cast (begin (c-and (cast <real> (c-!= (cast <real> (logand (cast <integer> (raw-ref (deref (raw-ref (deref (identity obj)) 'ob_type)) 'tp_flags)) (cast <integer> (c-<< (cast <integer> 1) (cast <integer> 7))))) (cast <real> 0))) (c-!= (cast <real> (raw-ref (deref (raw-ref (deref (identity obj)) 'ob_type)) 'tp_iternext)) (cast <real> (cast (ptr <c-void>) 0)))))))))
(define PySequence_Length (scm-cast (begin PySequence_Size)))
(define-syntax PySequence_Fast_GET_SIZE (syntax-rules () ((_ o) (scm-cast (begin (c-if (cast <real> (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity o)) 'ob_type)) (cast <real> (ptr PyList_Type)))) (PyType_IsSubtype (raw-ref (deref (identity o)) 'ob_type) (ptr PyList_Type)))) (raw-ref (deref (cast (ptr <PyListObject>) (identity o))) 'ob_size) (raw-ref (deref (cast (ptr <PyTupleObject>) (identity o))) 'ob_size)))))))
(define-syntax PySequence_Fast_GET_ITEM (syntax-rules () ((_ o i) (scm-cast (begin (c-if (cast <real> (c-or (cast <real> (c-== (cast <real> (raw-ref (deref (identity o)) 'ob_type)) (cast <real> (ptr PyList_Type)))) (PyType_IsSubtype (raw-ref (deref (identity o)) 'ob_type) (ptr PyList_Type)))) (ref (raw-ref (deref (cast (ptr <PyListObject>) (identity o))) 'ob_item) (cast <integer> i)) (ref (raw-ref (deref (cast (ptr <PyTupleObject>) (identity o))) 'ob_item) (cast <integer> i))))))))
(define-syntax PySequence_ITEM (syntax-rules () ((_ o i) (scm-cast (begin ((raw-ref (deref (raw-ref (deref (raw-ref (deref o) 'ob_type)) 'tp_as_sequence)) 'sq_item) o i))))))
(define PY_ITERSEARCH_COUNT (scm-cast (begin 1)))
(define PY_ITERSEARCH_INDEX (scm-cast (begin 2)))
(define PY_ITERSEARCH_CONTAINS (scm-cast (begin 3)))
(define PySequence_In (scm-cast (begin PySequence_Contains)))
(define PyMapping_Length (scm-cast (begin PyMapping_Size)))
(define-syntax PyMapping_DelItemString (syntax-rules () ((_ O K) (scm-cast (begin (PyObject_DelItemString (identity O) (identity K)))))))
(define-syntax PyMapping_DelItem (syntax-rules () ((_ O K) (scm-cast (begin (PyObject_DelItem (identity O) (identity K)))))))
(define-syntax PyMapping_Keys (syntax-rules () ((_ O) (scm-cast (begin (PyObject_CallMethod O "keys" (cast (ptr <c-void>) 0)))))))
(define-syntax PyMapping_Values (syntax-rules () ((_ O) (scm-cast (begin (PyObject_CallMethod O "values" (cast (ptr <c-void>) 0)))))))
(define-syntax PyMapping_Items (syntax-rules () ((_ O) (scm-cast (begin (PyObject_CallMethod O "items" (cast (ptr <c-void>) 0)))))))
(define-syntax PyArg_GetInt (syntax-rules () ((_ v a) (scm-cast (begin (PyArg_Parse (identity v) "i" (identity a)))))))
(define-syntax PyArg_NoArgs (syntax-rules () ((_ v) (scm-cast (begin (PyArg_Parse v ""))))))
(define-syntax Py_CHARMASK (syntax-rules () ((_ c) (scm-cast (begin (logand (cast <integer> (identity c)) (cast <integer> 255)))))))
(define Py_PYFPE_H (scm-cast (begin (begin 0))))
(define-syntax PyFPE_START_PROTECT (syntax-rules () ((_ err_string leave_stmt) (scm-cast (begin (begin 0))))))
(define-syntax PyFPE_END_PROTECT (syntax-rules () ((_ v) (scm-cast (begin (begin 0))))))
(define Py_single_input (scm-cast (begin 256)))
(define Py_file_input (scm-cast (begin 257)))
(define Py_eval_input (scm-cast (begin 258)))
(define-syntax PyDoc_STR (syntax-rules () ((_ str) (scm-cast (begin str)))))

(provide "python")

;; Local variables:
;; mode: scheme
;; end:
